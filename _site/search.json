[
  {
    "objectID": "glossary.html",
    "href": "glossary.html",
    "title": "Glossaire",
    "section": "",
    "text": "A\nArgument : élément d’une fonction, essentiel ou optionnel, qui précise ou modifie la façon dont la fonction est exécutée.\n\n\nB\n\n\nC\nCasse : R différencie les lettres minuscules des lettres majuscules.\nChemin absolu : chemin vers un fichier à partir de la racine (ex : C:/).\nChemin relatif : chemin vers un fichier à partir du répertoire de travail.\nClasse : type de données contenues dans une variable (le plus souvent des caractères ou des valeurs numériques).\nCommande : morceau de code qui exécute une action et qui contient généralement une ou plusieurs fonctions.\nCommentaire : partie d’un script qui ne sera pas exécutée (commence par un #).\nConsole : fenêtre dans RStudio où l’on peut écrire et exécuter du code.\n\n\nD\nData frame : objet à deux dimensions (lignes et colonnes) dont les éléments peuvent être de différents types.\n\n\nE\nEnvironnement : contient votre espace de travail (données importées, objets, fonctions, …)\n\n\nF\nFacteur : vecteur contenant une structure interne définie par des niveaux.\nFonction : code qui exécute une action.\n\n\nG\n\n\nH\n\n\nI\n\n\nJ\n\n\nK\n\n\nL\n\n\nM\nMatrice : objet à deux dimensions dont les éléments sont de même type.\n\n\nN\n\n\nO\nObjet : tout élément manipulé ou créé dans R (on parle d’un langage orienté objet).\n\n\nP\nPackage : ensemble de fonctionnalités supplémentaires qui peuvent être chargées dans R.\n\n\nQ\n\n\nR\nRépertoire de travail : dossier qui contient tout ce qui concerne votre session actuelle.\n\n\nS\nScript : à la façon d’un document texte, permet de rédiger et de sauvegarder du code.\n\n\nT\n\n\nU\n\n\nV\nVecteur : objet à une dimension, dont les éléments sont de même type.\n\n\nW\n\n\nX\n\n\nY\n\n\nZ"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ateliers codons",
    "section": "",
    "text": "R - perfectionnement"
  },
  {
    "objectID": "posts/01-installer-r-et-rstudio/index.html",
    "href": "posts/01-installer-r-et-rstudio/index.html",
    "title": "Installer R et RStudio",
    "section": "",
    "text": "Ce tutoriel est adapté de Getting started with R and RStudio du site Our Coding Club."
  },
  {
    "objectID": "posts/01-installer-r-et-rstudio/index.html#télécharger-r",
    "href": "posts/01-installer-r-et-rstudio/index.html#télécharger-r",
    "title": "Installer R et RStudio",
    "section": "Télécharger R",
    "text": "Télécharger R\nNaviguez jusqu’au site internet du CRAN (The Comprehensive R Archive Network) et choisissez Download R for Windows.\n\n\n\n\n\n\nCliquez sur base puis sur Download R-… for Windows.\n \n\nChoisissez l’emplacement de sauvegarde puis téléchargez le fichier."
  },
  {
    "objectID": "posts/01-installer-r-et-rstudio/index.html#installer-r",
    "href": "posts/01-installer-r-et-rstudio/index.html#installer-r",
    "title": "Installer R et RStudio",
    "section": "Installer R",
    "text": "Installer R\nNaviguez jusqu’à l’emplacement de sauvegarde (Téléchargements par exemple) et double-cliquez sur le fichier R-…-win.exe\n\n\n\n\n\n\nChoisissez la langue pour l’installation puis cliquez sur OK\n\n\n\n\n\n\nParcourez les Informations puis cliquez sur Suivant.\n\n\n\n\n\n\nChoisissez le dossier dans lequel sera installé R (Program Files par exemple).\n\n\n\n\n\n\nDans les Composants à installer, laissez les valeurs par défaut puis cliquez sur Suivant.\n\n\n\n\n\n\nDans les Options de démarrage, laissez les valeurs par défauts puis cliquez sur Suivant.\n\n\n\n\n\n\nDans les Tâches supplémentaires, vous pouvez choisir de créer une icône sur le Bureau et/ou dans la barre de lancement rapide.\n\n\n\n\n\n\nNote\n\n\n\nNous utilisons rarement R de manière isolée, vous pouvez donc laisser les valeurs par défaut.\n\n\n\n\n\n\n\n\nUne fois R installé, cliquez sur Terminer.\n\n\n\n\n\n\nNote\n\n\n\nLa plupart des utilisateurs interagissent avec R à l’aide d’une interface graphique, dont la plus connue est RStudio."
  },
  {
    "objectID": "posts/01-installer-r-et-rstudio/index.html#télécharger-rstudio",
    "href": "posts/01-installer-r-et-rstudio/index.html#télécharger-rstudio",
    "title": "Installer R et RStudio",
    "section": "Télécharger RStudio",
    "text": "Télécharger RStudio\nNaviguez jusqu’au site internet de RStudio et cliquez sur Products puis sur RStudio.\n\n\n\n\n\n\nChoisissez RStudio Desktop\n\n\n\n\n\n\nCliquez sur Download RStudio Desktop\n\n\n\n\n\n\nChoisissez RStudio Desktop FREE puis cliquez sur Download.\n\n\n\n\n\n\nCliquez sur Download RStudio for Windows et choisissez l’emplacement de sauvegarde."
  },
  {
    "objectID": "posts/01-installer-r-et-rstudio/index.html#installer-rstudio",
    "href": "posts/01-installer-r-et-rstudio/index.html#installer-rstudio",
    "title": "Installer R et RStudio",
    "section": "Installer RStudio",
    "text": "Installer RStudio\nNaviguez jusqu’à l’emplacement de sauvegarde (Téléchargements par exemple) et double-cliquez sur le fichier RStudio-…exe\n\n\n\n\n\n\nDans la fenêtre Installation de RStudio qui s’ouvre, cliquez sur Suivant.\n\n\n\n\n\n\nChoisissez le dossier dans lequel sera installé RStudio (Program Files par exemple) et cliquez sur Suivant.\n\n\n\n\n\n\nDans le menu Choisissez un dossier dans le menu Démarrer, laissez la valeur par défaut (RStudio) et cliquez sur Installer.\n\n\n\n\n\n\nUne fois RStudio installé, cliquez sur Fermer."
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html",
    "href": "posts/02-premiers-pas-avec-r/index.html",
    "title": "Premiers pas avec R",
    "section": "",
    "text": "Ce tutoriel est adapté de Getting started with R and RStudio du site Our Coding Club."
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#r_def",
    "href": "posts/02-premiers-pas-avec-r/index.html#r_def",
    "title": "Premiers pas avec R",
    "section": "Qu’est-ce que R ?",
    "text": "Qu’est-ce que R ?\n\nR est un langage de programmation statistique qui a rapidement gagné en popularité dans de nombreux domaines scientifiques.\nIl a été développé par Ross Ihaka et Robert Gentleman, du Département de Statistiques de l’Université d’Auckland, comme implémentation libre du langage de programmation S.\n\n\n\n\n\n\n\nQuelques dates\n\n\n\n\n\n\n1991\nCréation du langage R\n\n\n1993\nR est dévoilé au public\n\n\n1996\nArticle dans le Journal of Computational and Graphical Statistics\n\n\n\n\n\n\nR désigne également le logiciel qui utilise ce langage pour des calculs statistiques (et tout un tas d’autres applications (calculs, graphiques, …).\nIl dispose d’une communauté en ligne très active ainsi que d’extensions pour presque tous les domaines et applications possibles et imaginables (cartographie, fouille de texte, modélisation, …).\n\nContrairement à d’autres logiciels de statistiques comme Minitab ou SPSS, R peut être exécuté entièrement en ligne de commande et ne nécessite pas d’interface graphique, ce qui lui confère une grande flexibilité.\n\n\n\n\n\n\n\nQuelques avantages de R\n\n\n\n\nC’est un outil libre et open source (tout le monde peut utiliser le code et voir comment il fonctionne)\n\nC’est un langage de programmation plutôt qu’une interface graphique, ce qui permet à l’utilisateur de sauvegarder facilement des scripts sous forme de texte pour les ré-utiliser ou les partager\n\nBeaucoup de personnes l’utilisent dans beaucoup de domaines différents - il est rare d’être confronté à un problème qui n’a jamais été résolu !"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#naviguer_rstudio",
    "href": "posts/02-premiers-pas-avec-r/index.html#naviguer_rstudio",
    "title": "Premiers pas avec R",
    "section": "Naviguer dans RStudio",
    "text": "Naviguer dans RStudio\n\nEn ouvrant RStudio, vous verrez une fenêtre comme celle ci-dessous, qui se divise en trois panneaux :\n\n\n\nLa console\nVous pouvez y taper du code et l’exécuter en appuyant sur Entrée. Quand vous démarrez une nouvelle session dans RStudio, la console affiche également des informations comme la version de R présente sur votre ordinateur ainsi que des indications sur la manière d’obtenir de l’aide.\n\n\n\n\n\n\nL’invite de commande\n\n\n\nDans la console, une ligne commence par > : c’est ce qu’on appelle l’invite de commande. Cela indique que R est prêt à recevoir vos instructions !\nTapez 2+2 puis appuyez sur Entrée : la console affiche le résultat.\n\n2 + 2\n\n[1] 4\n\n\nDans la console, vous pouvez parcourir les dernières commandes exécutées à l’aide des flèches haut et bas.\n\n\n\n\n\nL’espace de travail\nVous y trouverez votre environnement (données importées, objets créés, fonctions définies, …), ainsi que d’autres onglets comme l’historique des commandes exécutées ou l’accès à des tutoriels (pour les versions récentes de RStudio).\n\n\n\n\n\n\nUn langage orienté objet\n\n\n\nR est un langage orienté objet, ce qui veut dire que tout ce que vous manipulez dans R est stocké dans un objet.\n\n\nD’autres onglets vous permettent d’accéder à l’historique des commandes ou encore à des tutoriels (pour les versions les plus récentes de RStudio).\n\n\n\nLe navigateur\nCe navigateur vous permet de navigeur dans vos dossiers, de copier, renommer ou supprimer des fichiers, à la manière d’un explorateur classique.\nLes autres onglets permettent de visualiser les graphiques ou encore d’afficher l’aide.\n\n\n\nLe script\n\n\n\n\n\n\nImportant\n\n\n\nLe code tapé et exécuté dans la console ne sera plus disponible quand vous quitterez votre session RStudio. A la manière d’un document Word, un script vous permet de sauvegarder votre code afin d’y accéder ultérieurement ou de le partager.\n\n\nPour ouvrir un nouveau script, cliquez sur le “plus” dans le coin supérieur gauche de la fenêtre RStudio puis sur R Script.\n\n\n\n\n\n\n\n\nRaccourcis clavier : nouveau script\n\n\n\nPour ouvrir un nouveau script, utilisez la combinaison Ctrl + Shift + N\n\n\n\nUn nouveau panneau s’affiche :"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#créer-un-projet",
    "href": "posts/02-premiers-pas-avec-r/index.html#créer-un-projet",
    "title": "Premiers pas avec R",
    "section": "Créer un projet",
    "text": "Créer un projet\n\nPour éviter de perdre du temps à chercher des fichiers dont on a oublié le nom et l’emplacement, il est utile d’organiser son travail à l’aide de projets.\nPour créer un projet, cliquez sur File puis New project… :\n\nChoisissez New Directory puis New Project\n\n\n\n\n\n\n\n\n\n\nDans la fenêtre Create New Project, attribuez un nom et un emplacement au projet, puis cliquez sur Create project\n\nQuand vous voudrez travailler à nouveau sur ces données, il vous suffira de double-cliquer sur le fichier .Rproj pour ouvrir le projet et accéder à tout ce qu’il contient.\n\n\n\n\n\n\n\n\nBonnes pratiques : nommer ses fichiers et dossiers\n\n\n\nPour vous simplifier la vie, voici quelques recommandations :\n\nprivilégiez les noms courts et explicites (à éviter : fichier_2e_version_a_verifier.txt)\nne mettez ni espace ni caractères spéciaux (accents, symboles, …)\n\npour les dates, privilégiez le format AAAAMMJJ (année, mois, jour)\nmettez l’élément le plus important en premier (par exemple : projet_date_contenu)\n\noptez pour l’une de ces deux conventions d’écritre : camel case (MonProjet) ou snake case (mon_projet)\n\nUne fois que vous avez trouvé une façon de procéder, utlisez-la pour l’ensemble de vos fichiers afin de rester cohérent !"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#créer-une-arborescence",
    "href": "posts/02-premiers-pas-avec-r/index.html#créer-une-arborescence",
    "title": "Premiers pas avec R",
    "section": "Créer une arborescence",
    "text": "Créer une arborescence\nIl est toujours préférable de passer un peu de temps à bien organiser un projet lors de sa création, plutôt que de passer beaucoup de temps par la suite à déplacer des fichiers, les renommer, les rechercher, …\nPour créer un nouveau dossier dans votre projet, cliquez sur New Folder dans l’onglet Files du navigateur :\n\nL’organisation proposée ci-dessous est utilisable dans une très grande majorité de cas :\n\n\n\n\n\n\n\nraw\ndonnées brutes\n\n\ndata\ndonnéées issues de la manipulation/modification des données brutes\n\n\nscripts\ncode utilisé pour analyser les données, créer les graphiques, …\n\n\nresults\nfichiers de résultats obtenus durant l’analyse\n\n\nfigures\ngraphiques générés au cours de l’analyse\n\n\ndocs\nrapports, présentations de résultats, articles en lien avec l’analyse, documents concernant les outils utilisés, …"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#transformer-un-vecteur-en-un-facteur",
    "href": "posts/02-premiers-pas-avec-r/index.html#transformer-un-vecteur-en-un-facteur",
    "title": "Premiers pas avec R",
    "section": "Transformer un vecteur en un facteur",
    "text": "Transformer un vecteur en un facteur\nLa fonction summary(pingouins) est particulièrement intéressante pour avoir une vue d’ensemble de vos données.\n\nsummary(pingouins)\n\n\nLes informations affichées à l’aide de cette fonction dépendent du type de variable :\n\nnombre d’éléments, classe et mode pour les variables de type caractère\n\nstatistiques pour les variables de type numérique\n\nIl peut arriver que certaines variables soient mal catégorisées. Les deux cas de figure les plus répandus sont les suivants :\n\nles catégories d’une variable sont représentées par des valeurs numériques et R considère cette variable comme étant numérique (par exemple Echantillon Numero)\n\nles catégories d’une variable ne sont pas prises en compte et R considère cette variable comme étant simplement une chaîne de caractères (par exemple Espece et Ile) ou de valeurs numériques.\n\n\n\n\n\n\n\nVecteurs et facteurs\n\n\n\nOn désigne par vecteur un objet uni-dimensionnel contenant des éléments d’un seul type (caractères, valeurs numériques ou logiques). Un tableau est constitué de vecteurs situés dans les colonnes.\nUn facteur est un vecteur dont les éléments peuvent être regroupés en catégories (on parle de niveaux).\n\n\nSi vous ne connaissez pas dans le détail votre jeu de données, vous pouvez avoir une idée de sa structure sous-jacente en comptant le nombre d’éléments uniques des différentes variables à l’aide des fonctions unique() et length()\n\n# Extraire les elements uniques d'une variable\nunique(pingouins$Espece)\n\n# Compter le nombre d'elements uniques d'une variable\nlength(unique(pingouins$Espece))\n\nLa fonction unique() affiche les éléments uniques d’une variable par ordre d’apparition.\nLa fonction as.factor() permet de transformer un vecteur en facteur. Par défaut, les niveaux sont triés par ordre alphabétique. Si vous le souhaitez, vous pouvez préciser manuellement l’ordre souhaité pour ces niveaux à l’aide de l’argument levels.\n\n# Transformer un vecteur en facteur\npingouins$`Echantillon Numero` <- as.factor(pingouins$`Echantillon Numero`)\npingouins$Espece <- as.factor(pingouins$Espece)\npingouins$Ile <- as.factor(pingouins$Ile)\n\nVérifiez que les corrections apportées aient bien été appliquées au jeu de données :\n\nsummary(pingouins)\n\n\n\n\n\n\n\n\n\nBonne pratiques : structurer son script\n\n\n\nVotre script commence à être bien fourni. Vous pouvez le diviser en différentes parties pour simplifier la lecture. Pour cela, ajoutez des titres sous forme de commentaires et accolez des tirets (au moins quatre) pour signaler à R qu’il s’agit de divisions dans votre script.\n\nEn cliquant sur l’icône Menu à droite vous aurez accès à une table des matières dans laquelle vous pourrez naviguer en cliquant sur la partie qui vous intéresse.\n\n\n\n\n\n\n\n\n\n\nRaccourcis clavier : les sections d’un script\n\n\n\nPour afficher le sommaire de votre script, utilisez la combinaison Ctrl + Shift + O.\nVous pouvez également replier (Alt + O) ou déplier (Alt + Shift + O) les sections."
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#extraire-des-données",
    "href": "posts/02-premiers-pas-avec-r/index.html#extraire-des-données",
    "title": "Premiers pas avec R",
    "section": "Extraire des données",
    "text": "Extraire des données\nNotre jeu de données contient les mesures de différents paramètres pour trois espèces de pingouins. Nous aimerions séparer ce jeu de données en trois tableaux, un pour chacune des espèces.\n\n\n\n\n\n\nSélectionner des données\n\n\n\nDans R, la sélection de données, que ce soit une cellule, une ligne ou une colonne d’un tableau, ou encore un élément dans une chaîne, s’effectue à l’aide des crochets [].\n\nDans le cas d’un objet à deux dimensions, la sélection s’effectue en précisant deux paramètres séparés par une virgule : la ou les ligne(s) et la ou les colonne(s). Pour sélectionner l’ensemble d’une des deux dimensions, on utilise un espace vide d’un côté ou de l’autre de la virgule. Pour sélectionner plusieurs lignes ou colonnes, vous pouvez utiliser soit l’opérateur : si les lignes ou les colonnes se suivent, soit l’opérateur de concaténation c() (vous pouvez combiner les deux).\nPour un objet à une seule dimension, un seul paramètre est nécessaire (de la même façon, vous pouvez combiner les éléments avec les opérateurs : et c()) :\n\n\n# Selectionner la 3e ligne et la 5e colonne : \npingouins[3, 5]\n\n# Selectionner la 3e ligne : \npingouins[3, ]\n\n# Selectionner la 5e colonne : \npingouins[, 5]\n\n# Selectionner les lignes 40 à 45 : \npingouins[40:45, ]\n\n# Selectionner les colonnes 2 et 4 : \npingouins[, c(2, 4)]\n\n# Selectionner les lignes 50 et 100 à 105 : \npingouins[c(50, 100:105), ]\n  \n# Selectionner le 45e element de la variable Ile\npingouins$Ile[45]\n\n\n\n\nLes noms des espèces étant assez complexes, nous allons commencer par les extraire et les stocker dans un vecteur :\n\nespeces <- unique(pingouins$Espece)\n\n\nSéparons maintenant le tableau d’origine en trois tableaux. Pour l’espèce Adelie, nous extrayons les lignes du tableau pingouins dont la colonne Espece est égale au premier élément du vecteur especes, etc.\n\n\n\n\n\n\n\nLes opérateurs de comparaison\n\n\n\n\n\n\n==\négal\n\n\n!=\ndifférent\n\n\n<\ninférieur à\n\n\n<=\ninférieur ou égal à\n\n\n>\nsupérieur à\n\n\n>=\nsupérieur ou égal à\n\n\n==\négal\n\n\n\n\n\n\n\nadelie <- pingouins[pingouins$Espece == especes[1], ]\ngentoo <- pingouins[pingouins$Espece == especes[2], ]\nchinstrap <- pingouins[pingouins$Espece == especes[3], ]\n\n\nCréons maintenant un vecteur contenant le nombre d’observations pour chaque tableau, à l’aide de la fonction nrow() (permet de compter le nombre de ligne d’un tableau) :\n\nnb_ind <- c(nrow(adelie), nrow(gentoo), nrow(chinstrap))\n\n\nAjoutons à ce vecteur des étiquettes avec les noms des trois espèces :\n\nnames(nb_ind) <- especes\nnb_ind\n\n      Adelie Penguin (Pygoscelis adeliae) \n                                      152 \n        Gentoo penguin (Pygoscelis papua) \n                                      124 \nChinstrap penguin (Pygoscelis antarctica) \n                                       68 \n\n\n\n\n\n\n\n\n\n\nLa fonction table()\n\n\n\nVous obtiendrez la même chose à l’aide de la commande table(pingouins$Espece) (seul l’ordre des espèces varie)"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#diagramme-en-barres-barplot",
    "href": "posts/02-premiers-pas-avec-r/index.html#diagramme-en-barres-barplot",
    "title": "Premiers pas avec R",
    "section": "Diagramme en barres (barplot)",
    "text": "Diagramme en barres (barplot)\nNous pouvons représenter visuellement le nombre de pingouins par espèce à l’aide de la fonction barplot(). Le graphique s’affichera dans le panneau inférieur droit de RStudio.\n\nbarplot(nb_ind)\n\n\n\n\nVous pouvez voir que plusieurs points peuvent être améliorés :\n\najuster l’axe des ordonnées pour inclure la valeur maximale\n\najuster la taille des étiquettes de l’axe de abscisses pour que les trois noms d’espèces soient lisibles\n\najouter un titre à l’axe des ordonnées et au graphique\n\nmodifier la couleur des barres\n\nPour trouver comment modifier ces différents paramètres, vous pouvez utiliser l’aide de la fonction (?barplot) ou l’aide plus générales pour les graphiques (?par).\nPour rendre la graphique plus lisible, nous aimerions que le nom des espèces soit situé sur deux lignes. Nous allons pour cela modifier les noms de notre vecteur nb_ind à l’aide de la fonction gsub(). Cette fonction permet de remplacer un motif par au autre dans une chaîne et s’utilise de la façon suivante : gsub(motif a remplacer, motif de remplacer, objet a modifier) :\n\nnames(nb_ind) <- gsub(\"(\", \"\\n(\", names(nb_ind), fixed = TRUE)\n\nNous allons utiliser les paramètres suivants :\n\nmain pour ajouter un titre au graphique\n\nylab pour ajouter un titre à l’axe des ordonnées\n\nylim pour ajuster l’axe des ordonnées\n\ncex pour modifier la taille du texte\n\ncol pour modifier la couleur des barres\n\n\nbarplot(nb_ind,\n        main = \"Trois especes de pingouins vivant en Antarctique\",\n        ylab = \"Nombre d'individus par espece\",\n        ylim = c(0, 200),\n        col = \"blue\")"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#histogramme",
    "href": "posts/02-premiers-pas-avec-r/index.html#histogramme",
    "title": "Premiers pas avec R",
    "section": "Histogramme",
    "text": "Histogramme\nEtudions maintenant la distribution de la variable Longueur des ailes à l’aide d’un histogramme :\n\nhist(pingouins$`Longueur Aile (mm)`,\n     main = \"Distribution de la longueur des ailes\",\n     xlab = \"Longueur des ailes (en mm)\",\n     ylab = \"Frequence\",\n     col = \"orange\")\n\n\n\n\nIl semble y avoir deux groupes, vérifions cela à l’aide d’un autre type de graphique."
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#boxplot",
    "href": "posts/02-premiers-pas-avec-r/index.html#boxplot",
    "title": "Premiers pas avec R",
    "section": "Boxplot",
    "text": "Boxplot\nLes graphiques dits en “boîtes à moustaches” donnent une bonne indication de la manière dont se distribue une variable numérique : médiane, quartiles, valeurs aberrantes, …\n\nboxplot(pingouins$`Longueur Aile (mm)` ~ pingouins$Espece)"
  },
  {
    "objectID": "posts/02-premiers-pas-avec-r/index.html#scatter-plot",
    "href": "posts/02-premiers-pas-avec-r/index.html#scatter-plot",
    "title": "Premiers pas avec R",
    "section": "Scatter plot",
    "text": "Scatter plot\nRegardons maintenant la relation entre la longueur du bec et la longueur des ailes\n\npingouins$col[pingouins$Espece == especes[1]] <- \"blue\"\npingouins$col[pingouins$Espece == especes[2]] <- \"red\"\npingouins$col[pingouins$Espece == especes[3]] <- \"green\"\n\nplot(pingouins$`Longueur Aile (mm)`, pingouins$`Longueur Bec (mm)`,\n     col = pingouins$col)\nlegend(x = 200, y = 45, legend = c(especes[1], especes[2], especes[3]),\n       fill = c(\"blue\", \"red\", \"green\"), cex = 0.75)"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html",
    "href": "posts/03-introduction-tidyverse/index.html",
    "title": "Introduction au Tidyverse",
    "section": "",
    "text": "Ce tutoriel est adapté de Basic data manipulation et Efficient data manipulation du site Our Coding Club."
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#quest-ce-que-le-tidyverse",
    "href": "posts/03-introduction-tidyverse/index.html#quest-ce-que-le-tidyverse",
    "title": "Introduction au Tidyverse",
    "section": "Qu’est-ce que le Tidyverse ?",
    "text": "Qu’est-ce que le Tidyverse ?\n\n\n\nAllison Horst\n\n\nLe Tidyverse est un ensemble de packages permettant :\n\nd’importer et d’exporter des données (package readr)\n\nde manipuler des données (package dplyr)\n\nde mettre en forme des données (package tidyr)\n\nde créer des graphiques (package ggplot2)\n\nde manipuler des chaînes (package stringr)\n\nde manipuler des facteurs (package forcats)\n\nde manipuler des dates (package lubridate)\n\n\n\n\n\n\n\nLes packages\n\n\n\nUn package R contient permet d’apporter des fonctionnalités supplémentaires. Il existe des packages pour tout un tas d’applications."
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#organiser-son-travail",
    "href": "posts/03-introduction-tidyverse/index.html#organiser-son-travail",
    "title": "Introduction au Tidyverse",
    "section": "Organiser son travail",
    "text": "Organiser son travail\n\nCréez un nouveau projet\nCréez l’arborescence\nOuvrez un nouveau script et remplissez l’en-tête (voir ci-dessous)"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#installer-et-charger-le-tidyverse",
    "href": "posts/03-introduction-tidyverse/index.html#installer-et-charger-le-tidyverse",
    "title": "Introduction au Tidyverse",
    "section": "Installer et charger le Tidyverse",
    "text": "Installer et charger le Tidyverse\nLa fonction install.packages() permet de télécharger un package. Une fois téléchargé, il vous faudra charger le package dans votre session (pour rendre ses fonctions disponibles) à l’aide de la fonction library() :\n\n# Telecharger le Tidyverse\ninstall.packages(\"tidyverse\")\n\n# Charger le package\nlibrary(tidyverse)\n\n\n\n\n\n\n\nAttention aux guillemets\n\n\n\nVous remarquerez la présence de guillemets dans l’appel à la fonction install.packages() et leur absence dans l’appel à la fonction library().\n\n\nVous pourriez également n’installer et ne charger que les packages qui vous intéressent (par exemple readr et dplyr), plutôt que la suite complète."
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#importer-les-données",
    "href": "posts/03-introduction-tidyverse/index.html#importer-les-données",
    "title": "Introduction au Tidyverse",
    "section": "Importer les données",
    "text": "Importer les données\nLes fonctions proposées dans les différents packages de la suite Tidyverse sont - en règle générale - nommées d’après les actions qu’elles accomplissent, ce qui rend leur mémorisation plus simple et leur utilisation plus intuitive.\nNous allons utiliser le même jeu de données que dans le tutoriel Premiers pas avec R.\n\nSi vous aviez téléchargé ces données précédemment, copiez-les dans le dossier raw() et importez-les :\n\n\npingouins <- read_csv(\"raw/pingouins.csv\")\n\n\nVous pouvez également télécharger directement les données depuis leur emplacement en ligne :\n\n\npingouins <- read_csv(\"https://raw.githubusercontent.com/codons-blog/C-02-ManipulationDonnees/main/pingouins.csv\")\n\n\n\n\n\n\n\nBonne pratique : package + fonction\n\n\n\nDans le tutoriel Premiers pas avec R nous avions utilisé la fonction read.csv() pour importer les données, alors qu’ici nous utilisons la fonction read_csv(). Ces deux fonctions effectuent la même opération mais font partie de deux packages différents : le package {utils} pour read.csv() et le package {readr} pour read_csv. Si votre script est amené à être partagé, il est utile de préciser à quels packages vous faites appel, en utilisant la syntaxe nom-du-package::nom-de-la-fonction(). Dans notre exemple, il faudrait écrire readr::read_csv().\n\n\nIl est toujours utile de visualiser vos données et leur structure :\n\n# Exploration rapide des donnees ----\n\nhead(croissance)  # affiche les premieres lignes\nstr(croissance)  # types des variables\nunique(croissance$Zone)  # affiche les valeurs distinctes de la variable Zone\ncroissance$Indiv  # affiche toutes les valeurs de la variable Indiv\nlength(unique(croissance$Indiv))  # affiche le nombre d'individus\n\n\nLorsque vous exécutez la commande head(croissance), vous pouvez remarquer dans la console la mention “A tibble”. Un tibble est un format particulier de tableau utilisé dans le Tidyverse. Il présente notamment l’avantage d’afficher les types de variables sous les noms de colonnes."
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#rename",
    "href": "posts/03-introduction-tidyverse/index.html#rename",
    "title": "Introduction au Tidyverse",
    "section": "Renommer des variables avec rename()",
    "text": "Renommer des variables avec rename()\nCette fonction s’utilise de la façon suivante : rename(objet, nouveau_nom = ancien_nom).\n\n# Supprimer les majuscules dans les noms de colonnes\ncroissance <- rename(croissance,\n                      zone = Zone,\n                      indiv = Indiv)\n\n Avant d’aller plus loin, nous allons voir une fonctionnalité extrêmement pratique : le “pipe”. Un pipe permet d’enchaîner les opérations, et présente plusieurs avantages, notamment de rendre le code plus clair et lisible et de rendre possible l’auto-complétion (à l’aide de la touche Tab).\nLe pipe fait partie du package magrittr, inclus dans le Tidyverse.\nUn pipe se place à la fin d’un ligne sous la forme %>% :\n\nRaccourci clavier : Ctrl + Shift + M\n\n\ncroissance <- croissance %>% \n  rename(zone = Zone,\n         indiv = Indiv)"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#select",
    "href": "posts/03-introduction-tidyverse/index.html#select",
    "title": "Introduction au Tidyverse",
    "section": "Sélectionner des colonnes avec select()",
    "text": "Sélectionner des colonnes avec select()\nCette fonction permet de sélectionner des colonnes, en précisant lesquelles conserver ou supprimer :\n\n# Conserver des colonnes\n\ncroissance_selection <- croissance %>% \n  select(indiv, `2007`:`2012`)\n\n# Supprimer une colonne\n\ncroissance_selection <- croissance %>% \n  select(-zone)\n\n\nLa fonction select() permet également de renommer des colonnes et d’en modifier l’ordre :\n\n# Renommer et modifier l'ordre de colonnes\n\ncroissance_selection <- croissance %>% \n  select(zone = Zone, indiv = Indiv, `2007`:`2012`)\n\n\nL’opérateur : permet de construire une séquence : dans le cas présent il permet de sélectionner toutes les colonnes entre 2007 et 2012.\nSi vous souhaitez renommer ou déplacer seulement quelques colonnes, la fonction everything() vous permet de sélectionner toutes les colonnes restantes :\n\ncroissance_selection <- croissance %>% \n  select(zone = Zone, indiv = Indiv, everything())"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#filter",
    "href": "posts/03-introduction-tidyverse/index.html#filter",
    "title": "Introduction au Tidyverse",
    "section": "Filtrer des données avec filter()",
    "text": "Filtrer des données avec filter()\nCette fonction permet de sélectionner des lignes à l’aide d’opérateurs logiques :\n\n\n\nOpérateur\nExpression logique\n\n\n\n\n==\nstrictement égal à\n\n\n<=\ninférieur ou égal à\n\n\n<\ninférieur à\n\n\n>=\nsupérieur ou égal à\n\n\n>\nsupérieur à\n\n\n!=\ndifférent de\n\n\n%in%\nappartient à\n\n\n&\net\n\n\n|\nou\n\n\n!\npas\n\n\n\nVoyons comment utiliser ces opérateurs logiques :\n\n# individu n°603\n\ncroissance %>% filter(indiv == 603)\n\n# zones 2, 3 et 4\n\ncroissance %>% filter(zone <= 4)\ncroissance %>% filter(zone %in% c(2, 3, 4))\ncroissance %>% filter(zone %in% 2:4)\ncroissance %>% filter(!zone >= 5)\n\n# zones 2 et 7\n\ncroissance %>% filter(zone == 2 | zone == 7)\ncroissance %>% filter(zone %in% c(2, 7))\n\n# zone 2 + individus entre 300 et 400\n\ncroissance %>% filter(zone == 2 & indiv %in% 300:400)\ncroissance %>% filter(zone == 2 & between(indiv, 300, 400))\n\n\nIl existe différentes façons de construire une séquence :\n\nseq(from = 300, to = 400, by = 10)  # de 300 a 400 avec un increment de 10\nrep(x = c(300, 350), times = 2)  # 2 repetitions du vecteur \"300, 350\"\nrep(x = c(300, 350), each = 2)  # chaque element du vecteur \"300, 350\" est repete 2 fois\nrep(seq(from = 300, to = 400, by = 10), times = 4)  # combinaison des deux"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#arrange",
    "href": "posts/03-introduction-tidyverse/index.html#arrange",
    "title": "Introduction au Tidyverse",
    "section": "Trier des données avec arrange()",
    "text": "Trier des données avec arrange()\nLa fonction arrange() permet de trier des valeurs par ordre croissant ou décroissant :\n\n# Trier par ordre croissant sur l'annee 2007\n\ncroissance %>% arrange(`2007`)\n\n# Trier par ordre decroissant sur l'annee 2008\n\ncroissance %>% arrange(desc(`2008`))"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#mutate",
    "href": "posts/03-introduction-tidyverse/index.html#mutate",
    "title": "Introduction au Tidyverse",
    "section": "Créer de nouvelles colonnes avec mutate()",
    "text": "Créer de nouvelles colonnes avec mutate()\nLa fonction mutate() permet de créer un nouvelle colonne :\n\n# Calculer la croissance totale pour chaque individu entre 2007 et 2012\n\ncroissance_totale <- croissance %>% \n  mutate(croissance.totale = `2007` + `2008` + `2009` + `2010` + `2011` + `2012`)"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#groupby",
    "href": "posts/03-introduction-tidyverse/index.html#groupby",
    "title": "Introduction au Tidyverse",
    "section": "Définir des groupes avec group_by()",
    "text": "Définir des groupes avec group_by()\nCette fonction permet de créer une structure interne à vos données, par exemple des individus regroupés par zone. Les fonctions exécutées après l’appel à la fonction group_by() tiendront compte de cette structure interne. L’utilisation de la fonction group_by() associée à d’autres fonctions est très utile pour calculer des statistiques pour différents sites, traitements, espèces, …\n\n# Grouper les individus par zone\n\ncroissance_groupes <- croissance %>% \n  group_by(zone)\n\n\nComparez les deux objets croissance et croissance_groupes. La seule différence visible est la mention Groups quand vous affichez l’objet possédant une structure interne. Pour l’instant, les groupes créés par group_by() sont sous-jacents, et leur intérêt sera évident en appliquant d’autres fonctions à ces groupes."
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#summarise",
    "href": "posts/03-introduction-tidyverse/index.html#summarise",
    "title": "Introduction au Tidyverse",
    "section": "Agréger des lignes et calculer des statistiques avec summarise()",
    "text": "Agréger des lignes et calculer des statistiques avec summarise()\nCette fonction permet d’agréger des lignes en appliquant une fonction sur une ou plusieurs colonnes :\n\n# Croissance totale pour l'ensemble des individus pour l'annee 2007\n\nsynthese1 <- croissance %>% \n  summarise(croissance.totale.2007 = sum(`2007`))\n\n# Croissance totale pour l'ensemble des individus groupes par zone pour l'annee 2007\n\nsynthese2 <- croissance_groupes %>% \n  summarise(croissance.totale.2007 = sum(`2007`))\n\n\nLe premier objet, synthese1, correspond à la somme de toutes les valeurs de croissance pour tous les individus en 2007. Le second objet, synthese2, correspond à la somme des valeurs de croissance pour les individus regroupés par zone en 2007.\n\nLes données étant agrégées, le tableau de sortie sera plus court que les données d’origine.\n\nVous pouvez de cette façon calculer plusieurs paramètres :\n\nsynthese3 <- croissance_groupes %>% \n  summarise(croissance.totale.2007 = sum(`2007`),\n            croissance.moyenne.2007 = mean(`2007`),\n            croissance.ecart.type.2007 = sd(`2007`))"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#join",
    "href": "posts/03-introduction-tidyverse/index.html#join",
    "title": "Introduction au Tidyverse",
    "section": "Joindre des données avec ..._join()",
    "text": "Joindre des données avec ..._join()\nIl peut arriver que des données concernant un même projet se trouvent dans plusieurs fichiers (par exemple un fichier avec des mesures sur différents sites, et un autre fichier avec des données climatiques pour ces différents sites).\n\nLes différentes fonctions ..._join() permettent de joindre plusieux jeux de données selon ce qu’on souhaite faire des données qui ne sont pas partagées. Les lignes d’un tableau seront associées à l’autre tableau selon les valeurs d’une ou de plusieurs colonnes partagées (les clés)."
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#format-long-avec-pivot_longer",
    "href": "posts/03-introduction-tidyverse/index.html#format-long-avec-pivot_longer",
    "title": "Introduction au Tidyverse",
    "section": "Format long avec pivot_longer()",
    "text": "Format long avec pivot_longer()\nLa fonction pivot_longer() permet de passer d’un format large à un format long. La syntaxe est un peu plus complexe que les fonctions que nous avons vues jusqu’à présent, car il nous préciser quelles colonnes vont être regroupées :"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#format-large-avec-pivot_wider",
    "href": "posts/03-introduction-tidyverse/index.html#format-large-avec-pivot_wider",
    "title": "Introduction au Tidyverse",
    "section": "Format large avec pivot_wider()",
    "text": "Format large avec pivot_wider()\nCette fonction permet d’effectuer l’opération inverse :"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#résumé",
    "href": "posts/03-introduction-tidyverse/index.html#résumé",
    "title": "Introduction au Tidyverse",
    "section": "Résumé",
    "text": "Résumé\nNous avons vu les principales fonctions des packages dplyr et tidyr une par une. Nous allons maintenant enchaîner les différentes opérations depuis le début à l’aide d’un pipe et visualiser l’effet des différents traitements sur la croissance des tiges d’Empetrum :\n\n# Importer les deux fichiers\n\ncroissance <- read_csv(\"https://raw.githubusercontent.com/codons-blog/C-02-ManipulationDonnees/main/croissance.csv\")\ntraitements <- read_csv2(\"https://raw.githubusercontent.com/codons-blog/C-02-ManipulationDonnees/main/traitements.csv\")\n\n# Mettre en forme et joindre les deux fichiers\n\nexpe <- croissance %>% \n  pivot_longer(cols = `2007`:`2012`,\n               names_to = \"annee\",\n               values_to = \"croissance\") %>% \n  left_join(traitements) %>% \n  rename(zone = Zone,\n         indiv = Indiv,\n         traitement = Traitement) %>% \n  mutate(zone = as.factor(zone),\n         indiv = as.factor(indiv),\n         annee = as.numeric(annee),\n         traitement = as.factor(traitement))\n\n# Boxplot de l'effet des traitements sur la croissance\n\nboxplot(croissance ~ traitement, \n        data = expe,\n        main = \"Effet de la température (T) et de la fertilisation (F) sur la croissance d'Empetrum\",\n        xlab = \"Traitement\",\n        ylab = \"Croissance des tiges (cm)\")"
  },
  {
    "objectID": "posts/03-introduction-tidyverse/index.html#bilan-du-tutoriel",
    "href": "posts/03-introduction-tidyverse/index.html#bilan-du-tutoriel",
    "title": "Introduction au Tidyverse",
    "section": "Bilan du tutoriel :",
    "text": "Bilan du tutoriel :\n\nVous savez utiliser les fonctions de dplyr pour manipuler vos données\n\nVous savez mettre en forme des données qui respectent les critères des tidy data avec tidyr"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html",
    "href": "posts/04-rmarkdown/index.html",
    "title": "Introduction à RMarkdown",
    "section": "",
    "text": "Ce tutoriel est adapté de Getting started with R Markdown du site Our Coding Club."
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#quest-ce-que-r-markdown",
    "href": "posts/04-rmarkdown/index.html#quest-ce-que-r-markdown",
    "title": "Introduction à RMarkdown",
    "section": "Qu’est-ce que R Markdown ?",
    "text": "Qu’est-ce que R Markdown ?"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#organiser-son-travail",
    "href": "posts/04-rmarkdown/index.html#organiser-son-travail",
    "title": "Introduction à RMarkdown",
    "section": "Organiser son travail",
    "text": "Organiser son travail\nSi vous n’avez pas suivi les autres tutoriels, suivez les instructions suivantes :\n\nCréez un nouveau projet\nCréez une arborescence"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#installer-et-charger-rmarkdown",
    "href": "posts/04-rmarkdown/index.html#installer-et-charger-rmarkdown",
    "title": "Introduction à RMarkdown",
    "section": "Installer et charger RMarkdown",
    "text": "Installer et charger RMarkdown\nPour utiliser RMarkdown dans RStudio, installez et chargez le package rmarkdown :\n\ninstall.packages(\"rmarkdown\")\nlibrary(rmarkdown)"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#ouvrir-un-nouveau-fichier-r-markdown",
    "href": "posts/04-rmarkdown/index.html#ouvrir-un-nouveau-fichier-r-markdown",
    "title": "Introduction à RMarkdown",
    "section": "Ouvrir un nouveau fichier R Markdown",
    "text": "Ouvrir un nouveau fichier R Markdown\nPour créer un nouveau document R Markdown (.RMd), cliquez sur *File > New File > R Markdown …“. Vous pouvez également cliquer sur le symbole* Plus* et choisir *R Markdown…”\n[]\nDans la fenêtre qui s’ouvre, laissez les paramètres par défaut et cliquez sur Create Empty Document (en cliquant sur OK vous créerez un document pré-rempli).\n[]\nVotre document vide s’ouvre dans la fenêtre en haut à gauche de RStudio.\n[]"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#ajouter-un-en-tête",
    "href": "posts/04-rmarkdown/index.html#ajouter-un-en-tête",
    "title": "Introduction à RMarkdown",
    "section": "Ajouter un en-tête",
    "text": "Ajouter un en-tête\nUn document Rmd débute toujours par une section d’en-tête encadrée par trois tirets. Par défaut, cet en-tête contient le titre, l’auteur, la date et le format de fichier en sortie. Il existe beaucoup d’autres paramètres pour modifier et personnaliser votre document.\nVoici un exemple d’en-tête à insérer en haut de votre ficher .Rmd :\n\n---\ntitle: \"Pingouins de l'archipel Palmer\"\nauthor: Jonathan Kitt\ndate: 2022-11-14\noutput: html_document\n---\n\n\n\n\n\n\n\nLe YAML\n\n\n\nCet en-tête s’appelle un YAML : Yet Another Markup Language\n\n\nSauvegardez votre fichier Rmd en cliquant sur l’icône disquette (ou en utilisant la combinaison Ctrl + S). Choisissez un nom pour votre fichier et placez-le dans votre dossier docs.\n[]\n[]"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#compiler-un-document-r-markdown",
    "href": "posts/04-rmarkdown/index.html#compiler-un-document-r-markdown",
    "title": "Introduction à RMarkdown",
    "section": "Compiler un document R Markdown",
    "text": "Compiler un document R Markdown\nPour compiler votre fichier Rmd et générer le document au format choisi (html dans notre cas), cliquez sur le bouton Knit\nLe document s’ouvre dans une nouvelle fenêtre.\n[]\n\n\n\n\n\n\nRaccourci clavier : compiler un fichier Rmd\n\n\n\nPour compiler un fichier Rmd, utilisez la combinaison Ctrl + Shift + K\n\n\nDans l’explorateur de fichiers vous pouvez remarquer qu’un fichier mesures_pingouins.html a été ajouté dans le répertoire docs : il s’agit du fichier hmtl issu de la compilation du fichier Rmd. En cliquant sur le nom de ce fichier vous aurez le choix entre l’ouvrir dans l’éditeur ou dans un navigateur internet.\n[]\n\n\n\n\n\n\nPrévisualiser le document\n\n\n\nPar défaut, lorsque vous compilez un fichier Rmd, le document généré s’ouvre dans une nouvelle fenêtre. Vous pouvez choisir d’afficher cette pré-visualisation directement dans l’onglet Viewer en bas à droite de RStudio en cliquant sur la roue à droite du bouton Knit puis sur Preview in Viewer Pane.\n[]\n[]"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#insérer-des-titres",
    "href": "posts/04-rmarkdown/index.html#insérer-des-titres",
    "title": "Introduction à RMarkdown",
    "section": "Insérer des titres",
    "text": "Insérer des titres\nPour insérer un titre, utilisez un #. Vous pouvez utiliser différents niveaux en ajoutant des # :\n\n# Niveau 1\n## Niveau 2\n### Niveau 3\n\n[]"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#mettre-en-forme-le-texte",
    "href": "posts/04-rmarkdown/index.html#mettre-en-forme-le-texte",
    "title": "Introduction à RMarkdown",
    "section": "Mettre en forme le texte",
    "text": "Mettre en forme le texte\nPour mettre en forme votre texte, utilisez les conventions suivantes :\n\n*Texte en italiques*  \n**Texte en gras**\n***Texte en italiques et en gras***\n~~Texte barré~~\n\n[]"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#insérer-des-listes",
    "href": "posts/04-rmarkdown/index.html#insérer-des-listes",
    "title": "Introduction à RMarkdown",
    "section": "Insérer des listes",
    "text": "Insérer des listes\nVous pouvez insérer une liste à puces :\n\n* item 1  \n* item 2    \n* item 3\n  + item 3a  \n  + item 3b  \n\n[]\nOu une liste numérotée :\n\n1. item 1  \n2. item 2    \n3. item 3 \n\n[]"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#insérer-un-tableau",
    "href": "posts/04-rmarkdown/index.html#insérer-un-tableau",
    "title": "Introduction à RMarkdown",
    "section": "Insérer un tableau",
    "text": "Insérer un tableau\nVous pouvez insérer un tableau en le “dessinant” : - des tirets - pour déparer l’en-tête du reste du tableau\n- des barres verticales | pour délimiter les colonnes\n\n\n\n\ncol 1\ncol 2\ncol 3\n\n\n\n\nA\n1\nech1\n\n\nB\n2\nech2\n\n\nC\n3\nech3\n\n\n\nPour aligner le texte, utilisez deux points : :\n\n\n\n\ngauche\ndroite\ncentre\n\n\n\n\nA\n1\nech1\n\n\nB\n2\nech2\n\n\nC\n3\nech3"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#insérer-une-citation",
    "href": "posts/04-rmarkdown/index.html#insérer-une-citation",
    "title": "Introduction à RMarkdown",
    "section": "Insérer une citation",
    "text": "Insérer une citation\nVous pouvez insérer une citation :\n\nComme l'a dit ...  \n\n> Ceci est une citation\n\n[]"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#notation-mathématique",
    "href": "posts/04-rmarkdown/index.html#notation-mathématique",
    "title": "Introduction à RMarkdown",
    "section": "Notation mathématique",
    "text": "Notation mathématique\nVous pouvez insérer du texte en exposant ou en indice :\n\ntexte en ^exposant^ ou texte en ~indice~.\n\n[]"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#equation-mathématique",
    "href": "posts/04-rmarkdown/index.html#equation-mathématique",
    "title": "Introduction à RMarkdown",
    "section": "Equation mathématique",
    "text": "Equation mathématique\nLa syntaxe pour insérer une équation mathématique se base sur la syntaxe LaTeX :\nLa formule pour calculer l’aire \\(A\\) d’un cercle de rayon \\(r\\) est :\n\\[A = \\pi \\times r^{2}\\]\n\n\n\n[]"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#insérer-une-image",
    "href": "posts/04-rmarkdown/index.html#insérer-une-image",
    "title": "Introduction à RMarkdown",
    "section": "Insérer une image",
    "text": "Insérer une image\nVous pouvez insérer une image dans votre fichier :\n\n\n\n\n\n\nChemins vers les fichiers\n\n\n\nLorsque que vous indiquez un chemin vers un fichier dans RMarkdown, le dossier “racine” n’est plus votre répertoire de travail (votre projet) mais le dossier dans lequel se trouve le fichier .Rmd, dans le cas présent le répertoire docs/ situé lui-même dans le répertoire de travail. Il faut donc revenir en arrière d’un niveau, ce qui s’effectue à l’aide de l’opérateur ../. Lorsque vous naviguez dans une arborescence à l’aide de la ligne de commande, . indique le répertoire de travail et .. le répertoire situé un niveau au-dessus dans votre arborescence.\n\n\n\n![](../raw/lter_penguins.png){width=\"100%\"}"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#insérer-un-bloc-de-code-r",
    "href": "posts/04-rmarkdown/index.html#insérer-un-bloc-de-code-r",
    "title": "Introduction à RMarkdown",
    "section": "Insérer un bloc de code R",
    "text": "Insérer un bloc de code R\nCommençons par importer notre jeu de données à l’aide d’une ligne de code insérée dans un bloc de code. Dans RMarkdown, un bloc de code est encadré par trois ```. Sur la première ligne on indique entre accolades qu’il s’agit de code R :\n\n\n\n\n\n\n\nRaccourci clavier : insérer un bloc de code\n\n\n\nPour insérer un bloc de code, utiliser la combinaison Ctrl + Alt + I\n\n\nAjoutons la ligne de code permettant d’importer le jeu de données (attention au chemin !)\n\nVous pouvez exécuter ce code comme vous le feriez dans un script classique en cliquant sur la flèche verte à droite du code (ou en vous plaçant sur la ligne et en utilisant la combinaison Ctrl + Entrée). Le fichier a bien été importé et stocké dans l’objet pingouins visible dans l’environnement.\n\nLorsque vous compilez votre fichier Rmd, le code est exécuté et s’affiche dans le document :\n\n\n\n\n\n\n\nBloc de code : les options\n\n\n\nLorsque vous insérez un bloc de code, des paramètres vous permettent de préciser si le code doit être affiché ou non, exécuté ou non, … Ces options sont à placer dans les accolades : {r param=TRUE} par exemple.\n\n\n\necho\nafficher le code dans le document\n\n\neval\nexécuter le code\n\n\nerror\nafficher les messages d’erreur\n\n\nwarning\nafficher les messages d’avertissement"
  },
  {
    "objectID": "posts/04-rmarkdown/index.html#insérer-du-code-dans-le-texte",
    "href": "posts/04-rmarkdown/index.html#insérer-du-code-dans-le-texte",
    "title": "Introduction à RMarkdown",
    "section": "Insérer du code dans le texte",
    "text": "Insérer du code dans le texte\nVous pouvez insérer du texte au format code en l’encadrant par des `` :\nInsérer du code `ici`. Insérer du code ici.\nVous pouvez également exécuter le code dans le texte en ajoutant un r :\n\nLe résultat de l’opération 2 + 2 est 4"
  },
  {
    "objectID": "posts/05-git/index.html",
    "href": "posts/05-git/index.html",
    "title": "Introduction à git",
    "section": "",
    "text": "Ce tutoriel est adapté de Basic data manipulation et Efficient data manipulation du site Our Coding Club."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  }
]