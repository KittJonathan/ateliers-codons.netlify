---
title: "Introduction à ggplot2"
subtitle: "Créer des graphiques à l'aide du package {ggplot2}"
author:
  - Jonathan Kitt
date: "2022-12-12"
draft: true
categories: [R, RStudio, Graphiques, ggplot2]
format: 
  html: 
    toc: true
    toc-depth: 2
    toc-title: "Sommaire"
---

# Introduction

<br>

## La grammaire des graphiques

<br>

Le package [`{ggplot2}`](https://ggplot2.tidyverse.org/) (qui fait partie du [Tidyverse](https://www.tidyverse.org/)) repose sur le principe de la **grammaire des graphiques** : un graphique se construit couche par couche.

![](img/ggplot-grammar-of-graphics.png){width="50%"}

<br>

## Pré-requis

<br>

Si vous n'avez pas suivi les autres tutoriels, vous pouvez [créer un projet RStudio](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/#créer-un-projet) et [une arborescence](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/#créer-une-arborescence).

Commencez par installer le package `{ggplot2}`. Vous pouvez également installer et charger le `{tidyverse}` (préférez cette solution si vous comptez manipuler les données avant de créer les graphiques).

```{r install and load, eval=FALSE}
# Installer et charger le package {ggplot2}
install.packages("ggplot2")
library(ggplot2)

# Installer et charger la suite {tidyverse}
install.packages("tidyverse")
library(tidyverse)
```

```{r load tidyverse, echo=FALSE, eval=TRUE, warning=FALSE, message=FALSE}
library(tidyverse)
```

<br>

## Le jeu de données

<br>

Nous allons utiliser le jeu de données tiré du package [`{Palmer penguins}`](https://allisonhorst.github.io/palmerpenguins/).  

Pour importer ce jeu de données, utilisez la commande suivante : 

```{r import data, message=FALSE, warning=FALSE}
pingouins <- readr::read_csv("https://raw.githubusercontent.com/codons-blog/ateliers_codons/main/data/pingouins_propre.csv")
```

Explorons rapidement ces données : 

```{r EDA, eval=FALSE}
dplyr::glimpse(pingouins)
```

<br>

# Graphiques simples

<br>

## Nuage de points 

<br>

Un `{ggplot2}` nécessite au minimum les trois éléments suivants :   

- les données utilisées (**data**)  

- l'apparence esthétique des éléments du graphique, comme la position, la couleur, la taille, la forme, et la transparence (**aesthetics**)  

- les formes utilisées pour représenter les données (**geometries**)

Ces trois éléments suffisent pour créer un graphique simple. Il existe beaucoup d'autres éléments permettant la personnalisation du graphique.

<br>

Créons un nuage de points représentant la longueur du bec en fonction de la longueur des ailes.

```{r basic plot 01}
ggplot(data = pingouins)
```

Cette commande permet d'initialiser notre graphique. Seul l'arrière-plan gris est visible pour le moment.

Ajoutons les deux variables que nous souhaitons représenter : 

```{r basic plot 02}
ggplot(data = pingouins,
       mapping = aes(x = longueur_aile_mm, y = longueur_bec_mm))
```

Les deux variables ont été ajoutées, et les échelles des deux axes ont été automatiquement calculées.

::: {.callout-note icon="true"}

## mapping = aes() ou aes()

L'argument `mapping =` n'est pas indispensable, le code suivant fonctionnera de la même façon : 
```{r aes, eval=FALSE}
ggplot(data = pingouins,
       aes(x = longueur_aile_mm, y = longueur_bec_mm))
```

:::

Pour finir, nous allons préciser que nous souhaitons représenter la relation entre ces deux variables à l'aide d'un nuage de points : 

```{r basic plot 03}
ggplot(data = pingouins,
       aes(x = longueur_aile_mm, y = longueur_bec_mm)) +
  geom_point()
```

Un graphique `{ggplot2}` peut être stocké dans un objet. Cela permet de définir le graphique basique puis d'y apporter des modifications.

```{r save to variable}
g <- ggplot(data = pingouins,
       aes(x = longueur_aile_mm, y = longueur_bec_mm))
```


::: {.callout-caution icon="true"}

## Le `+`

Lorsque vous créez un graphique avec `{ggplot2}`, l'ajout d'une nouvelle couche s'effectue à l'aide d'un `+` à la fin de la ligne.

:::

<br>

### Ajouter des couleurs

<br>

Le nuage de points ci-dessus représente la relation entre deux variables, mais ne nous donne aucune indication sur l'identité de chaque point. Nous aimerions colorer chaque point en fonction de l'espèce de l'individu.

Il existe deux façons d'ajouter de la couleur à un graphique `{ggplot2}` : 

- colorer l'ensemble des éléments (points, lignes, ...) avec une même couleur  

- colorer chaque élément en fonction d'une autre variable (ici l'espèce)  

<br>

Pour colorer l'ensemble des points, nous ajoutons un argument `color` (`colour` et `col` fonctionnent également) en dehors des parenthèses définissant l'esthétique du graphique : 

```{r basic plot 04}
g +
  geom_point(col = "darkblue")
```

L'argument `alpha` permet de définir la transparence des points. Il prend une valeur numérique entre 0 (transparent) et 1 (opaque) : 

```{r basic plot 05}
g +
  geom_point(col = "darkblue", alpha = 0.5)
```

::: {.callout-tip icon="true"}

## Les couleurs

Vous pouvez utiliser des couleurs prédéfinies (voir la liste [ici](www.stat.columbia.edu/~tzheng/files/Rcolor.pdf)).  

Vous pouvez également utiliser des codes hexadécimaux ou encore des couleurs RGB à l'aide de la fonction `rgb()` :
 
```{r colors, eval=FALSE}
g + geom_point(col = "darkblue")
g + geom_point(col = "#00008b")
g + geom_point(col = rgb(red = 0, green = 0, blue = 139, maxColorValue = 255))
```

:::

<br>

Pour colorer les points selon l'espèce, nous plaçons l'argument `color` dans une parenthèse `aes()` en précisant la variable à utiliser pour définir les groupes d'individus : 

```{r basic plot 06}
g +
  geom_point(aes(col = espece))
```

Une légende permettant de différencier les gorupes a été ajoutée à droite du graphique.

<br>

::: {.callout-note icon="true"}

## L'ordre des arguments

Lorsque vous créez un graphique avec `{ggplot2}`, l'ordre des arguments peut varier. Si vous n'utilisez qu'un seul jeu de données, vous pouvez définir plusieurs arguments dans la parenthèse `ggplot()`. Si votre graphique utilisera plusieurs jeux de données, vous préciserez dans chaque couche quelles données utiliser.
Les paramètres esthétiques définis dans la parenthèse `ggplot()` seront appliqués à l'ensemble des couches, alors que ceux définis dans une parenthèse `geom()` ne concerneront que cette couche.

Voici plusieurs manières d'écrire le code pour créer un même graphique : 

```{r arg order, eval=FALSE}
ggplot(data = pingouins) +
  geom_point(aes(x = longueur_aile_mm, y = longueur_bec_mm, col = espece))

ggplot(data = pingouins, aes(x = longueur_aile_mm, y = longueur_bec_mm)) +
  geom_point(aes(col = espece))

ggplot(data = pingouins, aes(x = longueur_aile_mm, y = longueur_bec_mm,
                             col = espece)) +
  geom_point()

ggplot() +
  geom_point(data = pingouins, aes(x = longueur_aile_mm, y = longueur_bec_mm,
                                   col = espece))
```

:::

<br>

### Modifier l'apparence des points

<br>

L'argument `shape` permet de changer la forme des points. Comme pour la couleur, vous pouvez utiliser une seule forme pour l'ensemble des points, ou utiliser différentes formes pour représenter des groupes.

La forme des points peut être précisées à l'aide :  

- d'un code numérique :  
![](img/points-symbols.png){width="50%"}  

- d'un nom (`square`, `circle`, `diamond`, ...)

Modifions la forme de l'ensemble des points : 

```{r basic plot 07}
g +
  geom_point(shape = 5,
             aes(col = espece))
```

Utilisons différentes formes en fonction de l'île : 

```{r basic plot 08}
g +
  geom_point(aes(col = espece, shape = ile))
```

<br>

L'argument `size` permet de modificer la taille des points. Là encore, nous pouvons définir une même taille pour l'ensemble des points, ou représenter une variable continue de nos données à l'aide de la taille.

Augmentons la taille de l'ensemble des points : 

```{r basic plot 09}
g +
  geom_point(shape = 5, size = 3,
             aes(col = espece))
```

Utilisons la taille pour représenter la masse des pingouins : 

```{r basic plot 10}
g +
  geom_point(aes(col = espece, shape = ile, size = masse_corporelle_g))
```

<br>

::: {.callout-tip icon="true"}

## L'argument `stroke`

Les formes 21 à 25 peuvent prendre plusieurs arguments :  

- `color` : couleur du contour  
- `fill` : couleur de remplissage  
- `stroke` : largeur du contour

:::

<br>

### Ajouter et modifier des titres

<br>

La fonction `labs()` permet d'ajouter ou de modifier des titres à notre graphique : 
```{r basic plot 11}
g +
  geom_point(aes(col = espece)) +
  labs(title = "Pingouins de l'archipel Palmer",
       subtitle = "Données pour 3 espèces sur 3 îles",
       caption = "Données issues du package {Palmer penguins}",
       x = "Longueur des ailes (mm)",
       y = "Longueur du bec (mm)")
```

Nous pouvons également utiliser les fonctions `ggtitle()`, `xlab()` et `ylab()` :

```{r basic plot 12, eval=FALSE}
g +
  geom_point(aes(col = espece)) +
  ggtitle(label = "Pingouins de l'archipel Palmer",
          subtitle = "Donnnées pour 3 espèces sur 3 îles") +
  labs(caption = "Données issues du package {Palmer penguins}") +
  xlab("Longueur des ailes (mm)") +
  ylab("Longueur du bec (mm)")
```

<br>

## Histogramme

<br>

Nous souhaitons visualiser la distribution de la masse des pingouins. Nous allons pour cela utiliser la fonction `geom_histogram()` : 

```{r basic plot 13, eval=TRUE, message=FALSE, warning=FALSE}
ggplot(data = pingouins,
       aes(x = masse_corporelle_g)) +
  geom_histogram()
```

Pour bien différencier les barres, nous utilisons l'argument `col` pour colorer leur contour (l'argument `fill` permet de colorer l'intérieur) : 

```{r basic plot 14, eval=TRUE, message=FALSE, warning=FALSE}
ggplot(data = pingouins,
       aes(x = masse_corporelle_g)) +
  geom_histogram(col = "white")
```

Lorsque vous exécutez le code ci-dessus, la console affiche le message suivant : `stat_bin() using bins = 30. Pick better value with binwidth`.

Par défaut, un histogramme contient 30 classes. L'argument `bins` permet de changer le nombre de classes. N'hésitez pas à en essayer plusieurs !

```{r basic plot 15, eval=TRUE, message=FALSE, warning=FALSE}
ggplot(data = pingouins,
       aes(x = masse_corporelle_g)) +
  geom_histogram(col = "white", bins = 20)
```

L'argument `bin_width` permet de modifier la largeur de chaque classe le long de l'axe x : 

```{r basic plot 16, eval=TRUE, message=FALSE, warning=FALSE}
ggplot(data = pingouins,
       aes(x = masse_corporelle_g)) +
  geom_histogram(col = "white", binwidth = 200)
```