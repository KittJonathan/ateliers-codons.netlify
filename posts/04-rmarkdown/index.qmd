---
# title-block-banner: img/pexels-lukas-590045.jpg
title: "Introduction à RMarkdown"
subtitle: "Utiliser RMarkdown pour rédiger des rapports"
author:
  - John Godlee
  - Jonathan Kitt (adaptation)
date: "2022-10-24"
categories: [R, RStudio, Tidyverse]
format: 
  html: 
    toc: true
    toc-depth: 2
    toc-title: "Sommaire"
---

*Ce tutoriel est adapté de [Getting started with R Markdown](https://ourcodingclub.github.io/tutorials/rmarkdown/) du site [Our Coding Club](https://ourcodingclub.github.io/).*

<br>

# Introduction

## Qu'est-ce que R Markdown ?

R Markdown vous permet de créer des documents, notamment des rapports de vos analyses. Les personnes qui liront votre code doivent pouvoir facilement comprendre et reproduire votre analyse : c'est la reproductibilité.

Vous pouvez créer un document R Markdown et le partager, ou vous en servir à titre personnel pour garder une trace des étapes et des résultats d'une analyse.

R Markdown permet d'afficher le code utilisé et les résultats obtenus (graphiques, tables, ...) ainsi que des commentaires explicatifs, un peu à la manière d'un cahier de laboratoire.

R Markdown utilise la syntaxe Markdown, un langage *markup* qui propose des outils pour créer des documents avec des en-têtes, des images, des liens, ... 

Un document Markdown peut être converti en différents formats comme du *html* ou du *pdf*.

Lorsque vous créez un fichier R Markdown (`.Rmd`), vous utiliserez la syntaxe Markdown aux côtés de blocs de code écrits en R (ou d'autres langages de programmation). Ce fichier est ensuite compilé : le format Markdown et le code sont évalués, et un fichier de sortie (`html`, `pdf`, ...) est généré.

![](img/horst_rmd.png){width="50%"}

<br>

## Pré-requis

Si vous n'avez pas suivi les autres tutoriels, vous pouvez [créer un projet RStudio](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/#créer-un-projet) et [une arborescence](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/#créer-une-arborescence).

Pour utiliser RMarkdown dans RStudio, installez et chargez le package `rmarkdown` :

```{r, echo=TRUE, eval=FALSE}
install.packages("rmarkdown")
library(rmarkdown)
```

# Créer un document R Markdown

## Ouvrir un nouveau fichier R Markdown

Pour créer un nouveau document R Markdown (.RMd), cliquez sur *File > New File > R Markdown ...*. Vous pouvez également cliquer sur le symbole *Plus* et choisir *R Markdown...*.

![](img/rmd_01.png){width="75%"}

Dans la fenêtre qui s'ouvre, laissez les paramètres par défaut et cliquez sur *Create Empty Document* (en cliquant sur *OK* vous créerez un document pré-rempli).

Votre document vide s'ouvre dans la fenêtre en haut à gauche de RStudio.

::: {layout-ncol="2"}
![](img/rmd_02.png)

![](img/rmd_03.png)
:::

<br>

## Ajouter un en-tête

Un document Rmd débute par une section d'en-tête encadrée par trois tirets et qui contient généralement les éléments suivants : 

- un titre  

- les auteurs  

- la date  

- le format de sortie

Voici un exemple d'en-tête à insérer en haut de votre ficher .Rmd :

```{r, echo=TRUE, eval=FALSE}
---
title: "Pingouins de l'archipel Palmer"
author: Jonathan Kitt
date: 2022-11-14
output: html_document
---
```

::: {.callout-note icon="true"}
## Le YAML

Cet en-tête s'appelle un **YAML : Yet Another Markup Language**
:::

<br>

Sauvegardez votre fichier Rmd en cliquant sur l'icône disquette (ou en utilisant la combinaison Ctrl + S). Choisissez un nom pour votre fichier et placez-le dans votre dossier *docs*.

::: {layout-ncol="2"}
![](img/rmd_04.png)

![](img/rmd_05.png)
:::

<br>

## Compiler un document R Markdown

Pour compiler votre fichier Rmd et générer le document au format choisi (`html` dans notre cas), cliquez sur le bouton *Knit* : le document s'ouvre dans une nouvelle fenêtre.

![](img/rmd_06.png){width="100%"}

<br>

::: {.callout-tip icon="true"}
## Raccourci clavier : compiler un fichier Rmd

Pour compiler un fichier Rmd, utilisez la combinaison **Ctrl + Shift + K**
:::

<br>

Dans l'explorateur de fichiers vous pouvez remarquer qu'un fichier **mesures_pingouins.html** a été ajouté dans le répertoire **docs** : il s'agit du fichier `html` issu de la compilation du fichier Rmd. En cliquant sur le nom de ce fichier vous aurez le choix entre l'ouvrir dans l'éditeur ou dans un navigateur internet.

![](img/rmd_07.png){width="100%"}

<br>

::: {.callout-tip icon="true"}
## Prévisualiser le document

Par défaut, lorsque vous compilez un fichier Rmd, le document généré s'ouvre dans une nouvelle fenêtre. Vous pouvez choisir d'afficher cette pré-visualisation directement dans l'onglet *Viewer* en bas à droite de RStudio en cliquant sur la roue à droite du bouton Knit puis sur *Preview in Viewer Pane*.

![](img/rmd_08.png){width="100%"}
:::

<br>

# Les bases de R Markdown

Pour mettre en forme votre texte, vous allez utiliser la syntaxe markdown.

::: {.callout-note icon="true"}
## Editeur visuel

Vous pouvez modifier votre fichier Rmd à la manière d'un éditeur de texte à l'aide de l'éditeur visuel : cliquez sur le bouton **Visual** en haut du fichier.

![](img/rmd_10.png){width="100%"}
:::

<br>

## Insérer des titres

Pour insérer un titre, utilisez un `#`. Vous pouvez utiliser différents niveaux en ajoutant des `#` :

```{r, echo=TRUE, eval=FALSE}
# Niveau 1
## Niveau 2
### Niveau 3
```

![](img/rmd_11.png){width="100%"}

<br>

## Insérer une ligne horizontale

Pour insérer une ligne horizontale dans votre texte, utilisez *trois étoiles* `***`.

<br>



## Mettre en forme le texte

Pour mettre en forme votre texte, utilisez les conventions suivantes :

::: {layout-ncol="2"}
![](img/rmd_25.png)

![](img/rmd_26.png)
:::

<br>

## Insérer du texte au format code

Vous pouvez insérer du texte au *format code* : 

::: {layout-ncol="2"}
![](img/rmd_41.png)

![](img/rmd_42.png)
:::

<br>

## Insérer un lien

Vous pouvez insérer un lien dans votre texte : 

![](img/rmd_45.png)

<br>

## Insérer des listes

Vous pouvez insérer une liste à puces :

::: {layout-ncol="2"}
![](img/rmd_27.png)

![](img/rmd_28.png)
:::

Ou une liste numérotée :

::: {layout-ncol="2"}
![](img/rmd_29.png)

![](img/rmd_30.png)
:::

<br>

## Insérer un tableau

Vous pouvez insérer un tableau en le "dessinant" :

- des tirets `-` pour déparer l'en-tête du reste du tableau

- des barres verticales `|` pour délimiter les colonnes

::: {layout-ncol="2"}
![](img/rmd_31.png)

![](img/rmd_32.png)
:::

<br>

Pour aligner le texte, utilisez deux points `:` :

::: {layout-ncol="2"}
![](img/rmd_33.png)

![](img/rmd_34.png)
:::

<br>

## Insérer une citation

Vous pouvez insérer une citation :

::: {layout-ncol="2"}
![](img/rmd_35.png)

![](img/rmd_36.png)
:::

<br>

## Notation mathématique

Vous pouvez insérer du texte en exposant ou en indice :

::: {layout-ncol="2"}
![](img/rmd_37.png)

![](img/rmd_38.png)
:::

<br>

## Equation mathématique

La syntaxe pour insérer une équation mathématique se base sur [LaTeX](https://rpruim.github.io/s341/S19/from-class/MathinRmd.html) :

::: {layout-ncol="1"}
![](img/rmd_39.png)

![](img/rmd_40.png)
:::

<br>

## Insérer une image

Vous pouvez insérer une image dans votre fichier :

::: {.callout-important icon="true"}
## Chemins vers les fichiers

Lorsque que vous indiquez un chemin vers un fichier dans RMarkdown, le dossier "racine" n'est plus votre répertoire de travail (votre projet) mais le dossier dans lequel se trouve le fichier .Rmd, dans le cas présent le répertoire *docs/*.

Il faut donc revenir en arrière d'un niveau, à l'aide de **`../`**. 

Lorsque vous naviguez dans une arborescence à l'aide de la ligne de commande, **`.`** indique le répertoire de travail et **`..`** le répertoire situé un niveau au-dessus dans votre arborescence.
:::

```{r, echo=TRUE, eval=FALSE}
![](../figs/lter_penguins.png){width="100%"}
```

![](img/rmd_18.png){width="75%"}

<br>

# Rédiger un document de façon dynamique

Lorsque vous rédigez un rapport, vous pouvez le faire *"en dur"*, c'est-à-dire inscrire directement dans le texte toutes les valeurs numériques, les résultats de calculs, insérer des graphiques générés séparément, ... 

Cette façon de procéder présente un désavantage majeur : votre document ne sera valable qu'une seule fois pour une seule analyse (vous pourrez toujours le ré-utiliser en remplaçant les valeurs numériques). De plus, le risque d'erreur est non négligeable : coller des valeurs numériques copiées depuis un autre logiciel peut créer des mauvaises surprises.

Pour pallier à ces différents problèmes, RMarkdown vous permet de rédiger votre fichier de façon *"dynamique"*. Vous pouvez ainsi importer les fichiers nécessaires à votre analyse, effectuer des calculs et générer des graphiques à l'aide de code R qui sera compilé.

Votre fichier Rmd pourra ainsi être modifié et ré-utilisé pour des analyses similaires sur d'autres jeux de données.

<br>

## Insérer un bloc de code R

Commençons par importer notre jeu de données à l'aide d'une ligne de code insérée dans un bloc de code. Dans RMarkdown, un bloc de code est encadré par trois accents *\`\`\`*. 

Sur la première ligne on indique entre accolades qu'il s'agit de code R :

![](img/rmd_20.png){width="100%"}

<br>

::: {.callout-tip icon="true"}
## Raccourci clavier : insérer un bloc de code

Pour insérer un bloc de code, utiliser la combinaison **Ctrl + Alt + I**
:::

<br>

Vous pouvez exécuter ce code comme vous le feriez dans un script classique en cliquant sur la flèche verte à droite du code (ou en vous plaçant sur la ligne et en utilisant la combinaison **Ctrl + Entrée**). 

Le fichier a bien été importé et stocké dans l'objet **pingouins** visible dans l'environnement.

Lorsque vous compilez votre fichier Rmd, le code est exécuté et s'affiche dans votre document de sortie (au format `html`) :

![](img/rmd_21.png){width="100%"}

<br>

Lorsque vous insérez un bloc de code, des paramètres vous permettent de préciser si le code doit être affiché ou non, exécuté ou non, ... 

Ces options sont à placer dans les accolades : `{r eval=FALSE} par exemple`.

| option  | par défaut | effet                                  |
|---------|------------|----------------------------------------|
| eval    | TRUE       | évaluer le code et inclure le résultat |
| echo    | TRUE       | afficher le code avec le résultat      |
| warning | TRUE       | afficher les messages d'avertissement  |
| error   | FALSE      | afficher les messages d'erreur         |
| message | TRUE       | afficher les messages                  |


## Insérer du code 

Nous avons vu plus haut comment insérer du texte au format code.

Vous pouvez exécuter le code en ajoutant un `r` : 

![](img/rmd_43.png)

<br>

# Transformer un script en .Rmd

Pour mettre en pratique ce que nous avons jusqu'ici, nous allons transformer le script écrit pour l'analyse des données (voir [ce tutoriel](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/)) en fichier `.Rmd`.

Pour télécharger ce script, cliquez [ici](https://raw.githubusercontent.com/codons-blog/ateliers_codons/main/scripts/premiers_pas.R) et sauvegardez-le dans le dossier `scripts` de votre répertoire de travail.

## Introduction

Commençons par rédiger une courte introduction :

![](img/rmd_46.png)

- Nous utilisons des *balises `html`* pour centrer l'image : `<center> et </center>`  

- Nous ajustons la largeur de l'image à l'aide du paramètre `{width="50%"}`

<br>

## Importer les données

```{r, echo=FALSE, eval=TRUE}
pingouins <- read.csv("../../raw/pingouins.csv", check.names = FALSE)
```

Pour utiliser les données dans notre fichier `Rmd` nous devons l'importer : il sera alors disponible dans notre environnement.

Le chemin vers le fichier `pingouins.csv` ne sera pas le même pour un utilisateur utilisant notre document. Nous insérons ainsi deux blocs de code : 

- importer les données pour les utiliser dans le fichier `Rmd`  

- expliquer comment importer les données pour un autre utilisateur

![](img/rmd_47.png)

## Explorer et nettoyer les données

### Description des données

Les données brutes étant à présent disponibles dans notre environnement, nous pouvons les explorer de façon dynamique et afficher les résultats dans notre document : 

![](img/rmd_48.png)

### Nettoyage des données

![](img/rmd_49.png)

```{r, eval=TRUE, echo=FALSE}
# Creer une copie de travail
pingouins_propre <- pingouins

# Renommer les colonnes
nouveaux_noms <- gsub("[()]", "", names(pingouins_propre))
nouveaux_noms <- gsub(" ", "_", nouveaux_noms)
nouveaux_noms <- tolower(nouveaux_noms)
names(pingouins_propre) <- nouveaux_noms
rm(nouveaux_noms)

# Selectionner les colonnes
pingouins_propre <- pingouins_propre[, c("espece", "ile", "longueur_bec_mm",
                                         "hauteur_bec_mm", "longueur_aile_mm", 
                                         "masse_corporelle_g")]

# Modifier la variable espece 
pingouins_propre$espece <- gsub(" .*$", "", pingouins_propre$espece)

# Calculer le rapport entre la longueur et la hauteur du bec
pingouins_propre$ratio_bec <- round(pingouins_propre$longueur_bec_mm / pingouins_propre$hauteur_bec_mm, digits = 2)

# Supprimer les donnees manquantes
pingouins_propre <- pingouins_propre[complete.cases(pingouins_propre), ]
```

Comme nous l'avions fait pour importer les données, nous utilisons deux blocs de code pour exporter les données nettoyées : 

![](img/rmd_50.png)

Nous terminons cette partie par une description rapide des données nettoyées.  

La fonction `kable()` du package `knitr` permet d'afficher un tableau dans le document : 

![](img/rmd_51.png)

## Représenter les données

RMarkdown permet d'exécuter le code utilisé pour générer un graphique et d'afficher celui-ci directement dans le document : 

![](img/rmd_52.png)

Vous pouvez afficher deux graphiques côte à côté, à l'aide d'options à placer dans les accolades `{r ...}` :

- `out.width` pour préciser les largeurs des graphiques (en %)  

- `fig.show = "hold"` pour indiquer à R d'attendre d'avoir exécuté le code pour les deux graphiques avant de les afficher

![](img/rmd_53.png)

## Ajouter un sommaire

Vous pouvez ajouter un sommaire à votre document, en ajoutant des options dans l'en-tête : 

- `toc: true` : activer le sommaire (*table of contents)  

- `toc_depth` : définir le nombre de niveaux à afficher dans le sommaire

![](img/rmd_54.png)

## Compiler le fichier Rmd au format `pdf`

Pour exporter votre document au format pdf, vous pouvez modifier l'en-tête : 

![](img/rmd_55.png)