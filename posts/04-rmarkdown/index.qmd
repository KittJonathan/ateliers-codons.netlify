---
# title-block-banner: img/pexels-lukas-590045.jpg
title: "Introduction à RMarkdown"
subtitle: "Utiliser RMarkdown pour rédiger des rapports"
author:
  - John Godlee
  - Jonathan Kitt (adaptation)
date: "2022-10-24"
categories: [R, RStudio, Tidyverse]
format: 
  html: 
    toc: true
    toc-depth: 2
    toc-title: "Sommaire"
---

*Ce tutoriel est adapté de [Getting started with R Markdown](https://ourcodingclub.github.io/tutorials/rmarkdown/) du site [Our Coding Club](https://ourcodingclub.github.io/).*

<br>

# Introduction

## Qu'est-ce que R Markdown ?

R Markdown vous permet de créer des documents, notamment des rapports de vos analyses. Les personnes qui liront votre code doivent pouvoir facilement comprendre et reproduire votre analyse : c'est la reproductibilité.

Vous pouvez créer un document R Markdown et le partager, ou vous en servir à titre personnel pour garder une trace des étapes et des résultats d'une analyse.

R Markdown permet d'afficher le code utilisé et les résultats obtenus (graphiques, tables, ...) ainsi que des commentaires explicatifs, un peu à la manière d'un cahier de laboratoire.

R Markdown utilise la syntaxe Markdown, un langage *markup* qui propose des outils pour créer des documents avec des en-têtes, des images, des liens, ...

Un document Markdown peut être converti en différents formats comme du *html* ou du *pdf*.

Lorsque vous créez un fichier R Markdown (`.Rmd`), vous utiliserez la syntaxe Markdown aux côtés de blocs de code écrits en R (ou d'autres langages de programmation). Ce fichier est ensuite compilé : le format Markdown et le code sont évalués, et un fichier de sortie (`html`, `pdf`, ...) est généré.

![](img/horst_rmd.png){width="50%"}

<br>

## Pré-requis

Si vous n'avez pas suivi les autres tutoriels, vous pouvez [créer un projet RStudio](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/#créer-un-projet) et [une arborescence](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/#créer-une-arborescence).

Pour utiliser RMarkdown dans RStudio, installez et chargez le package `rmarkdown` :

```{r, echo=TRUE, eval=FALSE}
install.packages("rmarkdown")
library(rmarkdown)
```

# Créer un document R Markdown

## Ouvrir un nouveau fichier R Markdown

Pour créer un nouveau document R Markdown (.RMd), cliquez sur *File \> New File \> R Markdown ...*. Vous pouvez également cliquer sur le symbole *Plus* et choisir *R Markdown...*.

![](img/rmd_01.png){width="75%"}

Dans la fenêtre qui s'ouvre, laissez les paramètres par défaut et cliquez sur *Create Empty Document* (en cliquant sur *OK* vous créerez un document pré-rempli).

Votre document vide s'ouvre dans la fenêtre en haut à gauche de RStudio.

::: {layout-ncol="2"}
![](img/rmd_02.png)

![](img/rmd_03.png)
:::

<br>

## Ajouter un en-tête

Un document Rmd débute par une section d'en-tête encadrée par trois tirets et qui contient généralement les éléments suivants :

-   un titre

-   les auteurs

-   la date

-   le format de sortie

Voici un exemple d'en-tête à insérer en haut de votre ficher .Rmd :

```{r, echo=TRUE, eval=FALSE}
---
title: "Pingouins de l'archipel Palmer"
author: Jonathan Kitt
date: 2022-11-14
output: html_document
---
```

::: {.callout-note icon="true"}
## Le YAML

Cet en-tête s'appelle un **YAML : Yet Another Markup Language**
:::

<br>

Sauvegardez votre fichier Rmd en cliquant sur l'icône disquette (ou en utilisant la combinaison Ctrl + S). Choisissez un nom pour votre fichier et placez-le dans votre dossier *docs*.

::: {layout-ncol="2"}
![](img/rmd_04.png)

![](img/rmd_05.png)
:::

<br>

## Compiler un document R Markdown

Pour compiler votre fichier Rmd et générer le document au format choisi (`html` dans notre cas), cliquez sur le bouton *Knit* : le document s'ouvre dans une nouvelle fenêtre.

![](img/rmd_06.png){width="100%"}

<br>

::: {.callout-tip icon="true"}
## Raccourci clavier : compiler un fichier Rmd

Pour compiler un fichier Rmd, utilisez la combinaison **Ctrl + Shift + K**
:::

<br>

Dans l'explorateur de fichiers vous pouvez remarquer qu'un fichier **mesures_pingouins.html** a été ajouté dans le répertoire **docs** : il s'agit du fichier `html` issu de la compilation du fichier Rmd. En cliquant sur le nom de ce fichier vous aurez le choix entre l'ouvrir dans l'éditeur ou dans un navigateur internet.

![](img/rmd_07.png){width="100%"}

<br>

::: {.callout-tip icon="true"}
## Prévisualiser le document

Par défaut, lorsque vous compilez un fichier Rmd, le document généré s'ouvre dans une nouvelle fenêtre. Vous pouvez choisir d'afficher cette pré-visualisation directement dans l'onglet *Viewer* en bas à droite de RStudio en cliquant sur la roue à droite du bouton Knit puis sur *Preview in Viewer Pane*.

En décochant *Show Previews Inline*, le résultat de l'exécution de code ne s'affichera plus dans votre fichier `Rmd`.

![](img/rmd_08.png){width="100%"}
:::

<br>

```{r}

```

# Les bases de R Markdown

Pour mettre en forme votre texte, vous allez utiliser la syntaxe markdown.

::: {.callout-note icon="true"}
## Editeur visuel

Vous pouvez modifier votre fichier Rmd à la manière d'un éditeur de texte à l'aide de l'éditeur visuel : cliquez sur le bouton **Visual** en haut du fichier.

![](img/rmd_10.png){width="100%"}
:::

<br>

## Mettre en forme le texte

Pour mettre en forme votre texte, utilisez les conventions suivantes :

|                               |                         |
|-------------------------------|-------------------------|
| \*italiques\*                 | *italiques*             |
| \*\*gras\*\*                  | **gras**                |
| \*\*\*italiques et gras\*\*\* | ***italiques et gras*** |
| \~\~barré\~\~                 | ~~barré~~               |
| \[texte\](lien)               | [texte](lien)           |
| texte \^exposant\^            | texte ^exposant^        |
| texte \~indice \~             | texte ~indice~          |
| \`code\`                      | `code`                  |

<br>

## Insérer des titres

Pour insérer un titre, utilisez un `#`. Les différents niveaux (titre, sous-titre, paragraphe, ...) se définissent en fonction du nombre de `#` :

```{r, echo=TRUE, eval=FALSE}
# Titre
## Sous-titre
### Paragraphe
```

<br>

## Insérer une ligne horizontale

Pour insérer une ligne horizontale dans votre texte, utilisez *trois étoiles* `***`.

<br>

## Insérer des listes

Vous pouvez insérer une liste à puces :

```{r, eval=FALSE}
* item a  
* item b  
* item c  
    + item c1
    + item c2
```

-   item a\
-   item b\
-   item c
    -   item c1
    -   item c2

<br>

Ou une liste numérotée :

```{r, eval=FALSE}
1. item a  
2. item b  
3. item c  
```

1.  item a\
2.  item b\
3.  item c

<br>

## Insérer un tableau

Vous pouvez insérer un tableau en le "dessinant" :

-   des tirets `-` pour déparer l'en-tête du reste du tableau

-   des barres verticales `|` pour délimiter les colonnes

```{r, eval=FALSE}
| col1 | col2 | col3 |
| ---- | ---- | ---- |
| A    | 1    | ech1 |
| B    | 2    | ech2 |
| C    | 3    | ech3 |  
```

| col1 | col2 | col3 |
|------|------|------|
| A    | 1    | ech1 |
| B    | 2    | ech2 |
| C    | 3    | ech3 |

<br>

Pour aligner le texte, utilisez deux points `:` :

```{r, eval=FALSE}
| gauche | centre | droite |
| :----- | :----: | -----: |
| A      | 1      | ech1   |
| B      | 2      | ech2   |
| C      | 3      | ech3   |  
```

| gauche | centre | droite |
|:-------|:------:|-------:|
| A      |   1    |   ech1 |
| B      |   2    |   ech2 |
| C      |   3    |   ech3 |

<br>

## Equations

La syntaxe pour insérer une équation se base sur [LaTeX](https://rpruim.github.io/s341/S19/from-class/MathinRmd.html) :

```{r, eval=FALSE}
Un cercle de rayon $r$ a une aire $A = \pi \times r^{2}$ 
```

Un cercle de rayon $r$ a une aire $A = \pi \times r^{2}$

<br>

## Insérer une image

Vous pouvez insérer une image dans votre fichier :

::: {.callout-important icon="true"}
## Chemins vers les fichiers

Lorsque que vous indiquez un chemin vers un fichier dans RMarkdown, le dossier "racine" n'est plus votre répertoire de travail (votre projet) mais le dossier dans lequel se trouve le fichier .Rmd, dans le cas présent le répertoire *docs/*.

Il faut donc revenir en arrière d'un niveau, à l'aide de **`../`**.

Lorsque vous naviguez dans une arborescence à l'aide de la ligne de commande, **`.`** indique le répertoire de travail et **`..`** le répertoire situé un niveau au-dessus dans votre arborescence.
:::

```{r, echo=TRUE, eval=FALSE}
![pingouins](../figs/pingouins.png){width="75%"}
```

![](img/rmd_18.png){width="75%"}

L'option `width` permet d'ajuster la largeur relative de l'image.

<br>

# Rédiger un document de façon dynamique

Lorsque vous rédigez un rapport, vous pouvez le faire *"en dur"*, c'est-à-dire inscrire directement dans le texte toutes les valeurs numériques, les résultats de calculs, insérer des graphiques générés séparément, ...

Cette façon de procéder présente un désavantage majeur : votre document ne sera valable qu'une seule fois pour une seule analyse (vous pourrez toujours le ré-utiliser en remplaçant les valeurs numériques). De plus, le risque d'erreur est non négligeable : coller des valeurs numériques copiées depuis un autre logiciel peut créer des mauvaises surprises.

R Markdown vous permet de rédiger votre fichier de façon *"dynamique"*. Vous pouvez ainsi importer les fichiers nécessaires à votre analyse, effectuer des calculs et générer des graphiques à l'aide de code R qui sera compilé.

Votre fichier `Rmd` pourra ainsi être modifié et ré-utilisé pour des analyses similaires sur d'autres jeux de données.

<br>

## Insérer un bloc de code R

Commençons par importer notre jeu de données. Nous allons pour cela insérer un *bloc de code* dans notre fichier.

Pour insérer un bloc de code, cliquez sur l'icône située en haut à droite du fichier `Rmd`et choisissez `R` (d'autres langages de programmation sont disponibles).

![](img/rmd_56.png){width="100%"}

Un bloc de code contient les éléments suivants :

-   des *accents* *\`\`\`* pour délimiter le bloc

-   des accolades contenant des informations : `{r}` (nous verrons d'autres paramètres plus loin)

-   trois icônes :

    -   une *roue* pour ajouter des options

    -   une flèche pointant vers le bas pour exécuter tout le code jusqu'à ce bloc

    -   une flèche pointant vers la droite pour exécuter le bloc (vous pouvez également exécuter le code d'un bloc en vous positionnant sur le code et en utilisant la combinaison *Ctrl* + *Entrée*)

<br>

::: {.callout-tip icon="true"}
## Raccourci clavier : insérer un bloc de code

Pour insérer un bloc de code, utiliser la combinaison **Ctrl + Alt + I**
:::

<br>

Ajoutez le code suivant dans ce bloc de code et exécutez-le (attention au chemin !) :

```{r, echo=FALSE, eval=TRUE}
pingouins <- read.csv("../../data/pingouins_propre.csv")
```

```{r, echo=TRUE, eval=FALSE}
pingouins <- read.csv("../data/pingouins_propre.csv")
```

Le fichier a bien été importé et stocké dans l'objet **pingouins** visible dans l'environnement.

Lorsque vous compilez votre fichier Rmd, le code est exécuté et s'affiche dans votre document de sortie (au format `html`). L'objet `pingouins` n'est pas visible dans l'environnement lorsque vous compilez votre fichier Rmd, mais il est bel et bien disponible et vous pourrez le manipuler à l'aide de blocs de code.

<br>

## Paramétrer un bloc de code

Lorsque vous insérez un bloc de code, des paramètres vous permettent de préciser si le code doit être affiché ou non, exécuté ou non, ...

Vous pouvez régler certains paramètres en cliquant sur la *roue* à droite du bloc :

![](img/rmd_57.png){width="100%"}

Vous pouvez également renseigner ces paramètres directement dans les accolades : `{r, eval = FALSE}` par exemple.

| option  | par défaut | effet                                  |
|---------|------------|----------------------------------------|
| eval    | TRUE       | évaluer le code et inclure le résultat |
| echo    | TRUE       | afficher le code avec le résultat      |
| warning | TRUE       | afficher les messages d'avertissement  |
| error   | FALSE      | afficher les messages d'erreur         |

<br>

Si vous le souhaitez, vous pouvez définir en haut de votre fichier `Rmd` les paramètres à appliquer à l'ensemble des blocs de code :

![](img/rmd_58.png){width="100%"}

::: {.callout-caution icon="true"}
## Bonnes pratiques : nommer les blocs de code

Comme vous pouvez le voir dans le dernier exemple, il est utile de nommer les blocs de code :

-   en utilisant la roue à droite du bloc et en tapant le nom dans *Chunck Name*

-   en tapant le nom directement dans les accolades
:::

## Exécuter du code dans le texte

Nous avons vu plus haut comment insérer du texte au format code.

Vous pouvez exécuter le code en ajoutant un `r` :

```{r, eval=FALSE}
La racine carrée de 20 est **`r sqrt(20)`**
```

La racine carrée de 20 est **`r sqrt(20)`**

<br>

# Transformer un script en .Rmd

Dans le tutoriel [Premiers pas avec R](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/) nous avons vu comment nettoyer, manipuler et représenter des données.

Nous allons transformer le script utilisé pour cette analyse en un fichier `Rmd` qui sera compilé pour générer un rapport. Téléchargez le script [ici](https://raw.githubusercontent.com/codons-blog/ateliers_codons/main/scripts/intro_rmd.R) et sauvegardez-le dans le dossier `scripts` de votre projet. Ouvrez-le afin de l'avoir à portée de main (il s'ouvrira dans un nouvel onglet à côté de votre fichier `Rmd`)

## Introduction

Commençons par rédiger une courte introduction avec les éléments suivants : 

- nom du fichier  

- lien vers l'étude  

- image avec référence et lien

Copiez le texte ci-dessous et collez-le dans votre fichier `Rmd` : 

````
Le fichier `pingouins.csv` contient des mesures pour [trois espèces de pingouins vivant en Antarctique (archipel Palmer)](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0090081#s2).

![[Dessin de @allison_horst](https://allisonhorst.com/)](../figs/pingouins.png){width="50%"}
````
<br>

## Importer les données

Pour utiliser les données dans notre fichier `Rmd` nous devons les importer.

Dans le cadre de ce tutoriel nous choisissons de ne pas faire apparaître le code utilisé pour importer les données. Nous ajoutons donc les paramètres nécessaires dans le bloc de code. Comme dans un script, nous commentons les blocs de code.

````
```{r, importer donnees, echo=FALSE}`r ''`
# Importer les donnees sans afficher le code
pingouins <- read.csv("../data/pingouins_propre.csv")
```
````

## Décrire les données

Nous pouvons afficher les dimensions du tableau à l'aide de code dynamique : 
```{r, eval=FALSE}
Le jeu de données contient **`r nrow(pingouins)` observations** et **`r ncol(pingouins)` variables**.
```

Nous pouvons extraire les noms des espèces et des îles : 

```{r, eval=FALSE}
Les mesures concernent **trois espèces** de pingouins : 

- *`r sort(unique(pingouins$espece))[1]`*  

- *`r sort(unique(pingouins$espece))[2]`*  

- *`r sort(unique(pingouins$espece))[3]`*

Ces pingouins vivent sur **trois îles** : 

- `r sort(unique(pingouins$ile))[1]` 

- `r sort(unique(pingouins$ile))[2]`  

- `r sort(unique(pingouins$ile))[3]`
```

Comment les espèces sont-elles réparties sur les îles ?

````
Les individus se répartissent de la façon suivante : 

```{r, repartition individus, echo=FALSE, comment=""}`r ''`
# Tableau de la répartition des individus
table(pingouins$espece, pingouins$ile)
```
````

### Nettoyage des données

![](img/rmd_49.png)

```{r, eval=TRUE, echo=FALSE}
# Creer une copie de travail
pingouins_propre <- pingouins

# Renommer les colonnes
nouveaux_noms <- gsub("[()]", "", names(pingouins_propre))
nouveaux_noms <- gsub(" ", "_", nouveaux_noms)
nouveaux_noms <- tolower(nouveaux_noms)
names(pingouins_propre) <- nouveaux_noms
rm(nouveaux_noms)

# Selectionner les colonnes
pingouins_propre <- pingouins_propre[, c("espece", "ile", "longueur_bec_mm",
                                         "hauteur_bec_mm", "longueur_aile_mm", 
                                         "masse_corporelle_g")]

# Modifier la variable espece 
pingouins_propre$espece <- gsub(" .*$", "", pingouins_propre$espece)

# Calculer le rapport entre la longueur et la hauteur du bec
pingouins_propre$ratio_bec <- round(pingouins_propre$longueur_bec_mm / pingouins_propre$hauteur_bec_mm, digits = 2)

# Supprimer les donnees manquantes
pingouins_propre <- pingouins_propre[complete.cases(pingouins_propre), ]
```

Comme nous l'avions fait pour importer les données, nous utilisons deux blocs de code pour exporter les données nettoyées :

![](img/rmd_50.png)

Nous terminons cette partie par une description rapide des données nettoyées.

La fonction `kable()` du package `knitr` permet d'afficher un tableau dans le document :

![](img/rmd_51.png)

## Représenter les données

RMarkdown permet d'exécuter le code utilisé pour générer un graphique et d'afficher celui-ci directement dans le document :

![](img/rmd_52.png)

Vous pouvez afficher deux graphiques côte à côté, à l'aide d'options à placer dans les accolades `{r ...}` :

-   `out.width` pour préciser les largeurs des graphiques (en %)

-   `fig.show = "hold"` pour indiquer à R d'attendre d'avoir exécuté le code pour les deux graphiques avant de les afficher

![](img/rmd_53.png)

## Ajouter un sommaire

Vous pouvez ajouter un sommaire à votre document, en ajoutant des options dans l'en-tête :

-   `toc: true` : activer le sommaire (\*table of contents)

-   `toc_depth` : définir le nombre de niveaux à afficher dans le sommaire

![](img/rmd_54.png)

## Compiler le fichier Rmd au format `pdf`

Pour exporter votre document au format pdf, vous pouvez modifier l'en-tête :

![](img/rmd_55.png)
