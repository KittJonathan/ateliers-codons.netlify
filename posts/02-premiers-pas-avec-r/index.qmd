---
title: "Premiers pas avec R"
subtitle: "Se familiariser avec R, manipuler des données et les représenter"
author:
  - Gergana Daskalova
  - Jonathan Kitt (adaptation)
date: "2022-10-13"
categories: [R, RStudio, bases]
format: 
  html: 
    page-layout: full
    toc: true
    toc-depth: 2
    toc-title: "Sommaire"
---

```{r, echo=FALSE, eval=TRUE}
pingouins <- read.csv("../../raw/pingouins.csv", check.names = FALSE)
```

*Ce tutoriel est adapté de [Getting started with R and RStudio](https://ourcodingclub.github.io/tutorials/intro-to-r/) du site [Our Coding Club](https://ourcodingclub.github.io/).*

<br>

::: {.callout-tip icon="false"}
## Objectifs du tutoriel

- Se familiariser avec RStudio  
- Organiser son travail  
- Utiliser un script  
- Importer, explorer, manipuler et représenter des données

:::


::: {.callout-note icon="true"}
## Note

Pour savoir comment installer R et RStudio, cliquez [ici](https://ateliers-codons.netlify.app/posts/01-installer-r-et-rstudio/)
:::

<br>

# Introduction {#r_intro}

## Qu'est-ce que R ? {#r_def}

<br>

R est un **langage de programmation statistique** qui a rapidement gagné en popularité dans de nombreux domaines scientifiques.

Il a été développé par **Ross Ihaka** et **Robert Gentleman**, du Département de Statistiques de l'Université d'Auckland, comme **implémentation libre du langage de programmation S**.

<br>

::: {.callout-tip icon="true"}
## Quelques dates

|      |                         |
|------|-------------------------|
| 1991 | Création du langage R   |
| 1993 | R est dévoilé au public |
| 1996 | [Article dans le *Journal of Computational and Graphical Statistics*](https://www.stat.auckland.ac.nz/~ihaka/downloads/R-paper.pdf) |
:::

<br>

R désigne également le **logiciel** qui utilise ce langage pour des calculs statistiques (et tout un tas d'autres applications (manipulation de données, graphiques, ...).

Il dispose d'une **communauté** en ligne très active ainsi que d'**extensions** pour presque tous les domaines et applications possibles et imaginables (cartographie, fouille de texte, modélisation, ...).

Contrairement à d'autres logiciels de statistiques comme Minitab ou SPSS, R peut être exécuté entièrement en **ligne de commande** et ne nécessite pas d'interface graphique, ce qui lui confère une **grande flexibilité**.

<br>

::: {.callout-tip icon="true"}
## Quelques avantages de R

-   C'est un outil **libre et open source** (tout le monde peut utiliser le code et voir comment il fonctionne) 

-   C'est un langage de programmation plutôt qu'une interface graphique, ce qui permet à l'utilisateur de sauvegarder facilement des **scripts** sous forme de texte pour les ré-utiliser ou les partager

-   Beaucoup de personnes l'utilisent dans beaucoup de domaines différents - **il est rare d'être confronté à un problème qui n'a jamais été résolu !**
:::

<br>

## Naviguer dans RStudio {#naviguer_rstudio}

<br>

La plupart des utilisateurs interagissent avec R à l'aide d'une **interface graphique**, dont la plus connue est RStudio.

En ouvrant RStudio, vous verrez une fenêtre comme celle ci-dessous, divisée en **trois panneaux** :

![](img/rstudio_01.png){width="100%"}

<br>

### La console

<br>

Vous pouvez y **taper du code et l'exécuter** en appuyant sur `Entrée`.

Quand vous démarrez une nouvelle session dans RStudio, la console affiche également des informations comme la version de R présente sur votre ordinateur ainsi que des indications sur la manière d'obtenir de l'aide.

<br>

::: {.callout-tip icon="true"}
## L'invite de commande

Dans la console, une ligne commence par `>` : c'est ce qu'on appelle l'**invite de commande**. Cela indique que R est prêt à recevoir vos instructions !

Tapez `2+2` puis appuyez sur `Entrée` : la console affiche le résultat.
```{r}
2 + 2
```

Dans la console, vous pouvez parcourir les **dernières commandes exécutées** à l'aide des flèches haut et bas.

:::

<br>

### L'espace de travail

<br>

Vous y trouverez votre **environnement** (données importées, objets créés, fonctions définies, ...), ainsi que d'autres onglets comme l'**historique** des commandes exécutées ou l'accès à des **tutoriels** (pour les versions récentes de RStudio).

<br>

::: {.callout-tip icon="true"}
## Un langage orienté objet

R est un langage orienté objet, ce qui veut dire que tout ce que vous manipulez dans R est **stocké dans un objet**.
:::

<br>

Lorsque vous quittez votre session RStudio, vous aurez la possibilité de sauvegarder votre espace de travail. Il est préférable de ne pas le faire afin de démarrer chaque session avec un espace de travail vide.

<br>

### Le navigateur

<br>

Ce navigateur vous permet de naviguer dans vos dossiers, de copier, renommer ou supprimer des fichiers, à la manière d'un explorateur classique.

Les autres onglets permettent de visualiser les graphiques, de voir quels packages (extensions) sont installés, ou encore d'afficher l'aide.

<br>

### Le script

<br>

::: {.callout-important icon="true"}
## Important

Le code tapé et exécuté dans la console ne sera plus disponible quand vous quitterez votre session RStudio. A la manière d'un document Word, un script vous permet de **sauvegarder votre code** afin d'y accéder ultérieurement ou de le partager.
:::

<br>

Pour ouvrir un nouveau script, cliquez sur le *"plus"* dans le coin supérieur gauche de la fenêtre RStudio puis sur *R Script*.

![](img/rstudio_09.png){width="75%"}

<br>

::: {.callout-tip icon="true"}
## Raccourcis clavier : ouvrir un nouveau script

Pour ouvrir un nouveau script, utilisez la combinaison **Ctrl + Shift + N**
:::

<br>

Un nouveau panneau s'affiche :

![](img/rstudio_10.png){width="100%"}

<br>

# Organiser son travail

## Créer un projet

<br>

Lorsque vous partagez votre code avec d'autres personnes, celles-ci doivent pouvoir faire tourner vos analyses sans erreur et obtenir des résultats identiques (on parle de **reproductibilité**). 

Les **projets RStudio** aident à construire une analyse reproductible en regroupant tous les éléments nécessaires dans un seul dossier (code, données, figures et paramètres). Cela vous évitera de perdre du temps à chercher des fichiers dans votre ordinateur : la racine du projet est votre répertoire de travail. 

Nous verrons dans un autre tutoriel comment connecter un projet RStudio à un gestionnaire de version comme GitLab : vous pourrez travailler à plusieurs sur un même code en gardant une trace de toutes les modifications apportées par l'une ou l'autre personne.

Pour créer un projet, cliquez sur *File* puis *New project...* :

![](img/rstudio_02.png){width="75%"}

<br>

Choisissez *New Directory* puis *New Project*

::: {layout-ncol=2}

![](img/rstudio_03.png){}

![](img/rstudio_04.png){}
:::

<br>

Dans la fenêtre *Create New Project*, attribuez un nom et un emplacement au projet, puis cliquez sur *Create project*.

![](img/rstudio_05.png){width="75%"}

<br>

Quand vous voudrez travailler à nouveau sur ces données, il vous suffira d'ouvrir le projet en double-cliquant sur le fichier `.Rproj`.

![](img/rstudio_06.png){width="75%"}

<br>

::: {.callout-caution icon="true"}
## Bonnes pratiques : nommer ses fichiers et dossiers

-   privilégiez les noms courts et explicites (à éviter : *fichier_2e_version_a\_verifier.txt*)
-   ne mettez ni espace ni caractères spéciaux (accents, symboles, ...)\
-   pour les dates, privilégiez le format **AAAAMMJJ** (année, mois, jour)
-   mettez l'élément le plus important en premier (par exemple : *projet_date_contenu*)\
-   optez pour l'une de ces deux conventions d'écriture : **camel case** (*MonProjet*) ou **snake case** (*mon_projet*)

:::

<br>

## Créer une arborescence

Il est toujours préférable de passer un peu de temps à bien organiser un projet lors de sa création, plutôt que de passer beaucoup de temps par la suite à déplacer des fichiers, les renommer, les rechercher, ...

Pour créer un nouveau dossier dans votre projet, cliquez sur *New Folder* dans l'onglet *Files* du navigateur : 

![](img/rstudio_07.png){width="100%"}

L'organisation proposée ci-dessous est utilisable dans une très grande majorité de cas :

- **raw** : données brutes

- **data** : données issues de la manipulation/modification des données brutes

- **scripts** : code utilisé pour analyser les données, créer les graphiques, ...

- **results** : fichiers de résultats obtenus durant l'analyse

- **figures** : graphiques générés au cours de l'analyse

- **docs** : rapports, présentations, articles en lien avec l'analyse, documents concernant les outils utilisés, ... |

![](img/rstudio_08.png){width="100%"}

<br>

# Importer des données

<br>

Le jeu de données que nous allons utiliser contient des mesures pour [trois espèces de pingouins vivant sur l'archipel Palmer en Antarctique](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0090081).

Toute opération réalisée dans R, que ce soit importer ou exporter des données, effectuer des calculs ou encore créer des graphiques, fait appel à une fonction. Une fonction est constituée de code et permet d'exécuter une action.

La manière dont la fonction s'exécute peut se modifier à l'aide d'arguments (obligatoires ou optionnels).

Pour importer les données, nous utilisons la fonction `read.csv()` en précisant deux arguments : 

- le chemin vers l'emplacement du fichier à importer entre guillemets  
- l'argument `check.names = FALSE` pour conserver les noms de colonnes tels quels.  

Tapez le code ci-dessous dans votre script puis cliquez sur *Run*

![](img/rstudio_29.png)

<br>

::: {.callout-caution icon="true"}
## Bonnes pratiques : auto-complétion

R vous aide à compléter votre code : tapez `re` puis **Tab**, et vous verrez s'afficher une liste de fonctions ou d'objets commençant par ces deux lettres. Vous pouvez naviguer à l'aide des flèches haut et bas et valider votre choix en appuyant à nouveau sur **Tab**. Cette fonctionnalité de R est particulièrement utile lorsque vous manipulez des fichiers ou objets ayant des noms complexes.
:::

<br>

Dans la console, le code s'exécute et les données sont affichées. Cela indique que la commande a bien fonctionné, mais que les données ne sont pour l'instant pas disponibles dans notre environnement. Nous allons donc importer les données et les stocker dans un objet que nous appelons *pingouins*. Pour cela nous utilisons la **flèche d'assignation `<-`**. 

::: {.callout-tip icon="true"}
## Raccourcis clavier : flèche d'assignation

Pour insérer une flèche d'assignation, utilisez la combinaison **Alt + "-"** (tiret du 6).
:::

<br>

Tapez le code ci-dessous dans votre script puis cliquez sur *Run* : 

```{r, eval=FALSE}
pingouins <- read.csv("raw/pingouins.csv", check.names = FALSE)
```

::: {.callout-tip icon="true"}
## Raccourcis clavier : exécuter du code

Pour exécuter une ou plusieurs lignes de code, sélectionnez les lignes et utilisez la combinaison **Ctrl + Entrée**
:::

<br>

Vous pouvez également importer des données en cliquant sur *Import Dataset* puis sur *From Text (base)...* dans le panneau *Environnement* : 

![](img/rstudio_31.png){width="75%"}

<br>

Choisissez le fichier à importer. La fenêtre qui s'ouvre vous permet de vérifier que les données seront correctement importées (présence d'un en-tête, séparateur de colonnes, ...) : 

![](img/rstudio_32.png){width="75%"}

<br>

La commande utilisée pour importer les données s'affiche dans la console. En procédant ainsi, R utilise le chemin absolu vers le fichier (à partir de la racine du disque dur), alors que nous avions utilisé le chemin relatif (à partir du répertoire de travail) à l'intérieur de la fonction `read.csv()`.

<br>

Notre environnement contient maintenant un objet **pingouins**, et vous pouvez voir l'indication `344 obs. of 9 variables` : le jeu de données contient 344 observations (lignes) et 9 variables (colonnes).

![](img/rstudio_12.png){width="100%"}

<br>

En cliquant sur la flèche bleue à gauche du nom de l'objet, vous aurez accès à plus d'informations :

![](img/rstudio_13.png){width="100%"}

<br>

- les **noms** des variables, précédés du signe `$`  

- le **type** de chaque varible : caractère (chr), nombres entiers (int) ou décimaux (int), logique (log)  

- les **premiers éléments** de chaque variable


::: {.callout-tip icon="true"}
## L'opérateur **\$**

Cet opérateur permet de sélectionner la colonne d'un tableau. Dans la console, tapez `pingouins$` et appuyez sur **Tab**.

![](img/rstudio_15.png){width="50%"} 

Vous pouvez choisir la variable qui vous intéresse à l'aide des **flèches haut et bas** (*Espece* par exemple) puis appuyer à nouveau sur **Tab** pour valider. Vous verrez alors s'afficher les 344 observations de cette variable. 

![](img/rstudio_16.png){width="75%"}
:::

<br>

Vous pouvez afficher le tableau en cliquant sur l'icône à droite du nom de l'objet dans l'environnement.

![](img/rstudio_14.png){width="100%"}

Cela ouvre un nouvel onglet à côté de votre script :


![](img/rstudio_17.png){width="100%"}

<br>

::: {.callout-caution icon="true"}
## Bonnes pratiques : commenter ses scripts

Prenez dès maintenant l'habitude de commenter vos scripts. Il s'agit de rédiger des commentaires qui expliquent ce que fait votre code, pour le rendre plus compréhensible par vos collègues - et par vous-même quand vous reviendrez sur un script après un certain temps !

Pour ajouter un commentaire, utilisez un `#` au début d'une ligne puis rédigez votre commentaire. Dans R, un code placé après un `#` n'est pas exécuté :

```{r, echo=TRUE, eval=TRUE}
# Ceci est un commentaire qui ne sera pas exécuté
# La ligne suivante sera exécutée
2 + 2
```
:::

<br>

Pour commencer, ajoutons des informations en haut de notre script :

```{r, echo=TRUE, eval=FALSE}
# Ateliers codons
# Premiers pas avec R
# 2022-11-07

# Importer le jeu de donnees

pingouins <- read.csv("raw/pingouins.csv", check.names = FALSE)

```

<br>

::: {.callout-tip icon="true"}
## Raccourcis clavier : commentaires

Pour commenter ou dé-commenter des lignes de code, utilisez la combinaison **Ctrl + Shift + C**.
:::


<br>

Avant d'aller plus loin, sauvegardez votre script en cliquant sur l'icône disquette en haut de votre script :

![](img/rstudio_30.png){width="100%"}

Choisissez le dossier où sera sauvegardé votre script - **scripts** dans notre cas, et nommez votre script puis cliquez sur **Save** :

![](img/rstudio_19.png){width="100%"}

::: {.callout-tip icon="true"}
## Raccourcis clavier : sauvegarder un script

Pour sauvegarder un script, uilisez la combinaison **Ctrl + S**
:::

<br>

# Explorer des données

Avant de débuter une analyse des données, il est toujours utile d'explorer rapidement ces données afin de s'assurer qu'elles ont été correctement importées, que les variables numériques sont effectivement des nombres et pas des chaînes de caractères, ...

::: {.callout-note icon="true"}

Cette première étape consistant à vérifier les données, le code utilisé peut être tapé directement dans la console. Le script contiendra plutôt le code utilisé pour nettoyer les données, ainsi que toutes les étapes ultérieures de l'analyse.

:::

Commençons par regarder à quel structure de données nous avons affaire : 

```{r}
class(pingouins)
```

Quel type de données contient la variable Espece ?

```{r}
typeof(pingouins$Espece)
```


::: {.callout-tip icon="true"}

## Les structures et types de données dans R

Il existe plusieurs structures de données : 

- Un *vecteur* est un objet à une dimension contenant une chaîne d'éléments d'un seul type  
- Un **facteur** est un vecteur contenant un nombre limité de modalités  

- Un *data frame* est un tableau dont les colonnes (des vecteurs) peuvent être de différents types  

- Une *matrice* est un tableau ne contenant qu'un seul type de données

- Une *liste* peut contenir différents éléments (un vecteur, un data frame, ...)

<br>

Ces structures peuvent contenir différents types de données : 

- des *caractères* 

- des *nombres entiers*  

- des *nombres décimaux* (dans R, le séparateur décimal est le point `.`)  

- des *opérateurs logiques* (TRUE ou FALSE)

:::

<br>

Vous pouvez afficher les dimensions et la structure des données : 

```{r}
# Dimensions du tableau (nb lignes par nb colonnes)
dim(pingouins)

# Structure du tableau
str(pingouins)
```

::: {.callout-note icon="true"}
## Note

Vous remarquerez que la fonction `str(pingouins)` affiche des informations très proches de celles obtenues en cliquant sur la flèche bleue à gauche de l'objet pingouins dans l'environnement.
:::

<br>

Les fonctions suivantes permettent l'afficher le début ou la fin du tableau :

```{r, echo=TRUE, eval=FALSE}
# Afficher les premieres lignes du tableau
head(pingouins)

# Afficher les dernieres lignes du tableau
tail(pingouins)
```

<br>

::: {.callout-tip icon="true"}
## Afficher l'aide d'une fonction

Vous pouvez afficher l'aide d'une fonction de deux manières :

- taper `help(fonction)` (pensez à l'auto-complétion !)

- taper `?fonction`

Essayez en tapant dans la console `?he` puis appuyez sur **Tab** : R vous propose une liste de fonctions commençant par **he**. Utilisez les flèches haut et bas pour choisir la fonction **head**. Une petite fenêtre vous donne un aperçu du contenu de l'aide pour la fonction (utile quand vous hésitez entre plusieurs fonctions). Une fois la fonction sélectionnée, appuyez sur la touche **F1** pour afficher l'aide complète dans l'onglet **Help**.

L'aide d'une fonction contient plusieurs paragraphes :

- **Description** : présentation sommaire de la fonction

- **Usage** :  comment utiliser la fonction 

- **Arguments** : ils peuvent être obligatoires ou optionnels

- **Details** : format de données à fournir en entrée, précisions sur les arguments, ...

- **Value** : type d'objet obtenu en sortie

- **Note** :  informations additionnelles

- **Author(s)** :  personnes ayant contribué à l'écriture du code de la fonction

- **Examples** :  exemples d'utilisation, avec la possibilité d'exécuter ces exemples

Dans le cas de `head()`, vous pouvez voir que par défaut, la fonction retournera les 6 premières lignes (`n = 6L`, **L** indiquant qu'il s'agit d'un nombre entier). Pour afficher uniquement les deux premières lignes du tableau *pingouins*, il vous faudrait modifier cet argument : `head(pingouins, n = 2L)`
:::

<br>

Vous pouvez explorer une variable d'intérêt à l'aide de l'opérateur `$` :

```{r, echo=TRUE, eval=FALSE}
# Afficher les premiers elements d'une variable
head(pingouins$`Masse corporelle (g)`)

# Afficher les derniers elements d'une variable
tail(pingouins$`Masse corporelle (g)`)

# Afficher le type, le nombre d'elements et les premiers elements d'une variable
str(pingouins$`Masse corporelle (g)`)
```


<br>

La fonction `summary()` est particulièrement intéressante pour avoir une vue d'ensemble de vos données.

```{r, echo=TRUE, eval=FALSE}
summary(pingouins)
```

![](img/rstudio_22.png){width="100%"}

Les informations affichées  dépendent du type de variable :

-   **nombre d'éléments, classe et mode** pour les variables de type **caractère**\
-   **statistiques** pour les variables de type **numérique**

::: {.callout-tip icon="true"}
## Les données manquantes

Vous pouvez trouver dans vos données des éléments notés **NA**. Il s'agit d'une donnée manquante (**Not Available**) : aucune donnée n'existe pour ce cas précis.

Cette valeur **NA** est à différencier de la valeur **NaN (Not a Number)** également rencontrée dans R. Il s'agit alors du résultat d'une opération arithmétique invalide, telle que 0/0.
:::

<br>

# Manipuler des données

## Sélectionner des colonnes

Dans R, la sélection de données, que ce soit une cellule, une ligne ou une colonne d'un tableau, ou encore un élément dans une chaîne, s'effectue à l'aide des **crochets \[\]**.

-   Pour un objet à **une seule dimension**, un seul paramètre est nécessaire (de la même façon, vous pouvez combiner les éléments avec les opérateurs `:` et `c()`). Imaginons un vecteur v : 

![](img/rstudio_27.png){width="100%"}


-   Dans le cas d'un objet à **deux dimensions**, la sélection s'effectue en précisant deux paramètres séparés par une virgule : la ou les ligne(s) et la ou les colonne(s). Pour sélectionner l'ensemble d'une des deux dimensions, on utilise un espace vide d'un côté ou de l'autre de la virgule. Pour sélectionner plusieurs lignes ou colonnes, vous pouvez utiliser soit l'opérateur `:` si les lignes ou les colonnes se suivent, soit l'opérateur de concaténation `c()` (vous pouvez combiner les deux). Imaginons un tableau d : 

![](img/rstudio_28.png){width="100%"}



```{r, echo=TRUE, eval=FALSE}
# Selectionner la 3e ligne et la 5e colonne : 
pingouins[3, 5]

# Selectionner la 3e ligne : 
pingouins[3, ]

# Selectionner la 5e colonne : 
pingouins[, 5]

# Selectionner les lignes 40 à 45 : 
pingouins[40:45, ]

# Selectionner les colonnes 2 et 4 : 
pingouins[, c(2, 4)]

# Selectionner les lignes 50 et 100 à 105 : 
pingouins[c(50, 100:105), ]
  
# Selectionner le 45e element de la variable Ile
pingouins$Ile[45]

```

Le jeu de données contient des informations dont nous n'aurons pas besoin pour la suite de l'analyse. Nous allons sélectionner les colonnes pour ne garder que celles qui nous intéressent, à savoir : 

- le nom de l'**espèce**  
- l'**île**  
- la **longueur du bec**  
- la **hauteur du bec**  
- la **longueur des ailes**  
- la **masse corporelle**

Vous pouvez sélectionner les colonnes d'un tableau soit : 

- en utilisant les **noms des variables**  

```{r eval=FALSE}
pingouins[, c("Espece", "Ile", "Longueur Bec (mm)", "Hauteur Bec (mm)",
              "Longueur Aile (mm)", "Masse corporelle (g)")]
```

- en utilisant les **index des colonnes**


```{r eval=FALSE}
pingouins[, c(3:4, 6:9)]
```

Assignons ce nouveau tableau dans un objet : 

```{r}
pingouins_propre <- pingouins[, c("Espece", "Ile", "Longueur Bec (mm)",
                                  "Hauteur Bec (mm)","Longueur Aile (mm)",
                                  "Masse corporelle (g)")]
```

## Renommer des colonnes

Les noms des colonnes ne sont pas dans un format idéal (présence d'espaces, de parenthèses). 

La fonction `names()` permet d'accéder aux noms des colonnes d'un tableau : 
```{r}
names(pingouins_propre)
```

Nous allons modifier les noms de colonnes en :

- supprimant les parenthèses 

- remplaçant les espaces par des `_` 

- remplaçant les majuscules par des minuscules

La fonction `gsub()` permet de remplacer un motif par un autre dans une chaîne, et s'utilise de la manière suivante : `gsub(motif, remplacement, objet)`

Commençons par supprimer les parenthèses. Nous allons pour cela utiliser une **expression régulière** : le motif recherché est soit une parenthèse ouverte soit une parenthèse fermée.   
```{r}
nouveaux_noms <- gsub("[()]", "", names(pingouins_propre))
```

Remplaçons maintenant les espaces par des `_` : 

```{r}
nouveaux_noms <- gsub(" ", "_", nouveaux_noms)
```

La fonction `tolower()` permet de remplacer les majuscules d'une chaîne de caractères par des minuscules (à l'inverse de la fonction `toupper()`) : 

```{r}
nouveaux_noms <- tolower(nouveaux_noms)
```

Remplaçons les noms de colonnes du tableau par ce vecteur *nouveaux_noms* : 

```{r}
names(pingouins_propre) <- nouveaux_noms
```

Assurons-nous que notre tableau contient bien les nouveaux noms de colonnes : 

```{r}
names(pingouins_propre)
```

::: {.callout-tip icon="true"}

Lorsque nous utilisons une flèche d'assignation, le résultat du code exécuté ne s'affiche pas dans la console. Pour éviter de taper le nom de l'objet que l'on souhaite afficher pour vérifier que le code a bien fonctionné, nous pouvons entourer le code par des parenthèses : 
```{r, eval=FALSE}
(names(pingouins_propre) <- nouveaux_noms)
```

Le résultat de la commande s'affiche maintenant dans la console.

:::

Nous pouvons maintenant supprimer l'objet nouveaux_noms de notre environnement à l'aide de la fonction `rm()` (remove) : 
```{r}
rm(nouveaux_noms)
```

::: {.callout-tip icon="true"}

## Supprimer des objets

Vous pouvez également supprimer des objets directement dans le panneau Environnement : 

- Sur la droite du panneau, cliquez sur *List* puis sur *Grid*

![](img/rstudio_33.png){width="100%"}

- Cochez les objets à supprimer puis cliquez sur le balai

![](img/rstudio_34.png){width="100%"}

Attention : si vous cliquez sur le balai alors que les objets sont sous forme de liste, vous supprimerez tous les objets de votre environnement.

:::

## Modifier une variable

Les noms d'espèces contenus dans la variable espece sont plutôt longs et peu pratiques à manipuler. Nous allons modifier le contenu de cette variable pour ne garder que le premier mot de chaque chaîne de caractères (Adelie, Chinstrap et Gentoo). Nous allons à nouveau utiliser la fonction `gsub()`, mais cette fois-ci avec une expression régulière : nous allons supprimer tout ce qui vient après le premier espace (nous pourrions également extraire tout ce qui vient avant le premier espace).

```{r}
pingouins_propre$espece <- gsub(" .*$", "", pingouins_propre$espece)
head(pingouins_propre)
```

## Ajouter une variable

Quel est le rapport entre la longueur du bec et sa hauteur ? Calculons le ratio : 
```{r}
pingouins_propre$ratio_bec <- pingouins_propre$longueur_bec_mm / pingouins_propre$hauteur_bec_mm
```

Pour arrondir ce ratio à deux chiffres après la virgules, nous pouvons utiliser la fonction `round()` : 

```{r}
pingouins_propre$ratio_bec <- round(pingouins_propre$ratio_bec, digits = 2)
```

## Supprimer les données manquantes

Notre jeu de données contient des données manquantes (**NA**). En affichant les premières lignes, vous pourrez remarquer que pour l'individu situé sur la quatrième ligne, aucune donnée numérique n'est disponible : 

```{r}
head(pingouins_propre)
```

Pour savoir combien de données manquantes sont présentes dans vos données, vous pouvez utiliser la commande suivante : 

```{r}
table(is.na(pingouins_propre))
```

Nos données contiennent 10 valeurs NA, nous en avons déjà trouvé 5 dans les premières lignes du tableau. Les 5 données manquantes restantes viennent-elles de l'absence de mesure pour un second individu ? La fonction `complete.cases()` permet d'extraires les lignes d'un tableau pour lesquelles il n'y a aucune donnée manquante. Nous cherchons à extraire les lignes qui contiennent au moins une donnée manquante. Pour cela nous allons filtrer les données en extrayant les lignes à l'aide de l'opétateur de négation `!` : 

```{r}
pingouins_propre[!complete.cases(pingouins_propre), ]
```

Nous avons ici les dix données manquantes. Nous allons supprimer ces deux individus du jeu de données : 

```{r}
pingouins_propre <- pingouins_propre[complete.cases(pingouins_propre), ]
```

Nous aurions également pu supprimer les lignes pour lesquelles une des variables numériques contient des données manquantes : 

```{r eval=FALSE}
pingouins_propre <- pingouins_propre[!is.na(pingouins_propre$longueur_bec_mm), ]
```

Assurons-nous d'avoir bien supprimé ces données manquantes : 

```{r}
table(is.na(pingouins_propre))
```


## Transformer un vecteur en un facteur

Affichons la synthèse de nos données

```{r}
summary(pingouins_propre)
```

Les deux premières variables, espece et ile, sont considérées comme de simples chaînes de caractère. Or nous savons que ces variables ne possèdent chacune que trois valeurs possibles : il s'agit de variables catégorielles.

Si vous ne connaissez pas dans le détail les données sur lesquelles vous travaillez, deux fonctions vous permettent d'extraire les observations uniques d'une variable (`unique()`) et de les compter (`length()`) : 

```{r}
length(unique(pingouins_propre$espece))
length(unique(pingouins_propre$ile))
```

La fonction `table()` vous permet d'afficher ces observations uniques d'une variable ainsi que le nombre de fois qu'elles apparaissent :

```{r}
table(pingouins_propre$espece)
table(pingouins_propre$ile)
```

La fonction `as.factor()` permet de transformer un vecteur en un facteur. Par défaut, les niveaux du facteur (les observations uniques) sont triées par ordre alphabétique. Vous pouvez définir les niveaux à l'aide de l'option `levels = ...`.

::: {.callout-tip icon="true"}
## Vecteurs et facteurs

On désigne par **vecteur** un objet uni-dimensionnel contenant des éléments d'un seul type (caractères, valeurs numériques ou logiques). Un tableau est constitué de vecteurs situés dans les colonnes.

Un **facteur** est un vecteur dont les éléments peuvent être regroupés en catégories (on parle de **niveaux**).
:::

```{r}
pingouins_propre$espece <- as.factor(pingouins_propre$espece)
pingouins_propre$ile <- as.factor(pingouins_propre$ile)
```

Vérifiez que les corrections apportées aient bien été appliquées au jeu de données :

```{r}
summary(pingouins_propre)
```

<!-- ![](img/rstudio_23.png){width="100%"} -->

Comparons les variables avant et après ces modifications : 

```{r}
class(pingouins$Espece)
mode(pingouins$Espece)
typeof(pingouins$Espece)

class(pingouins_propre$espece)
mode(pingouins_propre$espece)
typeof(pingouins_propre$espece)
```


<br>

::: {.callout-caution icon="true"}
## Bonne pratiques : structurer son script

Votre script commence à être bien fourni. Vous pouvez le diviser en différentes parties pour simplifier la lecture. Pour cela, ajoutez des titres sous forme de commentaires et accolez des tirets (au moins quatre) pour signaler à R qu'il s'agit de divisions dans votre script.

![](img/rstudio_24.png){width="100%"}

En cliquant sur l'icône **Menu** à droite vous aurez accès à une table des matières dans laquelle vous pourrez naviguer en cliquant sur la partie qui vous intéresse.

![](img/rstudio_25.png){width="100%"}
:::

<br>

::: {.callout-tip icon="true"}
## Raccourcis clavier : les sections d'un script

Pour afficher le sommaire de votre script, utilisez la combinaison **Ctrl + Shift + O**.\
Vous pouvez également replier (**Alt + O**) ou déplier (**Alt + Shift + O**) les sections.
:::

<br>

## Exporter des données

La fonction `write.csv()` permet d'exporter un tableau : 

```{r, echo=FALSE, eval=TRUE}
write.csv(pingouins_propre, "../../data/pingouins_propre.csv")
```

```{r, echo=TRUE, eval=FALSE}
write.csv(pingouins_propre, "data/pingouins_propre.csv")
```

## Filtrer des données

Pour filtrer les données qui répondent à un ou plusieurs critères, nous utilisons les opérateurs de comparaison.

<br>

::: {.callout-tip icon="true"}
## Les opérateurs

|       |                     | 
| :---: | :------------------ |
| ==    | égal                |
| !=    | différent           |
| <     | inférieur à         |
| <=    | inférieur ou égal à |
| >     | supérieur à         |
| >=    | supérieur ou égal à |
| ==    | égal                |
| &     | et                  |
| |     | ou                  |
| !     | pas                |

:::

```{r, echo=TRUE, eval=FALSE}
# Individus de l'espece Adelie
pingouins_propre[pingouins_propre$espece == "Adelie", ]

# Indivus de l'espece Adelie vivant sur l'ile Biscoe
pingouins_propre[pingouins_propre$espece == "Adelie" & pingouins_propre$ile == "Biscoe", ]

# Individus dont la masse est d'au moins 5 kgs
pingouins_propre[pingouins_propre$masse_corporelle_g >= 5000, ]

# Individus dont le bec mesure moins de 40mm de long et ne vivant pas sur l'ile Biscoe
pingouins_propre[pingouins_propre$espece == "Adelie" & pingouins_propre$ile != "Biscoe", ]
```

<br>

# Représenter des données