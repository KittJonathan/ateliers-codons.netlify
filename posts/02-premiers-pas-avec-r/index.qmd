---
title: "Premiers pas avec R"
subtitle: "Se familiariser avec R et manipuler des données"
author:
  - Gergana Daskalova
  - Jonathan Kitt (adaptation)
date: "2022-10-13"
categories: [R, RStudio, bases]
# image: "pexels-marta-branco-1194713.jpg"
format: 
  html: 
    toc: true
    toc-depth: 2
    toc-title: "Sommaire"
---

*Ce tutoriel est adapté de [Getting started with R and RStudio](https://ourcodingclub.github.io/tutorials/intro-to-r/) du site [Our Coding Club](https://ourcodingclub.github.io/).*

<br>

::: {.callout-note icon="true"}
## Note

Pour savoir comment installer R et RStudio, cliquez [ici](https://ateliers-codons.netlify.app/posts/01-installer-r-et-rstudio/)
:::

<br>

# Introduction {#r_intro}

## Qu'est-ce que R ? {#r_def}

<br>

R est un **langage de programmation statistique** qui a rapidement gagné en popularité dans de nombreux domaines scientifiques.

Il a été développé par **Ross Ihaka** et **Robert Gentleman**, du Département de Statistiques de l'Université d'Auckland, comme **implémentation libre du langage de programmation S**.

<br>

::: {.callout-tip icon="true"}
## Quelques dates

|      |                                                                                                                                     |
|------------------|------------------------------------------------------|
| 1991 | Création du langage R                                                                                                               |
| 1993 | R est dévoilé au public                                                                                                             |
| 1996 | [Article dans le *Journal of Computational and Graphical Statistics*](https://www.stat.auckland.ac.nz/~ihaka/downloads/R-paper.pdf) |
:::

<br>

R désigne également le **logiciel** qui utilise ce langage pour des calculs statistiques (et tout un tas d'autres applications !).

Il dispose d'une **communauté** en ligne très active ainsi que d'**extensions** pour presque tous les domaines et applications possibles et imaginables.

<br>

Contrairement à d'autres logiciels de statistiques comme Minitab ou SPSS, R peut être exécuté entièrement en **ligne de commande** et ne nécessite pas d'interface graphique, ce qui lui confère une **grande flexibilité**.

<br>

::: {.callout-tip icon="true"}
## Quelques avantages de R

-   C'est un outil **libre et open source** (tout le monde peut utiliser le code et voir comment il fonctionne)\
-   C'est un langage de programmation plutôt qu'une interface graphique, ce qui permet à l'utilisateur de sauvegarder facilement des **scripts** sous forme de texte pour les ré-utiliser ou les partager\
-   Beaucoup de personnes l'utilisent dans beaucoup de domaines différents - **il est rare d'être confronté à un problème qui n'a jamais été résolu !**
:::

<br>

## Naviguer dans RStudio {#naviguer_rstudio}

<br>

En ouvrant RStudio, vous verrez une fenêtre comme celle ci-dessous, qui se divise en trois panneaux :

![](img/rstudio_01.png){width="100%"}

<br>

### La console

Vous pouvez y taper du code et l'exécuter en appuyant sur `Entrée`.

Lors du lancement d'une session RStudio, elle affiche également des informations comme la version de R présente sur votre ordinateur et des indications sur la manière d'obtenir de l'aide.

::: {.callout-tip icon="true"}
## L'invite de commande

Dans la console, une ligne commence par `>` : c'est ce qu'on appelle l'**invite de commande**. Cela indique que R est prêt à recevoir vos instructions !

Tapez `2+2` puis appuyez sur `Entrée` : la console affiche le résultat.
:::

### L'environnement

L'environnement affiche le contenu de votre espace de travail : données importées, objets créés, fonctions définies, ...

::: {.callout-tip icon="true"}
## Un langage orienté objet

R est un langage orienté objet, ce qui veut dire que tout ce que vous manipulez dans R est stocké dans un objet.
:::

D'autres onglets vous permettent d'accéder à l'historique des commandes ou encore à des tutoriels (pour les versions les plus récentes de RStudio).

### Le navigateur

Ce navigateur vous permet de navigeur dans vos dossiers, de copier, renommer ou supprimer des fichiers, à la manière d'un explorateur classique.

Les autres onglets permettent de visualiser les graphiques ou encore d'afficher l'aide.

### Le script

::: {.callout-important icon="true"}
## Important

Le code tapé et exécuté dans la console ne sera plus disponible quand vous quitterez votre session RStudio. A la manière d'un document Word, un script vous permet de sauvegarder votre code afin d'y accéder ultérieurement ou de le partager.
:::

Pour ouvrir un nouveau script, cliquez sur le "plus" dans le coin supérieur gauche de la fenêtre RStudio puis sur **R Script**.

![](img/rstudio_09.png){width="100%"}

::: {.callout-tip icon="true"}
## Raccourcis clavier : nouveau script

Pour ouvrir un nouveau script, utilisez la combinaison **Ctrl + Shift + N**
:::

Un nouveau panneau s'affiche :

![](img/rstudio_10.png){width="100%"}

<br>

# Organiser son travail

## Créer un projet

Pour éviter de perdre du temps à chercher des fichiers dont on a oublié le nom et l'emplacement, il est utile d'organiser son travail à l'aide de **projets**.

Pour créer un projet, cliquez sur **File** puis **New project...** :

![](img/rstudio_02.png){width="100%"}

Choisissez **New Directory** puis **New Project**

![](img/rstudio_03.png){width="100%"}

![](img/rstudio_04.png){width="100%"}

Dans la fenêtre **Create New Project**, attribuez un nom et un emplacement au projet, puis cliquez sur **Create project**

![](img/rstudio_05.png){width="100%"}

Quand vous voudrez travailler à nouveau sur ces données, il vous suffira de double-cliquer sur le fichier `.Rproj` pour ouvrir le projet et accéder à tout ce qu'il contient.

![](img/rstudio_06.png){width="100%"}

::: {.callout-caution icon="true"}
## Bonne pratiques : nommer ses fichiers et dossiers

Pour vous simplifier la vie, voici quelques recommandations :

-   privilégiez les noms courts et explicites (à éviter : *fichier_2e_version_a\_verifier.txt*)
-   ne mettez ni espace ni caractères spéciaux (accents, symboles, ...)\
-   pour les dates, privilégiez le format **AAAAMMJJ** (année, mois, jour)
-   mettez l'élément le plus important en premier (par exemple : *projet_date_contenu*)\
-   optez pour l'une de ces deux conventions d'écritre : **camel case** (*MonProjet*) ou **snake case** (*mon_projet*)

Une fois que vous avez trouvé une façon de procéder, utlisez-la pour l'ensemble de vos fichiers afin de rester cohérent !
:::

## Créer une arborescence

Il est toujours préférable de passer un peu de temps à bien organiser un projet lors de sa création, plutôt que de passer beaucoup de temps par la suite à déplacer des fichiers, les renommer, les rechercher, ...

Pour créer un nouveau dossier dans votre projet, cliquez sur **New Folder** dans l'onglet **Files** du navigateur : ![](img/rstudio_07.png){width="100%"}

L'organisation proposée ci-dessous est utilisable dans une très grande majorité de cas :

-   **raw** : contient les données brutes qui seront utilisées mais laisées en l'état.\
-   **data** : contient les données issues de la manipulation des données brutes (sous-ensembles, données corrigées, renommées, nouvelles variables calculées, ...)\
-   **scripts** : contient le code utilisé pour manipuler les données, générer les figures, rédiger les rapports, ...
-   **resultats** : contient les fichiers de résultats issus de l'analyse.
-   **figures** : contient les graphiques et figures générées lors de l'analyse.\
-   **docs** : contient les rapports rédigés au cours de l'analyse, les présentations de résultats, des articles en lien avec l'analyse, les documents concernant les outils utlisés, ...

![](img/rstudio_08.png){width="100%"}

# Flux de travail

## Importer les données

Si ce n'est pas encore fait, ouvrez un nouveau script.

::: {.callout-caution icon="true"}
## Bonne pratiques : commenter ses scripts

Prenez dès maintenant l'habitude de commenter vos scripts. Il s'agit de rédiger des commentaires qui expliquent ce que fait votre code, pour le rendre plus compréhensible par vos collègues - et par vous-même quand vous reviendrez sur un script après un certain temps ! Pour ajouter un commentaire, utiliser un `#` au début d'une ligne puis rédigez votre commentaire. Dans R, un code placé après un `#` n'est pas exécuté :

```{r, echo=TRUE, eval=FALSE}
# Ceci est un commentaire qui ne sera pas exécuté
# La ligne suivante sera exécutée
2 + 2
```
:::

Pour commencer, ajoutons des informations en haut de notre script :

```{r, echo=TRUE, eval=FALSE}
# Ateliers codons
# 01 - Premiers pas avec R
# 2022-11-07
```

::: {.callout-tip icon="true"}
## Raccourcis clavier : commentaires

Pour commenter ou dé-commenter une ligne de code, utilisez la combinaison **Ctrl + Shift + C**.
:::

Le jeu de données que nous allons utiliser contient des mesures pour [trois espèces de pingouins vivant sur l'archipel Palmer en Antarctique](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0090081).

Pour importer ces données, nous allons faire appel à la **fonction `read.csv()`** qui, comme son nom l'indique, permet de lire un fichier au format *.csv*. Une fonction permet d'exécuter une action comme calculer une somme, importer ou exporter un fichier.

Toutes les fonctions s'utilisent de la même façon :

```{r, echo=TRUE, eval=FALSE}
fonction(x, arguments)
```

-   un appel à la fonction en tapant son nom

Entre **parenthèses** :

-   les données sur lesquelles appliquer la fonction (**x**)\
-   les **arguments**, obligatoires ou optionnels, qui vont modifier la manière dont la fonction sera exécutée.

Voyons ce que fait la fonction `read.csv()`. Nous allons préciser deux arguments :

-   le chemin vers le fichier à importer, **entre guillemets** :`"raw/pingouins.csv"`\
-   l'argument `check.names = FALSE` pour garder les noms de colonnes tels quels.

Tapez le code suivant dans la console et appuyez sur **Entrée** :

```{r, echo=TRUE, eval=FALSE}
read.csv(file = "raw/pingouins.csv", check.names = FALSE)
```

```{r, echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE, results='hide'}
read.csv("../../raw/pingouins.csv", check.names = FALSE)
```

![](img/rstudio_20.png){width="100%"}

::: {.callout-caution icon="true"}
## Bonne pratiques : auto-complétion

R vous aide à compléter votre code : tapez `re` puis **Tab**, et vous verrez s'afficher une liste de fonctions ou d'objets commençant par ces deux lettres. Vous pouvez naviguer à l'aide des flèches haut et bas et valider votre choix en appuyant à nouveau sur **Tab**. Cette fonctionnalité de R est particulièrement utile lorsque vous manipulez des fichiers ou objets ayant des noms complexes.
:::

Le fichier a effectivement été importé dans R, mais il n'est pour l'instant pas stocké dans notre environnement. Nous allons pour cela stocker le contenu du fichier dans un objet à l'aide de la **flèche d'assignation `<-`**. Placez-vous dans votre script et tapez le code suivant :

```{r, echo=TRUE, eval=FALSE}
pingouins <- read.csv(file = "raw/pingouins.csv", check.names = FALSE)
```

::: {.callout-tip icon="true"}
## Raccourcis clavier : flèche d'assignation

Pour insérer une flèche d'assignation, utilisez la combinaison **Alt + "-"** (tiret du 6).
:::

Exécutez cette fonction en plaçant le curseur sur la ligne et en cliquant sur **Run** :

![](img/rstudio_11.png){width="100%"}

::: {.callout-tip icon="true"}
## Raccourcis clavier : exécuter du code

Pour exécuter une ou plusieurs lignes de code, sélectionnez les lignes et utilisez la combinaison **Ctrl + Entrée**
:::

Notre environnement contient maintenant un objet **pingouins**, et vous pouvez voir l'indication `344 obs. of 9 variables` : le jeu de données contient 344 observations (lignes) et 9 variables (colonnes).

![](img/rstudio_12.png){width="100%"}

En cliquant sur la flèche bleue à gauche du nom de l'objet, vous aurez accès à plus d'informations :

![](img/rstudio_13.png){width="100%"}

-   **Noms des variables** : le tableau contient 9 variables dont les noms sont précédés du signe **\$**.

::: {.callout-tip icon="true"}
## L'opérateur **\$**

Cet opérateur permet de sélectionner la colonne d'un tableau. Dans la console, tapez `pingouins$` et appuyez sur **Tab**.

![](img/rstudio_15.png){width="100%"} Vous pouvez choisir la variable qui vous intéresse à l'aide des **flèches haut et bas** (*Espece* par exemple) puis appuyer à nouveau sur **Tab** pour valider. Vous verrez alors s'afficher les 344 observations de cette variable. ![](img/rstudio_16.png){width="100%"}
:::

-   **Types des variables** : indique s'il s'agit d'une variable de type **caractère (`chr`)**, d'une variable contenant des **nombres entiers (`int`)** ou des **nombres décimaux (`num`)**. Une variable peut également être de type **logique (`log`)** (*TRUE* ou *FALSE*).

-   **Premiers éléments de chaque variable**.

Vous pouvez afficher le tableau en cliquant sur l'icône à droite du nom de l'objet dans l'environnement :

![](img/rstudio_14.png){width="100%"}

Cela ouvre un nouvel onglet à côté de de votre script :

![](img/rstudio_17.png){width="100%"}

Avant d'aller plus loin, sauvegardez votre script en cliquant sur l'icône disquette en haut de votre script :

![](img/rstudio_18.png){width="100%"}

Choisissez le dossier où sera sauvegardé votre script - **scripts** dans notre cas, et nommez votre script puis cliquez sur **Save** :

![](img/rstudio_19.png){width="100%"}

::: {.callout-tip icon="true"}
## Raccourcis clavier : sauvegarder un script

Pour sauvegarder un script, uilisez la combinaison **Ctrl + S**
:::

## Explorer les données

Une des premières choses à faire est de vous assurer que vos données ont été correctement importées. Les outils proposés par R vous permettent d'effectuer des analyses, mais c'est à vous de vous assurer que vos données sont au bon format.

Pour cette étape d'exploration des données, vous pouvez taper le code directement dans la console. 

Plusieurs fonctions vous permettent d'explorer rapidement vos données : 

```{r, echo=TRUE, eval=FALSE}
# Afficher les premieres lignes du tableau
head(pingouins)

# Afficher les dernieres lignes du tableau
tail(pingouins)

# Afficher la structure du tableau
str(pingouins)
```

Vous remarquerez que la fonction `str(pingouins)` affiche des informations très proches de celles obtenues en cliquant sur la flèche bleue à gauche de l'objet pingouins dans l'environnement.

::: {.callout-tip icon="true"}
## Afficher l'aide d'une fonction

Vous pouvez afficher l'aide d'une fonction de deux manières :  
- taper `help(fonction)` (pensez à l'auto-complétion !) 
- taper `?fonction`

Essayez en tapant dans la console `?he` puis appuyez sur **Tab** : R vous propose une liste de fonctions commençant par **he**. Utilisez les flèches haut et bas pour choisir la fonction **head**. Une petite fenêtre vous donne un aperçu du contenu de l'aide pour la fonction (utile quand vous hésitez entre plusieurs fonctions). Une fois la fonction sélectionnée, appuyez sur la touche **F1** pour afficher l'aide complète dans l'onglet **Help**.

L'aide d'une fonction contient plusieurs paragraphes :  

- une **description** de la fonction  
- **comment utiliser** la fonction  
- les **arguments** de la fonction  
- les **détails** de la fonction (quel type de données en entrée, des précisions sur les arguments, ...)  
- ce que la fonction retourne en **sortie**  
- des **notes** additionnelles  
- les **auteurs** qui ont contribué à l'écriture du code de la fonction  
- des **exemples** sur l'utilisation de la fonction (avec possibilité d'exécuter ces exemples)

Dans le cas de `head()`, vous pouvez voir que par défaut, la fonction retournera les 6 premières lignes (`n = 6L`, **L** indiquant qu'il s'agit d'un nombre entier). Pour afficher uniquement les deux premières lignes du tableau *pingouins*, il vous faudrait modifier cet argument : `head(pingouins, n = 2L)`

:::

Vous pouvez explorer une variable d'intérêt : 

```{r, echo=TRUE, eval=FALSE}
# Afficher les premiers elements d'une variable
head(pingouins$`Masse corporelle (g)`)

# Afficher les derniers elements d'une variable
tail(pingouins$`Masse corporelle (g)`)

# Afficher le type, le nombre d'elements et les premiers elements d'une variable
str(pingouins$`Masse corporelle (g)`)

# Afficher le type de variable
typeof(pingouins$`Masse corporelle (g)`)
```

::: {.callout-tip icon="true"}
## Les données manquantes

Si vous tapez `head(pingouins$`Masse corporelle (g)`)` dans la console, vous verrez un élément **NA**. Il s'agit d'une donnée manquante (**Not Available**) : aucune mesure n'a été relevée chez cet individu pour cette variable. 

Cette valeur **NA** est à différencier de la valeur **NaN (Not a Number)** également rencontrée dans R. Il s'agit alors du résultat d'une opération arithmétique invalide, telle que 0/0.
:::

La fonction `dim(pingouins)` permet d'afficher les **dimensions** du tableau (toujours dans le même ordre : **m lignes** et **n colonnes**).

La fonction `summary(pingouins)` est particulièrement intéressante pour avoir une vue d'ensemble de vos données.

![](img/rstudio_22.png){width="100%"}