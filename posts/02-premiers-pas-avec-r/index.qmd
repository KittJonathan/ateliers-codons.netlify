---
title: "Premiers pas avec R"
subtitle: "Se familiariser avec R et manipuler des données"
author:
  - Gergana Daskalova
  - Jonathan Kitt (adaptation)
date: "2022-10-13"
categories: [R, RStudio, bases]
# image: "pexels-marta-branco-1194713.jpg"
format: 
  html: 
    toc: true
    toc-depth: 1
    toc-title: "Sommaire"
---

*Ce tutoriel est adapté de [Getting started with R and RStudio](https://ourcodingclub.github.io/tutorials/intro-to-r/) du site [Our Coding Club](https://ourcodingclub.github.io/).*

<br>

::: {.callout-note icon="true"}

## Note

Pour savoir comment installer R et RStudio, cliquez [ici](https://ateliers-codons.netlify.app/posts/01-installer-r-et-rstudio/)

:::

<br>

# Naviguer dans RStudio {#naviguer_rstudio}

<br>

En ouvrant RStudio, vous verrez une fenêtre comme celle ci-dessous, qui se divise en trois panneaux : 

![](img/rstudio_01.png){width="100%"}

<br>

## La console

Vous pouvez y taper du code et l'exécuter en appuyant sur `Entrée`. 

Lors du lancement d'une session RStudio, elle affiche également des informations comme la version de R présente sur votre ordinateur et des indications sur la manière d'obtenir de l'aide.

::: {.callout-tip icon="true"}

## L'invite de commande

Dans la console, une ligne commence par `>` : c'est ce qu'on appelle l'**invite de commande**. Cela indique que R est prêt à recevoir vos instructions !

Tapez `2+2` puis appuyez sur `Entrée` : la console affiche le résultat.

:::


## L'environnement

L'environnement affiche le contenu de votre espace de travail : données importées, objets créés, fonctions définies, ...

::: {.callout-tip icon="true"}

## Un langage orienté objet

R est un langage orienté objet, ce qui veut dire que tout ce que vous manipulez dans R est stocké dans un objet.

:::

D'autres onglets vous permettent d'accéder à l'historique des commandes ou encore à des tutoriels (pour les versions les plus récentes de RStudio).

## Le navigateur

Ce navigateur vous permet de navigeur dans vos dossiers, de copier, renommer ou supprimer des fichiers, à la manière d'un explorateur classique.

Les autres onglets permettent de visualiser les graphiques ou encore d'afficher l'aide.

# Organiser ses fichiers

## Créer un projet

Pour éviter de perdre du temps à chercher des fichiers dont on a oublié le nom et l'emplacement, il est utile d'organiser son travail à l'aide de **projets**. 

Pour créer un projet, cliquez sur **File** puis **New project...** : 

![](img/rstudio_02.png){width="100%"}

Choisissez **New Directory** puis **New Project**

![](img/rstudio_03.png){width="100%"}

![](img/rstudio_04.png){width="100%"}

Dans la fenêtre **Create New Project**, attribuez un nom et un emplacement au projet, puis cliquez sur **Create project**

![](img/rstudio_05.png){width="100%"}

::: {.callout-caution icon="true"}

## Bonne pratiques : nommer ses fichiers

Pour vous simplifier la vie, voici quelques recommandations : 

- privilégiez les noms courts et explicites (à éviter : *fichier_2e_version_a_verifier.txt*)
- ne mettez ni espace ni caractères spéciaux (accents, symboles, ...)  
- pour les dates, privilégiez le format **AAAAMMJJ** (année, mois, jour)
- mettez l'élément le plus important en premier (par exemple : *projet_date_contenu*)  
- optez pour l'une de ces deux conventions d'écritre : **camel case** (*MonProjet*) ou **snake case** (*mon_projet*)

Une fois que vous avez trouvé une façon de procéder, utlisez-la pour l'ensemble de vos fichiers afin de rester cohérent !

:::

Quand vous voudrez travailler à nouveau sur ces données, il vous suffira de double-cliquer sur le fichier `.Rproj` pour ouvrir le projet et accéder à tout ce qu'il contient.

![](img/rstudio_06.png){width="100%"}

## Créer une arborescence

Il est toujours préférable de passer un peu de temps à bien organiser un projet lors de sa création, plutôt que de passer beaucoup de temps par la suite à déplacer des fichiers, les renommer, les rechercher, ...

Pour créer un nouveau dossier dans votre projet, cliquez sur **New Folder** dans l'onglet **Files** du navigateur : 
![](img/rstudio_07.png){width="100%"}

L'organisation proposée ci-dessous est utilisable dans une très grande majorité de cas : 

- **raw** : contient les données brutes qui seront utilisées mais laisées en l'état.  
- **data** : contient les données issues de la manipulation des données brutes (sous-ensembles, données corrigées, renommées, nouvelles variables calculées, ...)  
- **R** : contient le code utilisé pour manipuler les données, générer les figures, rédiger les rapports, ... 
- **resultats** : contient les fichiers de résultats issus de l'analyse.
- **figures** : contient les graphiques et figures générées lors de l'analyse.  
- **docs** : contient les rapports rédigés au cours de l'analyse, les présentations de résultats, des articles en lien avec l'analyse, les documents concernant les outils utlisés, ...  
  
![](img/rstudio_08.png){width="100%"}

# Utiliser un script 

::: {.callout-important icon="true"}

### Important

Le code tapé et exécuté dans la console ne sera plus disponible quand vous quitterez votre session RStudio. A la manière d'un document Word, un script vous permet de sauvegarder votre code afin d'y accéder ultérieurement ou de le partager.

:::

Pour ouvrir un nouveau script, cliquez sur le "plus" dans le coin supérieur gauche de la fenêtre RStudio puis sur **R Script**.

![](img/rstudio_09.png){width="100%"}

::: {.callout-tip icon="true"}

## Raccourcis clavier : nouveau script

Pour ouvrir un nouveau script, utilisez la combinaison **Ctrl + Shift + N**

:::

Un nouveau panneau s'affiche : 

![](img/rstudio_10.png){width="100%"}

::: {.callout-caution icon="true"}

## Bonne pratiques : commenter ses scripts

Prenez dès maintenant l'habitude de commenter vos scripts. Il s'agit de rédiger des commentaires qui expliquent ce que fait votre code, pour le rendre plus compréhensible par vos collègues - et par vous-même quand vous reviendrez sur un script après un certain temps ! Pour ajouter un commentaire, utiliser un `#` au début d'une ligne puis rédigez votre commentaire. Dans R, un code placé après un `#` n'est pas exécuté : 

```{r, echo=TRUE, eval=FALSE}
# Ceci est un commentaire qui ne sera pas exécuté
# La ligne suivante sera exécutée
2 + 2
```

:::

Pour commencer, ajoutons des informations en haut de notre script : 

```{r, echo=TRUE, eval=FALSE}
# Ateliers codons
# 01 - Premiers pas avec R
# 2022-10-14
```

::: {.callout-tip icon="true"}

## Raccourcis clavier : commentaires

Pour commenter ou dé-commenter une ligne de code, utilisez la combinaison **Ctrl + Shift + C**.

:::

# Manipuler des données 

## Importer un jeu de données

Nous allons analyser une liste d'espèces d'oiseaux menacées en Auvergne (données de 2015 obtenues sur le site de la [DREAL](https://www.auvergne-rhone-alpes.developpement-durable.gouv.fr/liste-rouge-des-oiseaux-d-auvergne-a9939.html)).

Ces données se trouvent dans un fichier appelé `oiseaux.csv`, disponible en ligne, que nous allons télécharger.

Nous allons pour cela utiliser une **fonction** de R. Une fonction permet d'exécuter une action : calculer une somme, importer ou exporter un fichier, ajouter une colonne dans un tableau, ... 

Toutes les fonctions se présentent de la façon suivante : 

```{r, echo=TRUE, eval=FALSE}
ma_fonction(data, arguments, ...)
```

On fait appel à la fonction en tapant son nom, puis on précise les arguments de la fonction entre parenthèses. Un argument peut être obligatoire ou optionnel, et modifie la façon dont la fonction est exécutée.

Notre première ligne de code va donc télécharger le fichier `oiseaux.csv` et stocker ce fichier dans un objet de notre environnement R : nous assignons le fichier à l'objet. Cette opération s'effectue à l'aide de la flèche d'assignation `<-` : 

```{r, echo=TRUE, eval=TRUE}
# Importer la liste d'especes d'oiseaux menacees en Auvergne
oiseaux <- read.csv("https://raw.githubusercontent.com/codons-blog/C-01-PremiersPas/main/oiseaux.csv")
```

