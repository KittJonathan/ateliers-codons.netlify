{
  "hash": "2c50ad0f409c451adcc40a0cc23d6209",
  "result": {
    "markdown": "---\ntitle: \"Premiers pas avec R\"\nsubtitle: \"Se familiariser avec R, manipuler des données et les représenter\"\nauthor:\n  - Gergana Daskalova\n  - Jonathan Kitt (adaptation)\ndate: \"2022-10-13\"\ncategories: [R, RStudio, bases]\nformat: \n  html: \n    toc: true\n    toc-depth: 2\n    toc-title: \"Sommaire\"\n---\n\n::: {.cell}\n\n:::\n\n\n*Ce tutoriel est adapté de [Getting started with R and RStudio](https://ourcodingclub.github.io/tutorials/intro-to-r/) du site [Our Coding Club](https://ourcodingclub.github.io/).*\n\n<br>\n\n::: {.callout-note icon=\"true\"}\n## Note\n\nPour savoir comment installer R et RStudio, cliquez [ici](https://ateliers-codons.netlify.app/posts/01-installer-r-et-rstudio/)\n:::\n\n<br>\n\n# Introduction {#r_intro}\n\n## Qu'est-ce que R ? {#r_def}\n\n<br>\n\nR est un **langage de programmation statistique** qui a rapidement gagné en popularité dans de nombreux domaines scientifiques.\n\nIl a été développé par **Ross Ihaka** et **Robert Gentleman**, du Département de Statistiques de l'Université d'Auckland, comme **implémentation libre du langage de programmation S**.\n\n<br>\n\n::: {.callout-tip icon=\"true\"}\n## Quelques dates\n\n|      |                         |\n|------|-------------------------|\n| 1991 | Création du langage R   |\n| 1993 | R est dévoilé au public |\n| 1996 | [Article dans le *Journal of Computational and Graphical Statistics*](https://www.stat.auckland.ac.nz/~ihaka/downloads/R-paper.pdf) |\n:::\n\n<br>\n\nR désigne également le **logiciel** qui utilise ce langage pour des calculs statistiques (et tout un tas d'autres applications (calculs, graphiques, ...).\n\nIl dispose d'une **communauté** en ligne très active ainsi que d'**extensions** pour presque tous les domaines et applications possibles et imaginables (cartographie, fouille de texte, modélisation, ...).\n\n<br>\n\nContrairement à d'autres logiciels de statistiques comme Minitab ou SPSS, R peut être exécuté entièrement en **ligne de commande** et ne nécessite pas d'interface graphique, ce qui lui confère une **grande flexibilité**.\n\n<br>\n\n::: {.callout-tip icon=\"true\"}\n## Quelques avantages de R\n\n-   C'est un outil **libre et open source** (tout le monde peut utiliser le code et voir comment il fonctionne)\\\n-   C'est un langage de programmation plutôt qu'une interface graphique, ce qui permet à l'utilisateur de sauvegarder facilement des **scripts** sous forme de texte pour les ré-utiliser ou les partager\\\n-   Beaucoup de personnes l'utilisent dans beaucoup de domaines différents - **il est rare d'être confronté à un problème qui n'a jamais été résolu !**\n:::\n\n<br>\n\n## Naviguer dans RStudio {#naviguer_rstudio}\n\n<br>\n\nEn ouvrant RStudio, vous verrez une fenêtre comme celle ci-dessous, qui se divise en trois panneaux :\n\n![](img/rstudio_01.png){width=\"100%\"}\n\n<br>\n\n### La console\n\nVous pouvez y taper du code et l'exécuter en appuyant sur `Entrée`.\nQuand vous démarrez une nouvelle session dans RStudio, la console affiche également des informations comme la version de R présente sur votre ordinateur ainsi que des indications sur la manière d'obtenir de l'aide.\n\n::: {.callout-tip icon=\"true\"}\n## L'invite de commande\n\nDans la console, une ligne commence par `>` : c'est ce qu'on appelle l'**invite de commande**. Cela indique que R est prêt à recevoir vos instructions !\n\nTapez `2+2` puis appuyez sur `Entrée` : la console affiche le résultat.\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\nDans la console, vous pouvez parcourir les dernières commandes exécutées à l'aide des flèches haut et bas.\n\n:::\n\n<br>\n\n### L'espace de travail\n\nVous y trouverez votre environnement (données importées, objets créés, fonctions définies, ...), ainsi que d'autres onglets comme l'historique des commandes exécutées ou l'accès à des tutoriels (pour les versions récentes de RStudio).\n\n::: {.callout-tip icon=\"true\"}\n## Un langage orienté objet\n\nR est un langage orienté objet, ce qui veut dire que tout ce que vous manipulez dans R est stocké dans un objet.\n:::\n\nD'autres onglets vous permettent d'accéder à l'historique des commandes ou encore à des tutoriels (pour les versions les plus récentes de RStudio).\n\n<br>\n\n### Le navigateur\n\nCe navigateur vous permet de navigeur dans vos dossiers, de copier, renommer ou supprimer des fichiers, à la manière d'un explorateur classique.\n\nLes autres onglets permettent de visualiser les graphiques ou encore d'afficher l'aide.\n\n<br>\n\n### Le script\n\n::: {.callout-important icon=\"true\"}\n## Important\n\nLe code tapé et exécuté dans la console ne sera plus disponible quand vous quitterez votre session RStudio. A la manière d'un document Word, un script vous permet de sauvegarder votre code afin d'y accéder ultérieurement ou de le partager.\n:::\n\nPour ouvrir un nouveau script, cliquez sur le \"plus\" dans le coin supérieur gauche de la fenêtre RStudio puis sur **R Script**.\n\n![](img/rstudio_09.png){width=\"75%\"}\n\n<br>\n\n::: {.callout-tip icon=\"true\"}\n## Raccourcis clavier : nouveau script\n\nPour ouvrir un nouveau script, utilisez la combinaison **Ctrl + Shift + N**\n:::\n\n<br>\n\nUn nouveau panneau s'affiche :\n\n![](img/rstudio_10.png){width=\"100%\"}\n\n<br>\n\n# Organiser son travail\n\n## Créer un projet\n\n<br>\n\nPour éviter de perdre du temps à chercher des fichiers dont on a oublié le nom et l'emplacement, il est utile d'organiser son travail à l'aide de **projets**.\n\nPour créer un projet, cliquez sur **File** puis **New project...** :\n\n![](img/rstudio_02.png){width=\"75%\"}\n\nChoisissez **New Directory** puis **New Project**\n\n::: {layout-ncol=2}\n\n![](img/rstudio_03.png){}\n\n![](img/rstudio_04.png){}\n:::\n\n\nDans la fenêtre **Create New Project**, attribuez un nom et un emplacement au projet, puis cliquez sur **Create project**\n\n![](img/rstudio_05.png){width=\"75%\"}\n\nQuand vous voudrez travailler à nouveau sur ces données, il vous suffira de double-cliquer sur le fichier `.Rproj` pour ouvrir le projet et accéder à tout ce qu'il contient.\n\n![](img/rstudio_06.png){width=\"75%\"}\n\n<br>\n\n::: {.callout-caution icon=\"true\"}\n## Bonnes pratiques : nommer ses fichiers et dossiers\n\nPour vous simplifier la vie, voici quelques recommandations :\n\n-   privilégiez les noms courts et explicites (à éviter : *fichier_2e_version_a\\_verifier.txt*)\n-   ne mettez ni espace ni caractères spéciaux (accents, symboles, ...)\\\n-   pour les dates, privilégiez le format **AAAAMMJJ** (année, mois, jour)\n-   mettez l'élément le plus important en premier (par exemple : *projet_date_contenu*)\\\n-   optez pour l'une de ces deux conventions d'écritre : **camel case** (*MonProjet*) ou **snake case** (*mon_projet*)\n\nUne fois que vous avez trouvé une façon de procéder, utlisez-la pour l'ensemble de vos fichiers afin de rester cohérent !\n:::\n\n<br>\n\n## Créer une arborescence\n\nIl est toujours préférable de passer un peu de temps à bien organiser un projet lors de sa création, plutôt que de passer beaucoup de temps par la suite à déplacer des fichiers, les renommer, les rechercher, ...\n\nPour créer un nouveau dossier dans votre projet, cliquez sur **New Folder** dans l'onglet **Files** du navigateur : \n\n![](img/rstudio_07.png){width=\"100%\"}\n\nL'organisation proposée ci-dessous est utilisable dans une très grande majorité de cas :\n\n|         |     |\n| ------- | --- |\n| **raw** | données brutes |\n| **data** | donnéées issues de la manipulation/modification des données brutes |\n| **scripts** | code utilisé pour analyser les données, créer les graphiques, ... |\n| **results** | fichiers de résultats obtenus durant l'analyse |\n| **figures** | graphiques générés au cours de l'analyse |\n| **docs** | rapports, présentations de résultats, articles en lien avec l'analyse, documents concernant les outils utilisés, ... |\n\n![](img/rstudio_08.png){width=\"100%\"}\n\n<br>\n\n# Importer les données\n\nSi ce n'est pas encore fait, ouvrez un nouveau script.\n\n::: {.callout-caution icon=\"true\"}\n## Bonnes pratiques : commenter ses scripts\n\nPrenez dès maintenant l'habitude de commenter vos scripts. Il s'agit de rédiger des commentaires qui expliquent ce que fait votre code, pour le rendre plus compréhensible par vos collègues - et par vous-même quand vous reviendrez sur un script après un certain temps !\n\nPour ajouter un commentaire, utilisez un `#` au début d'une ligne puis rédigez votre commentaire. Dans R, un code placé après un `#` n'est pas exécuté :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ceci est un commentaire qui ne sera pas exécuté\n# La ligne suivante sera exécutée\n2 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n:::\n\n<br>\n\nPour commencer, ajoutons des informations en haut de notre script :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ateliers codons\n# Premiers pas avec R\n# 2022-11-07\n```\n:::\n\n\n<br>\n\n::: {.callout-tip icon=\"true\"}\n## Raccourcis clavier : commentaires\n\nPour commenter ou dé-commenter des lignes de code, utilisez la combinaison **Ctrl + Shift + C**.\n:::\n\n<br>\n\nLe jeu de données que nous allons utiliser contient des mesures pour [trois espèces de pingouins vivant sur l'archipel Palmer en Antarctique](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0090081).\n\nPour importer ces données, nous allons faire appel à la **fonction `read.csv()`** qui, comme son nom l'indique, permet de lire un fichier au format *.csv*. \n\nUne fonction permet d'exécuter une action comme calculer une somme, importer ou exporter un fichier, ...\n\nToutes les fonctions s'utilisent de la même façon :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfonction(x, arguments)\n```\n:::\n\n\nCette ligne de code débute par un appel à la fonction, en tapant le **nom de la fonction**, puis contient, **entre parenthèses** :\n\n-   les données sur lesquelles appliquer la fonction (**x**)\n-   les **arguments**, obligatoires ou optionnels, qui vont modifier la manière dont la fonction sera exécutée.\n\nVoyons ce que fait la fonction `read.csv()`. Nous allons préciser deux arguments :\n\n-   le chemin vers le fichier à importer, **entre guillemets** :`\"raw/pingouins.csv\"`\\\n-   l'argument `check.names = FALSE` pour garder les noms de colonnes tels quels.\n\nTapez le code suivant dans la console et appuyez sur **Entrée** :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread.csv(file = \"raw/pingouins.csv\", check.names = FALSE)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n![](img/rstudio_20.png){width=\"100%\"}\n<br>\n\n::: {.callout-caution icon=\"true\"}\n## Bonnes pratiques : auto-complétion\n\nR vous aide à compléter votre code : tapez `re` puis **Tab**, et vous verrez s'afficher une liste de fonctions ou d'objets commençant par ces deux lettres. Vous pouvez naviguer à l'aide des flèches haut et bas et valider votre choix en appuyant à nouveau sur **Tab**. Cette fonctionnalité de R est particulièrement utile lorsque vous manipulez des fichiers ou objets ayant des noms complexes.\n:::\n\nLe fichier a effectivement été importé dans R, mais il n'est pour l'instant pas stocké dans notre environnement. Nous allons pour cela stocker le contenu du fichier dans un objet à l'aide de la **flèche d'assignation `<-`**. Placez-vous dans votre script et tapez le code suivant :\n\n\n::: {.cell}\n\n```{.r .cell-code}\npingouins <- read.csv(file = \"raw/pingouins.csv\", check.names = FALSE)\n```\n:::\n\n\n::: {.callout-tip icon=\"true\"}\n## Raccourcis clavier : flèche d'assignation\n\nPour insérer une flèche d'assignation, utilisez la combinaison **Alt + \"-\"** (tiret du 6).\n:::\n\n<br>\n\nExécutez cette fonction en plaçant le curseur sur la ligne et en cliquant sur **Run** :\n\n![](img/rstudio_11.png){width=\"100%\"}\n\n::: {.callout-tip icon=\"true\"}\n## Raccourcis clavier : exécuter du code\n\nPour exécuter une ou plusieurs lignes de code, sélectionnez les lignes et utilisez la combinaison **Ctrl + Entrée**\n:::\n\nNotre environnement contient maintenant un objet **pingouins**, et vous pouvez voir l'indication `344 obs. of 9 variables` : le jeu de données contient 344 observations (lignes) et 9 variables (colonnes).\n\n![](img/rstudio_12.png){width=\"100%\"}\n\n<br>\n\nEn cliquant sur la flèche bleue à gauche du nom de l'objet, vous aurez accès à plus d'informations :\n\n![](img/rstudio_13.png){width=\"100%\"}\n\n<br>\n\n|                        |\n| -----------------------|\n| **noms** des variables (précédés du signe `$`) |\n| **types** des variables : caractère (chr), nombres entiers (int) ou décimaux (num), logique (log) |\n| **premiers éléments** de chaque variable |\n\n::: {.callout-tip icon=\"true\"}\n## L'opérateur **\\$**\n\nCet opérateur permet de sélectionner la colonne d'un tableau. Dans la console, tapez `pingouins$` et appuyez sur **Tab**.\n\n![](img/rstudio_15.png){width=\"75%\"} \n\nVous pouvez choisir la variable qui vous intéresse à l'aide des **flèches haut et bas** (*Espece* par exemple) puis appuyer à nouveau sur **Tab** pour valider. Vous verrez alors s'afficher les 344 observations de cette variable. ![](img/rstudio_16.png){width=\"100%\"}\n:::\n\n<br>\n\nVous pouvez afficher le tableau en cliquant sur l'icône à droite du nom de l'objet dans l'environnement :\n\n![](img/rstudio_14.png){width=\"100%\"}\n\n<br>\n\nCela ouvre un nouvel onglet à côté de de votre script :\n\n![](img/rstudio_17.png){width=\"100%\"}\n\n<br>\n\nAvant d'aller plus loin, sauvegardez votre script en cliquant sur l'icône disquette en haut de votre script :\n\n![](img/rstudio_18.png){width=\"100%\"}\n\nChoisissez le dossier où sera sauvegardé votre script - **scripts** dans notre cas, et nommez votre script puis cliquez sur **Save** :\n\n![](img/rstudio_19.png){width=\"100%\"}\n\n::: {.callout-tip icon=\"true\"}\n## Raccourcis clavier : sauvegarder un script\n\nPour sauvegarder un script, uilisez la combinaison **Ctrl + S**\n:::\n\n<br>\n\n# Explorer les données\n\nUne des premières choses à faire est de vous assurer que vos données ont été correctement importées. Les outils proposés par R vous permettent d'effectuer des analyses, mais c'est à vous de vous assurer que vos données sont au bon format.\n\nPour cette étape d'exploration des données, vous pouvez taper le code directement dans la console.\n\nPlusieurs fonctions vous permettent d'explorer rapidement vos données :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Afficher les premieres lignes du tableau\nhead(pingouins)\n\n# Afficher les dernieres lignes du tableau\ntail(pingouins)\n\n# Afficher la structure du tableau\nstr(pingouins)\n```\n:::\n\n\n<br>\n\nVous remarquerez que la fonction `str(pingouins)` affiche des informations très proches de celles obtenues en cliquant sur la flèche bleue à gauche de l'objet pingouins dans l'environnement.\n\n<br>\n\n::: {.callout-tip icon=\"true\"}\n## Afficher l'aide d'une fonction\n\nVous pouvez afficher l'aide d'une fonction de deux manières :\\\n- taper `help(fonction)` (pensez à l'auto-complétion !) - taper `?fonction`\n\nEssayez en tapant dans la console `?he` puis appuyez sur **Tab** : R vous propose une liste de fonctions commençant par **he**. Utilisez les flèches haut et bas pour choisir la fonction **head**. Une petite fenêtre vous donne un aperçu du contenu de l'aide pour la fonction (utile quand vous hésitez entre plusieurs fonctions). Une fois la fonction sélectionnée, appuyez sur la touche **F1** pour afficher l'aide complète dans l'onglet **Help**.\n\nL'aide d'une fonction contient plusieurs paragraphes :\n\n|     |     |\n| --- | --- | \n| **Description** | présentation sommaire de la fonction |\n| **Usage** | comment utiliser la fonction |\n| **Arguments** | les arguments obligatoires et/ou optionnels de la fonction |\n| **Details** | le format de données à fournir en entrée, des précisions sur les arguments, ... |\n| **Value** | le type d'objet obtenu en sortie |\n| **Note** | informations additionnelles |\n| **Author(s)** | les personnes ayant contribué à l'écriture du code de la fonction |\n| **Examples** | des exemples d'utilisation de la fonction, avec la possibilité d'exécuter ces exemples |\n\nDans le cas de `head()`, vous pouvez voir que par défaut, la fonction retournera les 6 premières lignes (`n = 6L`, **L** indiquant qu'il s'agit d'un nombre entier). Pour afficher uniquement les deux premières lignes du tableau *pingouins*, il vous faudrait modifier cet argument : `head(pingouins, n = 2L)`\n:::\n\n<br>\n\nVous pouvez explorer une variable d'intérêt :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Afficher les premiers elements d'une variable\nhead(pingouins$`Masse corporelle (g)`)\n\n# Afficher les derniers elements d'une variable\ntail(pingouins$`Masse corporelle (g)`)\n\n# Afficher le type, le nombre d'elements et les premiers elements d'une variable\nstr(pingouins$`Masse corporelle (g)`)\n\n# Afficher le type de variable\ntypeof(pingouins$`Masse corporelle (g)`)\n```\n:::\n\n\n::: {.callout-tip icon=\"true\"}\n## Les données manquantes\n\nVous pouvez trouver dans vos données des éléments notés **NA**. Il s'agit d'une donnée manquante (**Not Available**) : aucune donnée n'existe pour ce cas précis.\n\nCette valeur **NA** est à différencier de la valeur **NaN (Not a Number)** également rencontrée dans R. Il s'agit alors du résultat d'une opération arithmétique invalide, telle que 0/0.\n:::\n\n<br>\n\nLa fonction `dim(pingouins)` permet d'afficher les **dimensions** du tableau (**m lignes** et **n colonnes**).\n\nLa fonction `summary(pingouins)` est particulièrement intéressante pour avoir une vue d'ensemble de vos données.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(pingouins)\n```\n:::\n\n\n![](img/rstudio_22.png){width=\"100%\"}\n\nLes informations affichées à l'aide de cette fonction dépendent du type de variable :\n\n-   **nombre d'éléments, classe et mode** pour les variables de type **caractère**\\\n-   **statistiques** pour les variables de type **numérique**\n\n<br>\n\n# Manipuler des données\n\n## Sélectionner des données\n\nDans R, la sélection de données, que ce soit une cellule, une ligne ou une colonne d'un tableau, ou encore un élément dans une chaîne, s'effectue à l'aide des **crochets \\[\\]**.\n\n-   Dans le cas d'un objet à **deux dimensions**, la sélection s'effectue en précisant deux paramètres séparés par une virgule : la ou les ligne(s) et la ou les colonne(s). Pour sélectionner l'ensemble d'une des deux dimensions, on utilise un espace vide d'un côté ou de l'autre de la virgule. Pour sélectionner plusieurs lignes ou colonnes, vous pouvez utiliser soit l'opérateur `:` si les lignes ou les colonnes se suivent, soit l'opérateur de concaténation `c()` (vous pouvez combiner les deux).\n\n-   Pour un objet à **une seule dimension**, un seul paramètre est nécessaire (de la même façon, vous pouvez combiner les éléments avec les opérateurs `:` et `c()`) :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Selectionner la 3e ligne et la 5e colonne : \npingouins[3, 5]\n\n# Selectionner la 3e ligne : \npingouins[3, ]\n\n# Selectionner la 5e colonne : \npingouins[, 5]\n\n# Selectionner les lignes 40 à 45 : \npingouins[40:45, ]\n\n# Selectionner les colonnes 2 et 4 : \npingouins[, c(2, 4)]\n\n# Selectionner les lignes 50 et 100 à 105 : \npingouins[c(50, 100:105), ]\n  \n# Selectionner le 45e element de la variable Ile\npingouins$Ile[45]\n```\n:::\n\n\nLe jeu de données contient des informations dont nous n'aurons pas besoin pour la suite de l'analyse. Nous allons sélectionner les colonnes pour ne garder que celles qui nous intéressent, à savoir : \n\n- le nom de l'**espèce**  \n- l'**île**  \n- la **longueur du bec**  \n- la **hauteur du bec**  \n- la **longueur des ailes**  \n- la **masse corporelle**\n\nVous pouvez sélectionner les colonnes d'un tableau soit : \n- en utilisant les **noms des variables**  \n- en utilisant les **index des colonnes**\n\nLes deux commandes suivantes effectuent la même chose : \n\n\n::: {.cell}\n\n```{.r .cell-code}\npingouins[, c(\"Espece\", \"Ile\", \"Longueur Bec (mm)\", \"Hauteur Bec (mm)\",\n              \"Longueur Aile (mm)\", \"Masse corporelle (g)\")]\n\npingouins[, c(3:4, 6:9)]\n```\n:::\n\n\nAssignons ce nouveau tableau dans un objet : \n\n\n::: {.cell}\n\n```{.r .cell-code}\npingouins_propre <- pingouins[, c(\"Espece\", \"Ile\", \"Longueur Bec (mm)\",\n                                  \"Hauteur Bec (mm)\",\"Longueur Aile (mm)\",\n                                  \"Masse corporelle (g)\")]\n```\n:::\n\n\n\n## Transformer un vecteur en un facteur\n\n\n\nIl peut arriver que certaines variables soient mal catégorisées. Les deux cas de figure les plus répandus sont les suivants :\n\n-   les catégories d'une variable sont représentées par des valeurs numériques et R considère cette variable comme étant numérique (par exemple *Echantillon Numero*)\\\n-   les catégories d'une variable ne sont pas prises en compte et R considère cette variable comme étant simplement une chaîne de caractères (par exemple **Espece** et **Ile**) ou de valeurs numériques.\n\n::: {.callout-tip icon=\"true\"}\n## Vecteurs et facteurs\n\nOn désigne par **vecteur** un objet uni-dimensionnel contenant des éléments d'un seul type (caractères, valeurs numériques ou logiques). Un tableau est constitué de vecteurs situés dans les colonnes.\n\nUn **facteur** est un vecteur dont les éléments peuvent être regroupés en catégories (on parle de **niveaux**).\n:::\n\nSi vous ne connaissez pas dans le détail votre jeu de données, vous pouvez avoir une idée de sa structure sous-jacente en comptant le nombre d'éléments uniques des différentes variables à l'aide des fonctions `unique()` et `length()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extraire les elements uniques d'une variable\nunique(pingouins$Espece)\n\n# Compter le nombre d'elements uniques d'une variable\nlength(unique(pingouins$Espece))\n```\n:::\n\n\nLa fonction `unique()` affiche les éléments uniques d'une variable par ordre d'apparition.\n\nLa fonction `as.factor()` permet de transformer un vecteur en facteur. Par défaut, les niveaux sont triés par ordre alphabétique. Si vous le souhaitez, vous pouvez préciser manuellement l'ordre souhaité pour ces niveaux à l'aide de l'argument `levels`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transformer un vecteur en facteur\npingouins$`Echantillon Numero` <- as.factor(pingouins$`Echantillon Numero`)\npingouins$Espece <- as.factor(pingouins$Espece)\npingouins$Ile <- as.factor(pingouins$Ile)\n```\n:::\n\n\nVérifiez que les corrections apportées aient bien été appliquées au jeu de données :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(pingouins)\n```\n:::\n\n\n![](img/rstudio_23.png){width=\"100%\"}\n\n<br>\n\n::: {.callout-caution icon=\"true\"}\n## Bonne pratiques : structurer son script\n\nVotre script commence à être bien fourni. Vous pouvez le diviser en différentes parties pour simplifier la lecture. Pour cela, ajoutez des titres sous forme de commentaires et accolez des tirets (au moins quatre) pour signaler à R qu'il s'agit de divisions dans votre script.\n\n![](img/rstudio_24.png){width=\"100%\"}\n\nEn cliquant sur l'icône **Menu** à droite vous aurez accès à une table des matières dans laquelle vous pourrez naviguer en cliquant sur la partie qui vous intéresse.\n\n![](img/rstudio_25.png){width=\"100%\"}\n:::\n\n<br>\n\n::: {.callout-tip icon=\"true\"}\n## Raccourcis clavier : les sections d'un script\n\nPour afficher le sommaire de votre script, utilisez la combinaison **Ctrl + Shift + O**.\\\nVous pouvez également replier (**Alt + O**) ou déplier (**Alt + Shift + O**) les sections.\n:::\n\n<br>\n\n## Extraire des données\n\nNotre jeu de données contient les mesures de différents paramètres pour trois espèces de pingouins. Nous aimerions séparer ce jeu de données en trois tableaux, un pour chacune des espèces.\n\n\n\n\n<br>\n\nLes noms des espèces étant assez complexes, nous allons commencer par les extraire et les stocker dans un vecteur :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nespeces <- unique(pingouins$Espece)\n```\n:::\n\n\n<br>\n\nSéparons maintenant le tableau d'origine en trois tableaux. Pour l'espèce *Adelie*, nous extrayons les lignes du tableau pingouins dont la colonne Espece est égale au premier élément du vecteur especes, etc.\n\n<br>\n\n::: {.callout-tip icon=\"true\"}\n## Les opérateurs de comparaison\n\n|       |                     | \n| :---: | :------------------ |\n| ==    | égal                |\n| !=    | différent           |\n| <     | inférieur à         |\n| <=    | inférieur ou égal à |\n| >     | supérieur à         |\n| >=    | supérieur ou égal à |\n| ==    | égal                |\n\n:::\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadelie <- pingouins[pingouins$Espece == especes[1], ]\ngentoo <- pingouins[pingouins$Espece == especes[2], ]\nchinstrap <- pingouins[pingouins$Espece == especes[3], ]\n```\n:::\n\n\n<br>\n\nCréons maintenant un vecteur contenant le nombre d'observations pour chaque tableau, à l'aide de la fonction `nrow()` (permet de compter le nombre de ligne d'un tableau) :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb_ind <- c(nrow(adelie), nrow(gentoo), nrow(chinstrap))\n```\n:::\n\n\n<br>\n\nAjoutons à ce vecteur des étiquettes avec les noms des trois espèces :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(nb_ind) <- especes\nnb_ind\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Adelie Penguin (Pygoscelis adeliae) \n                                      152 \n        Gentoo penguin (Pygoscelis papua) \n                                      124 \nChinstrap penguin (Pygoscelis antarctica) \n                                       68 \n```\n:::\n:::\n\n\n![](img/rstudio_26.png){width=\"100%\"}\n\n<br>\n\n::: {.callout-tip icon=\"true\"}\n## La fonction `table()`\n\nVous obtiendrez la même chose à l'aide de la commande `table(pingouins$Espece)` (seul l'ordre des espèces varie)\n\n:::\n\n<br>\n\n# Représenter des données\n\n## Diagramme en barres (barplot)\n\nNous pouvons représenter visuellement le nombre de pingouins par espèce à l'aide de la fonction `barplot()`. Le graphique s'affichera dans le panneau inférieur droit de RStudio.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(nb_ind)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nVous pouvez voir que plusieurs points peuvent être améliorés :  \n\n- ajuster l'axe des ordonnées pour inclure la valeur maximale  \n- ajuster la taille des étiquettes de l'axe de abscisses pour que les trois noms d'espèces soient lisibles  \n- ajouter un titre à l'axe des ordonnées et au graphique  \n- modifier la couleur des barres\n\nPour trouver comment modifier ces différents paramètres, vous pouvez utiliser l'aide de la fonction (`?barplot`) ou l'aide plus générales pour les graphiques (`?par`).\n\nPour rendre la graphique plus lisible, nous aimerions que le nom des espèces soit situé sur deux lignes. Nous allons pour cela modifier les noms de notre vecteur **nb_ind** à l'aide de la fonction `gsub()`.\nCette fonction permet de remplacer un motif par au autre dans une chaîne et s'utilise de la façon suivante : `gsub(motif a remplacer, motif de remplacer, objet a modifier)` : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(nb_ind) <- gsub(\"(\", \"\\n(\", names(nb_ind), fixed = TRUE)\n```\n:::\n\n\n\nNous allons utiliser les paramètres suivants :  \n\n- **main** pour ajouter un titre au graphique  \n- **ylab** pour ajouter un titre à l'axe des ordonnées  \n- **ylim** pour ajuster l'axe des ordonnées  \n- **cex** pour modifier la taille du texte  \n- **col** pour modifier la couleur des barres\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(nb_ind,\n        main = \"Trois especes de pingouins vivant en Antarctique\",\n        ylab = \"Nombre d'individus par espece\",\n        ylim = c(0, 200),\n        col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n## Histogramme\n\nEtudions maintenant la distribution de la variable **Longueur des ailes** à l'aide d'un histogramme : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(pingouins$`Longueur Aile (mm)`,\n     main = \"Distribution de la longueur des ailes\",\n     xlab = \"Longueur des ailes (en mm)\",\n     ylab = \"Frequence\",\n     col = \"orange\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nIl semble y avoir deux groupes, vérifions cela à l'aide d'un autre type de graphique.\n\n## Boxplot\n\nLes graphiques dits en \"boîtes à moustaches\" donnent une bonne indication de la manière dont se distribue une variable numérique : médiane, quartiles, valeurs aberrantes, ...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(pingouins$`Longueur Aile (mm)` ~ pingouins$Espece)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n## Scatter plot\n\nRegardons maintenant la relation entre la longueur du bec et la longueur des ailes\n\n\n::: {.cell}\n\n```{.r .cell-code}\npingouins$col[pingouins$Espece == especes[1]] <- \"blue\"\npingouins$col[pingouins$Espece == especes[2]] <- \"red\"\npingouins$col[pingouins$Espece == especes[3]] <- \"green\"\n\nplot(pingouins$`Longueur Aile (mm)`, pingouins$`Longueur Bec (mm)`,\n     col = pingouins$col)\nlegend(x = 200, y = 45, legend = c(especes[1], especes[2], especes[3]),\n       fill = c(\"blue\", \"red\", \"green\"), cex = 0.75)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}