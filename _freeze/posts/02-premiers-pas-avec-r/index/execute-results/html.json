{
  "hash": "fbb3c9c9d9341b5722245a076095bf17",
  "result": {
    "markdown": "---\ntitle: \"Premiers pas avec R\"\nsubtitle: \"Se familiariser avec R et manipuler des données\"\nauthor:\n  - Gergana Daskalova\n  - Jonathan Kitt (adaptation)\ndate: \"2022-10-13\"\ncategories: [R, RStudio, bases]\n# image: \"pexels-marta-branco-1194713.jpg\"\nformat: \n  html: \n    toc: true\n    toc-depth: 1\n    toc-title: \"Sommaire\"\n---\n\n\n*Ce tutoriel est adapté de [Getting started with R and RStudio](https://ourcodingclub.github.io/tutorials/intro-to-r/) du site [Our Coding Club](https://ourcodingclub.github.io/).*\n\n<br>\n\n::: {.callout-note icon=\"true\"}\n\n## Note\n\nPour savoir comment installer R et RStudio, cliquez [ici](https://ateliers-codons.netlify.app/posts/01-installer-r-et-rstudio/)\n\n:::\n\n<br>\n\n# Naviguer dans RStudio {#naviguer_rstudio}\n\n<br>\n\nEn ouvrant RStudio, vous verrez une fenêtre comme celle ci-dessous, qui se divise en trois panneaux : \n\n![](img/rstudio_01.png){width=\"100%\"}\n\n<br>\n\n## La console\n\nVous pouvez y taper du code et l'exécuter en appuyant sur `Entrée`. \n\nLors du lancement d'une session RStudio, elle affiche également des informations comme la version de R présente sur votre ordinateur et des indications sur la manière d'obtenir de l'aide.\n\n::: {.callout-tip icon=\"true\"}\n\n## L'invite de commande\n\nDans la console, une ligne commence par `>` : c'est ce qu'on appelle l'**invite de commande**. Cela indique que R est prêt à recevoir vos instructions !\n\nTapez `2+2` puis appuyez sur `Entrée` : la console affiche le résultat.\n\n:::\n\n\n## L'environnement\n\nL'environnement affiche le contenu de votre espace de travail : données importées, objets créés, fonctions définies, ...\n\n::: {.callout-tip icon=\"true\"}\n\n## Un langage orienté objet\n\nR est un langage orienté objet, ce qui veut dire que tout ce que vous manipulez dans R est stocké dans un objet.\n\n:::\n\nD'autres onglets vous permettent d'accéder à l'historique des commandes ou encore à des tutoriels (pour les versions les plus récentes de RStudio).\n\n## Le navigateur\n\nCe navigateur vous permet de navigeur dans vos dossiers, de copier, renommer ou supprimer des fichiers, à la manière d'un explorateur classique.\n\nLes autres onglets permettent de visualiser les graphiques ou encore d'afficher l'aide.\n\n# Organiser ses fichiers\n\n## Créer un projet\n\nPour éviter de perdre du temps à chercher des fichiers dont on a oublié le nom et l'emplacement, il est utile d'organiser son travail à l'aide de **projets**. \n\nPour créer un projet, cliquez sur **File** puis **New project...** : \n\n![](img/rstudio_02.png){width=\"100%\"}\n\nChoisissez **New Directory** puis **New Project**\n\n![](img/rstudio_03.png){width=\"100%\"}\n\n![](img/rstudio_04.png){width=\"100%\"}\n\nDans la fenêtre **Create New Project**, attribuez un nom et un emplacement au projet, puis cliquez sur **Create project**\n\n![](img/rstudio_05.png){width=\"100%\"}\n\n::: {.callout-caution icon=\"true\"}\n\n## Bonne pratiques : nommer ses fichiers\n\nPour vous simplifier la vie, voici quelques recommandations : \n\n- privilégiez les noms courts et explicites (à éviter : *fichier_2e_version_a_verifier.txt*)\n- ne mettez ni espace ni caractères spéciaux (accents, symboles, ...)  \n- pour les dates, privilégiez le format **AAAAMMJJ** (année, mois, jour)\n- mettez l'élément le plus important en premier (par exemple : *projet_date_contenu*)  \n- optez pour l'une de ces deux conventions d'écritre : **camel case** (*MonProjet*) ou **snake case** (*mon_projet*)\n\nUne fois que vous avez trouvé une façon de procéder, utlisez-la pour l'ensemble de vos fichiers afin de rester cohérent !\n\n:::\n\nQuand vous voudrez travailler à nouveau sur ces données, il vous suffira de double-cliquer sur le fichier `.Rproj` pour ouvrir le projet et accéder à tout ce qu'il contient.\n\n![](img/rstudio_06.png){width=\"100%\"}\n\n## Créer une arborescence\n\nIl est toujours préférable de passer un peu de temps à bien organiser un projet lors de sa création, plutôt que de passer beaucoup de temps par la suite à déplacer des fichiers, les renommer, les rechercher, ...\n\nPour créer un nouveau dossier dans votre projet, cliquez sur **New Folder** dans l'onglet **Files** du navigateur : \n![](img/rstudio_07.png){width=\"100%\"}\n\nL'organisation proposée ci-dessous est utilisable dans une très grande majorité de cas : \n\n- **raw** : contient les données brutes qui seront utilisées mais laisées en l'état.  \n- **data** : contient les données issues de la manipulation des données brutes (sous-ensembles, données corrigées, renommées, nouvelles variables calculées, ...)  \n- **R** : contient le code utilisé pour manipuler les données, générer les figures, rédiger les rapports, ... \n- **resultats** : contient les fichiers de résultats issus de l'analyse.\n- **figures** : contient les graphiques et figures générées lors de l'analyse.  \n- **docs** : contient les rapports rédigés au cours de l'analyse, les présentations de résultats, des articles en lien avec l'analyse, les documents concernant les outils utlisés, ...  \n  \n![](img/rstudio_08.png){width=\"100%\"}\n\n# Utiliser un script \n\n::: {.callout-important icon=\"true\"}\n\n### Important\n\nLe code tapé et exécuté dans la console ne sera plus disponible quand vous quitterez votre session RStudio. A la manière d'un document Word, un script vous permet de sauvegarder votre code afin d'y accéder ultérieurement ou de le partager.\n\n:::\n\nPour ouvrir un nouveau script, cliquez sur le \"plus\" dans le coin supérieur gauche de la fenêtre RStudio puis sur **R Script**.\n\n![](img/rstudio_09.png){width=\"100%\"}\n\n::: {.callout-tip icon=\"true\"}\n\n## Raccourcis clavier : nouveau script\n\nPour ouvrir un nouveau script, utilisez la combinaison **Ctrl + Shift + N**\n\n:::\n\nUn nouveau panneau s'affiche : \n\n![](img/rstudio_10.png){width=\"100%\"}\n\n::: {.callout-caution icon=\"true\"}\n\n## Bonne pratiques : commenter ses scripts\n\nPrenez dès maintenant l'habitude de commenter vos scripts. Il s'agit de rédiger des commentaires qui expliquent ce que fait votre code, pour le rendre plus compréhensible par vos collègues - et par vous-même quand vous reviendrez sur un script après un certain temps ! Pour ajouter un commentaire, utiliser un `#` au début d'une ligne puis rédigez votre commentaire. Dans R, un code placé après un `#` n'est pas exécuté : \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ceci est un commentaire qui ne sera pas exécuté\n# La ligne suivante sera exécutée\n2 + 2\n```\n:::\n\n\n:::\n\nPour commencer, ajoutons des informations en haut de notre script : \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ateliers codons\n# 01 - Premiers pas avec R\n# 2022-10-14\n```\n:::\n\n\n::: {.callout-tip icon=\"true\"}\n\n## Raccourcis clavier : commentaires\n\nPour commenter ou dé-commenter une ligne de code, utilisez la combinaison **Ctrl + Shift + C**.\n\n:::\n\n# Manipuler des données \n\n## Importer un jeu de données\n\nNous allons analyser une liste d'espèces d'oiseaux menacées en Auvergne (données de 2015 obtenues sur le site de la [DREAL](https://www.auvergne-rhone-alpes.developpement-durable.gouv.fr/liste-rouge-des-oiseaux-d-auvergne-a9939.html)).\n\nCes données se trouvent dans un fichier appelé `oiseaux.csv`, disponible en ligne, que nous allons télécharger.\n\nNous allons pour cela utiliser une **fonction** de R. Une fonction permet d'exécuter une action : calculer une somme, importer ou exporter un fichier, ajouter une colonne dans un tableau, ... \n\nToutes les fonctions se présentent de la façon suivante : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nma_fonction(data, arguments, ...)\n```\n:::\n\n\nOn fait appel à la fonction en tapant son nom, puis on précise les arguments de la fonction entre parenthèses. Un argument peut être obligatoire ou optionnel, et modifie la façon dont la fonction est exécutée.\n\nNotre première ligne de code va donc télécharger le fichier `oiseaux.csv` et stocker ce fichier dans un objet de notre environnement R : nous assignons le fichier à l'objet. Cette opération s'effectue à l'aide de la flèche d'assignation `<-` : \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Importer la liste d'especes d'oiseaux menacees en Auvergne\noiseaux <- read.csv(\"https://raw.githubusercontent.com/codons-blog/C-01-PremiersPas/main/oiseaux.csv\")\n```\n:::\n\n\nNotez la présence des guillemets autour du lien vers le fichier : utlisez toujours des guillements lorsque vous indiquez un chemin vers un fichier. \n\n::: {.callout-caution icon=\"true\"}\n\n## Bonne pratiques : auto-complétion\n\nR vous aide à compléter votre code : tapez `re` puis **Tab**, et vous verrez s'afficher une liste de fonctions ou d'objets commençant par ces deux lettres. Vous pouvez naviguer à l'aide des flèches haut et bas et valider votre choix en appuyant à nouveau sur **Tab**. Cette fonctionnalité de R est particulièrement utile lorsque vous manipulez des fichiers ou objets ayant un nom complexe.\n\n:::\n\n::: {.callout-tip icon=\"true\"}\n\n## Raccourcis clavier : flèche d'assignation\n\nPour insérer une flèche d'assignation, utilisez la combinaison **ALt + \"-\"** (tiret du 6).\n\n:::\n\nExécutez cette fonction en plaçant le curseur sur la ligne et en cliquant sur **Run** : \n\n![](img/rstudio_11.png){width=\"100%\"}\n\n::: {.callout-tip icon=\"true\"}\n\n## Raccourcis clavier : exécuter du code\n\nPour exécuter une ou plusieurs lignes de code, sélectionnez les lignes et utilisez la combinaison **Ctrl + Entrée**\n\n:::\n\nNotre environnement contient maintenant un objet **oiseaux**, et vous pouvez voir l'indication `172 obs. of 4 variables` : le jeu de données contient 172 observations (lignes) et 4 variables (colonnes).\n\n![](img/rstudio_12.png){width=\"100%\"}\n\nEn cliquant sur la flèche bleue à gauche du nom de l'objet, vous aurez accès à plus d'informations : \n\n![](img/rstudio_13.png){width=\"100%\"}\n\n**Nom des variables** : le tableau contient 4 variables nommées *description*, *categorie*, *nom_francais* et *nom_latin*. Le signe **$** devant les noms de variables indique qu'il s'agit de colonnes : l'opérateur dollar permet de sélectionner une colonne dans un tableau. Essayez en tapant dans la console **oiseaux$** et appuyez sur **Tab** : \n\n![](img/rstudio_15.png){width=\"100%\"}\n\nChoisissez la première colonne *description* et appuyez sur **Tab** : vous verrez s'afficher les 172 observations de la colonne en question : \n\n![](img/rstudio_16.png){width=\"100%\"}\n\n**Type de variable** : à la suite du nom de variable, **chr** indique qu'il s'agit d'une variable de type caractère. D'autres types de variables fréquemment rencontrés sont les variables **numériques** (nombres entiers ou décimaux) et les variables **logiques** (vrai ou faux).\n\n**Premiers éléments de chaque variable** : à la suite du type de variable, vous pouvez voir les premiers éléments de chacune des variables.\n\nVous pouvez afficher le tableau en cliquant sur l'icône à droite : \n\n![](img/rstudio_14.png){width=\"100%\"}\n\nCela ouvre un nouvel onglet à côté de de votre script : \n\n![](img/rstudio_17.png){width=\"100%\"}\n\nIl est important de sauvegarder régulièrement votre script pour ne pas perdre votre travail. Pour cela, cliquez sur l'icône disquette en haut de votre script : \n\n![](img/rstudio_18.png){width=\"100%\"}\n\nChoisissez le dossier où sera sauvegardé votre script - **R** dans notre cas, et nommez votre script puis cliquez sur **Save** : \n\n![](img/rstudio_19.png){width=\"100%\"}\n\n## Raccourcis clavier : sauvegarder un script\n\nPour sauvegarder un script, uilisez la combinaison **Ctrl + S**\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}