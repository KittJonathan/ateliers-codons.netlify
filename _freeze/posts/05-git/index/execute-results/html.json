{
  "hash": "85cf015b0dec8a2ec5dc37247a94e810",
  "result": {
    "markdown": "---\ntitle: \"Introduction à GitLab\"\nsubtitle: \"Connecter RStudio à GitLab et assurer le suivi de version\"\nauthor:\n  - Jonathan Kitt\ndate: \"2022-12-12\"\ndraft: true\ncategories: [R, RStudio, GitLab]\nformat: \n  html: \n    toc: true\n    toc-depth: 2\n    toc-title: \"Sommaire\"\n---\n\n\n# Introduction\n\n<br>\n\n## Git, GitHub et GitLab\n\n<br>\n\nLorsqu'on travaille sur des données ou qu'on rédige un rapport, on peut rapidement se retrouver avec beaucoup de fichiers aux noms plus ou moins explicites : `fichier.txt`, `fichier2.txt`, `fichier2_modifs.txt`, `fichier2_version1.txt`, ... Difficile de s'y retrouver !\n\n<br>\n\n![Dessing de PHDComics](img/git_notfinal.gif){width=\"50%\"}\n\n<br>\n\n[**Git**](https://git-scm.com/) est un *gestionnaire de versions*, gratuit et open source qui permet de garder une trace de toutes les modifications apportées à un fichier.\n\nGit vous permet de \"figer\" l'état de votre répertoire de travail à un instant donné à l'aide de **commits**. \n\nVous pourrez ainsi naviguer dans l'historique des modifications d'un fichier, savoir quand une modification a été faite et en quoi consiste cette modification. \n\nVous pourrez revenir à un état antérieur de votre fichier en remontant dans l'historique des modifications.\n\nGit vous permet également de travailler sur des **branches**. La branche principale sur laquelle se situe votre travail \"propre\" se nomme la branche **master**. Vous pouvez créer une seconde branche pour effectuer des tests, faire du développement, tout en laissant intacte la branche master. Vous pourrez inclure les modifications apportées sur la seconde branche dans la branche master en les fusionnant : c'est ce qu'on appelle un **merge**.\n\nGit vous permet également de faire une sauvegarde de vos modifications sur un serveur distant : [**Github**](https://github.com/) ou [**Gitlab**](https://gitlab.com). \nCes outils permettent de travailler à plusieurs sur un même projet, de synchroniser vos répertoires locaux et distants, de partager votre code, ...\n\n<br>\n\n## Installer git\n\n<br>\n\n### Windows\n\n<br>\n\nSur le site de [git](https://gitforwindows.org/), téléchargez la dernière version de git.\n\n![](img/git_01.png){width=\"100%\"}\n\nDouble-cliquez sur l'exécutable `Git-xxxx.exe` :\n\n![](img/git_03.png){width=\"100%\"}\n\nLaissez les paramètres par défaut proposés par l'assistant d'installation. Dans le menu *Choosing the default editor used by Git*, vous pouvez laisser l'éditeur de texte proposé par défaut (Vim) ou choisir l'éditeur de texte que vous avez l'habitude d'utiliser.\n\n![](img/git_04.png){width=\"50%\"}\n\nDans les menus suivants, laissez les paramètres suivants jusqu'à ce que l'installation de `git` soit complétée.\n\n<br>\n\n### Linux\n\nSuivez les instructions sur [ce lien](https://git-scm.com/download/linux).\n\n<br>\n\n### MacOS\n\nSuivez les instructions sur [ce lien](https://git-scm.com/download/mac).\n\n<br>\n\n# Premiers pas avec git\n\nUne fois git installé, ouvrez RStudio et [créez un nouveau projet](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/#créer-un-projet). Cliquez sur *Tools \\> Global Options \\> Git/SVN*. Assurez-vous que la case *Enable version control interface for RStudio projects* est cochée, et que le chemin vers l'exécutable *git* est bien renseigné. Si ce n'est pas le cas, cliquez sur *Browse* et indiquez-le. Validez en cliquant sur *Apply*.\n\n![](img/git_05.png){width=\"50%\"}\n\n<br>\n\n## En ligne de commande\n\nDans votre session RStudio, ouvrez un *terminal* :\n\n![](img/git_cmd_01.png){width=\"50%\"}\n\n<br> Tapez la ligne de commande suivante pour afficher la version de *git* installée sur votre ordinateur :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit --version\n```\n:::\n\n\n<br>\n\n### Paramétrer git\n\nDans un premier temps, nous allons paramétrer *git* en renseignant un nom d'utilisateur et un e-mail qui seront utilisés pour nous identifier dans l'historique (cela nous permettra si nous travaillons à plusieurs sur un même projet de savoir qui a fait quoi). Dans la suite du turoriel nous verrons comment connecter RStudio à GitLab, nous allons donc utiliser nos identifiants LDAP :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit config --global --user.name \"prenom.nom\"  \ngit config --global --user.email prenom.nom@inrae.fr\n```\n:::\n\n\nAssurons-nous que ces paramètres ont bien été pris en compte :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit config --global --list\n```\n:::\n\n\n<br>\n\n### Initialiser git\n\nPour l'instant, notre répertoire de travail (le projet RStudio) n'est pas versionné. Il nous faut pour cela associer un répertoire git à notre répertoire de travail, en **initialisant** git :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit init\n```\n:::\n\n\nAssurons-nous que le répertoire *git* a bien été créé. La commande `ls` permet de lister les fichiers du répertoire actuel, et les options `-la` permettent d'afficher le détail (droits, date, ...) et d'inclure les dossiers cachés (dont le nom commence par un point `.`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls -la\n```\n:::\n\n\n### Ignorer des fichiers\n\nParmi les fichiers et répertoires listés ci-dessus, le répertoire `.Rproj.user` n'a pas besoin d'être versionné. Nous allons pour cela ajouter à notre répertoire de travail un fichier dans lequel nous pourrons lister les fichiers et répertoires que git devra ignorer. Créons un fichier texte basique en cliquant sur *File \\> New File \\> Text File*. Sauvegardons ce fichier à la racine de notre répertoire de travail en le nommant `.gitignore`. Ajoutons une ligne à ce fichier comme ci-dessous :\n\n![](img/git_cmd_10.png)\n\n<br>\n\nVérifions l'état dans lequel notre répertoire se trouve :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n\n![](img/git_cmd_02.png){width=\"50%\"}\n\nLe terminal affiche plusieurs informations :\n\n-   *On branch master* : nous nous trouvons sur la branche principale (et la seule pour le moment)\n\n-   *No commits yet* : nous n'avons pas encore figé l'état de notre répertoire à l'aide d'un commit\n\n-   *Untracked files* : des fichiers non versionnés sont présents dans le répertoire de travail\n\n-   *nothing added to commit but untracked files present* : redite de la ligne précédente\n\n-   *use \"git add\" to track* : pour figer l'état de ces fichiers et tracer l'historique des modifications, nous utiliserons la commande `git add`.\n\nPour afficher également les fichiers ignorés, nous utilisons la commande `git status --ignored`.\n\n<br>\n\n### git add\n\nAjoutons nos deux fichiers, soit en précisant leurs noms, soit en utilisant le symbole `*` (pour ajouter tous les fichiers présents dans notre répertoire de travail) ou encore un point `.` (pour ajouter le répertoire actuel) :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ajouter les fichiers un a un\ngit add .gitignore tutoriel_git.Rproj\n\n# Ajouter tous les fichiers du repertoire de travail\ngit add *\n  \n# Ajouter le répertoire actuel\ngit add .\n```\n:::\n\n\nAffichons l'état de notre répertoire à l'aide de la commande `git status`. Nous pouvons remarquer que les noms des fichiers ajoutés apparaissent en vert.\n\nDe nouvelles informations sont affichées dans le terminal :\n\n-   *No commits yet* : les fichiers ont été ajoutés mais leur état n'a pas encore été figé par un commit\n\n-   *Changes to be commited* : liste des fichiers ajoutés mais pas encore figés\n\nNous voyons également la commande à utiliser pour annuler l'ajout des fichiers :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Annuler l'ajout de fichiers un par un\ngit rm --cached .gitignore tutoriel_git.Rproj\n\n# Annuler l'ajout de tous les fichiers du repertoire de travail\ngit rm --cached *\n```\n:::\n\n\n<br>\n\n::: {.callout-note icon=\"true\"}\n## rm -r\n\nL'argument `-r` permet de supprimer de façon récursive un dossier.\n:::\n\n<br>\n\n### git commit\n\nNous allons maintenant figer l'état de notre répertoire de travail à l'aide de la commande `git commit -m ...`. Un commit est toujours associé à un message (`-m`) à écrire entre guillemets (`\"message\"`) pour préciser ce que nous faisons. Soyez le plus précis possible dans vos messages de commits, cela vous permettra de vous y retrouver dans l'historique des modifications !\n\n![Dessin de @xkcd](img/git_commit_2x.png)\n\n<br>\n\nNous effectuons le premier commit à l'aide de la commande suivante :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit commit -m \"premier commit\"\n```\n:::\n\n\n![](img/git_cmd_03.png)\n\nSi nous tapons `git status` dans le terminal, celui-ci affiche *nothing to commit, working tree clean*. Cela indique que notre commit a bien été effectué.\n\nLa commande `git log` permet d'afficher l'historique de notre répertoire :\n\n![](img/git_cmd_04.png)\n\n-   *commit \\### (HEAD -\\> master)* nous donne lidentifiant unique du commit et indique où pointe notre dernier commit (sur la branche master)\n\n-   *auteur* (avec les identifiants renseignés plus haut), *date* et *message* du commit\n\n<br>\n\nAjoutons un fichier README dans notre répertoire : *File \\> New File \\> Markdown File*. Ajoutons une ligne et sauvegardons le fichier à la racine de notre répertoire :\n\n![](img/git_md_01.png)\n\nNous allons ajouter ce fichier et effectuer un commit :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add README.md\ngit commit -m \"ajout d'un fichier README.md\"\n```\n:::\n\n\nAffichons l'historique de nos commits à l'aide de la commande `git log` :\n\n![](img/git_cmd_05.png)\n\nAjoutons une ligne de texte dans notre fichier `README.md` et sauvegardons-le :\n\n![](img/git_cmd_06.png) Tapons les commandes suivantes :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add README.md\ngit commit -m \"ajout d'une ligne de texte dans le fichier README.md\"\n```\n:::\n\n\n<br>\n\n### Naviguer dans les commits\n\nAffichons à nouveau l'historique avec `git log`.\n\nNous allons revenir au commit précédent dans notre historique. Pour cela, nous copions l'identifiant unique du commit auquel nous souhaitons revenir :\n\n![](img/git_cmd_07.png)\n\nDans le terminal, nous tapons la commande suivante (en collant l'identifiant du commit à la place de *commit_id*) :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit checkout <commit_id> .\n```\n:::\n\n\n::: {.callout-caution icon=\"true\"}\n## git checkout <commit_id> .\n\nN'oubliez pas le point à la fin de la ligne de commande !\n:::\n\n<br>\n\nNous pouvons remarquer que dans notre fichier `README.md`, la ligne que nous avions ajoutée n'est plus visible : nous sommes revenus au commit précédent de notre historique.\n\nPour revenir au dernier commit effectué, nous pouvons procéder de la même façon en copiant l'identifiant du commit et en utilisant la commande `git checkout <commit_id> .`. Nous pouvons également utiliser la commande `git reset --hard HEAD`. Cette commande change l'emplacement et nous replace au niveau du commit le plus récent (imaginez que vos différents commits sont représentés pas des noeuds le long d'un segment).\n\n<br>\n\n### Créer une branche\n\nLes branches nous permettent de travailler sur nos fichiers sans impacter la branche principale qui contient notre répertoire \"propre\".\n\nCréons une branche que nous appelons \"dev\" : `git branch dev`.\n\nPour afficher les différentes branches, utilisons la commande `git branch` : ![](img/git_cmd_11.png).\n\nL'astérisque indique la branche sur laquelle nous nous situons, pour l'instant la branche *master*.\n\nPour changer de branche, utilisons la commande `git switch <nom-de-la-branche>`. Exécutons les commandes suivantes :\n\n![](img/git_cmd_12.png)\n\nNous nous situons bien sur la branche *dev*.\n\nPour supprimer une branche, nous utilisons la commande `git branch -d <nom-de-la-branche>`. Avant de pouvoir supprimer la branche *dev*, il faut se placer sur la branche *master* :\n\n![](img/git_cmd_13.png)\n\nLa commande `git checkout -b <nom-de-la-nouvelle-branche>` permet de créer une branche et de s'y placer. Cette fonction permet également de changer de branche : `git checkout master` par exemple.\n\nNous pouvons créer une nouvelle branche à partir d'un commit précis, en précisant l'identifiant du commit : `git checkout -b <nom-de-la-branche> <commit_id>`.\n\nModifions le fichier README.md sur la branche dev :\n\n![](img/git_cmd_14.png)\n\nEffectuons un `add + commit` sur cette branche dev :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add README.md\ngit commit -m \"modification du fichier README.md sur la branche dev\"\n```\n:::\n\n\nEn naviguant entre les branches à l'aide de `git checkout` (ou `git switch`) pour afficher l'historique avec `git log`, nous remarquons que l'historique varie en fonction de la branche sur laquelle on se trouve.\n\n### Fusionner les branches et résoudre les conflits\n\nNous avons terminé de travailler sur la branche dev, nous aimerions maintenant rappatrier les modifications apportées sur cette branche sur notre branche principale, en \"fusionnant\" les deux branches.\n\nCommençons par nous placer sur la branche *master* : `git checkout master`\n\nPour fusionner la branche dev sur la branche master, nous utilisons la commande `git merge` :\n\n![](img/git_cmd_15.png)\n\nLe terminal nous indique qu'il y a un conflit : le fichier README.md diffère entre les deux branches, et nous sommes invités à résoudre ce conflit avant de fusionner les branches.\n\nRegardons à quoi ressemble notre fichier README.md :\n\n![](img/git_cmd_16.png)\n\n-   Les marqueurs de conflit indiquent le début (`<<<<`) et la fin (`>>>`) du conflit\n\n-   Les noms des branches sont indiqués à côté de ces marqueurs de conflit\n\n-   L'indicateur `=====` montre la séparation entre les modifications des deux branches\\\n    Il nous incombe de choisir quelle version conservée : nous allons supprimer les indicateurs `<<<`, `>>>` et `===` et ne garder que le texte présent dans le fichier de la branche *dev*.\n\nVérifions l'état de notre branche *master* à l'aide de la commande `git status` :\n\n![](img/git_cmd_17.png)\n\nLes deux branches ne sont pas fusionnées, mais les modifications ont bien été prises en compte.\n\nAjoutons le fichier `README.md` et effectuons un commit :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add README.md\ngit commit -m \"resolution de conflit entre les branches master et dev\"\n```\n:::\n\n\nEn affichant l'historique avec `git log` nous voyons maintenant l'ensemble des commits effectués sur les deux branches.\n\n![](img/git_cmd_18.png)\n\nNous pouvons maintenant supprimer la branche *dev* : `git branch -d dev`\n\n## En \"clique-bouton\"\n\n### Initialiser git\n\nCréons un nouveau RStudio pour refaire ce que nous avons fait en ligne de commande, mais cette fois-ci à l'aide de l'interface graphique de RStudio.\n\nPour initialiser git, cliquons sur *Tools \\> Project Options*, puis dans le menu *Git/SVN* sélectionnons *Git* :\n\n![](img/git_ide_01.png)\n\nDans les fenêtres qui s'ouvrent, cliquons sur *Yes*.\n\nRStudio redémarre, et nous pouvons remarquer la présence d'un onglet *Git* dans notre espace de travail. En cliquant dessus, nous pouvons voir qu'un fichier `.gitignore` a été ajouté automatiquement :\n\n![](img/git_ide_02.png)\\\n![](img/git_ide_03.png)\n\n<br>\n\n### Ajouter des fichiers\n\nPour ajouter des fichiers (ce que nous avons fait avec `git add`), cochez-les dans l'onglet git. Leur statut passe de *??* à *A* (pour Added).\n\n![](img/git_ordi_vide_01.png)\n\n::: {.callout-tip icon=\"true\"}\n## Sélectionner plusieurs fichiers\n\nQuand nous travaillons avec beaucoup de fichiers versionnés, nous pouvons tous les sélectionner : cliquons sur le nom d'un des fichiers dans l'onglet git, puis utilisons la combinaison *Ctrl + A* et enfin cochons la case à côté du premier fichier sur lequel nous avions cliqué.\n:::\n\nNous allons maintenant effectuer un *commit* (`git commit -m`) : cliquons sur *Commit*. Dans la fenêtre qui s'ouvre, nous allons écrire le message du commit (ce que nous mettions après `-m`) et cliquons à nouveau sur *Commit*.\n\n![](img/git_ordi_vide_02.png) En cliquant sur l'icône *horloge* nous pouvons voir l'historique de nos commits.\n\n![](img/git_ordi_vide_03.png)\n\n### Créer une branche\n\nNous pouvons créer une nouvelle branche en cliquant sur l'icône à gauche du nom de la branche actuelle, en précisant le nom et en cliquant sur *Create* :\n\n![](img/git_ordi_vide_04.png)\n\nNous pouvons maintenant naviguer entre les branches directement en cliquant sur leurs noms :\n\n![](img/git_ordi_vide_05.png)\n\n::: {.callout-important icon=\"true\"}\n## Limites de l'approche clique-bouton\n\nNous ne pourrons pas revenir à un commit précédent, créer une branche à partir d'un commit précis ou résoudre des conflits lors de la fusion de branches dans l'onglet *Git* de RStudio. Il nous faudra utiliser la ligne de commande.\n:::\n\n<br>\n\n### Paramétrer RStudio\n\nOuvrez une session dans RStudio, puis cliquez sur *Tools* \\> *Global Options* \\> *Git/SVN*.\n\n![](img/git_06.png){width=\"50%\"}\n\n1.  Assurez-vous que la case *Enable version control interface for RStudio projects* est cochée.\n\n2.  Assurez-vous que le chemin vers l'exécutable `git` est bien renseigné. Le cas échéant, cliquez sur *Browse* et indiquez le chemin vers son emplacement.\n\n3.  Si aucune clé SSH n'est indiquée, cliquez sur *Create RSA Key...*.\n\n4.  Validez en cliquant sur *Apply*.\n\n<br>\n\nCliquez sur *View public key* et copiez la clé qui s'affiche.\n\n### Paramétrer GitLab\n\nOuvrez [ce lien](https://forgemia.inra.fr) dans votre navigateur internet et cliquez sur *Connexion SSO*.\n\n![](img/git_07.png){width=\"50%\"}\n\nDans le menu déroulant, choisissez *INRAE* et cliquez sur *Sélectionner*. Dans le menu suivant, renseignez les champs à l'aide de votre identifiant LDAP puis cliquez sur *Se connecter*.\n\n::: {layout-ncol=\"2\"}\n![](img/git_08.png){width=\"50%\"}\n\n![](img/git_09.png){width=\"50%\"}\n:::\n\n<br>\n\nCliquez sur l'icône dans le coin supérieur droit puis sur *Preferences*.\n\n![](img/git_10.png){width=\"50%\"}\n\nDans la barre de menu à gauche, cliquez sur la première icône en forme de clé. Collez dans le champ *Key* la clé SSH copiée dans RStudio. Le champ *Title* devrait se remplir automatiquement. Si ce n'est pas le cas, renseignez ce champ. Vous pouvez choisir une date d'expiration de votre clé dans *Expiration date*. Pour terminer, cliquez sur *Add key*. Assurez-vous que votre clé apparaisse bien en base de la page sous *Your SSH keys*.\n\n![](img/git_11.png)\n\n# De GitLab vers RStudio\n\n## Dans GitLab\n\nDans la barre de menu supérieure, cliquez sur l'icône *plus* et sélectionnez *New project/repository*. Dans le menu suivant, choisissez *Create blank project*.\n\n::: {layout-ncol=\"2\"}\n![](img/git_12.png){width=\"50%\"}\n\n![](img/git_13.png){width=\"50%\"}\n:::\n\n<br>\n\nDans le menu *Create blank project*, remplissez les différents champs :\n\n-   *Project name* : nom du projet (avec les mêmes conventions d'écriture que si vous étiez en train de [créer un projet dans RStudio](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/#cr%C3%A9er-un-projet)).\n\n-   *Project URL* : en fonction des groupes dont vous faites partie, vous pourrez choisir l'emplacement du projet. Pour l'instant, choisissez votre espace utilisateur.\n\n-   *Project slug* : identique au nom du projet.\n\n-   *Visibility Level* : qui a accès au projet. Pour notre exemple, choisissez *Public*.\n\n-   *Project Configuration* : cochez la case *Initialize repository with a README*.\n\nCliquez sur *Create project*. Le projet s'ouvre et vous pouvez voir qu'il contient un ficher `README.md`. Ce fichier s'affiche sur la page d'accueil de votre projet et contient par défaut des informations sur l'utilisation de GitLab.\n\n![](img/git_15.png)\n\n<br>\n\nNous allons maintenant \"rapatrier\" ce projet sur notre ordinateur. Pour cela, cliquez sur l'onglet *Clone* et choisissez *Clone with SSH*. Cliquez sur *Copy URL*.\n\n![](img/git_16.png)\n\n## Dans RStudio\n\nDans la barre de menu supérieure, cliquez sur *File* \\> *New project*.\\\nDans la fenêtre *Create Project*, choisissez *Version Control*.\n\n::: {layout-ncol=\"2\"}\n![](img/git_17.png)\n\n![](img/git_18.png)\n:::\n\nDans la fenêtre *Create Project from Version Control*, choisissez *Git*.\n\nDans la fenêtre *Clone Git Repository*, remplissez les champs : - *Repository URL* : collez le lien SSH copié dans GitLab\\\n- *Project directory name* : se remplit automatiquement\\\n- *Create project as subdirectory of* : emplacement où sera créé le projet\n\nCochez la case *Open in New Session* dans le coin inféreur gauche de la fenêtre et cliquez sur *Create Project*.\n\n::: {layout-ncol=\"2\"}\n![](img/git_19.png)\n\n![](img/git_20.png)\n:::\n\nUne nouvelle fenêtre RStudio s'ouvre. Vous remarquerez la présence d'un onglet *Git* dans votre espace de travail.\n\n## Workflow\n\nDans votre espace de travail, sous l'onglet *git*, deux fichiers sont présents :\n\n-   `.gitignore`\\\n-   `test_gitlab_rstudio.Rproj`\n\nCes fichiers ont été ajoutés dans votre répertoire de travail lors de la création du projet dans RStudio, mais ils ne sont pas présents dans votre répertoire sur GitLab. L'icône `?` indique qu'il s'agit de nouveaux fichiers.\n\n::: {.callout-tip icon=\"true\"}\n## Le statut des fichiers\n\nL'icône à gauche du nom d'un fichier dans l'onglet *git* de votre espace de travail indique le statut de ce fichier :\n\n|                     |                 |\n|---------------------|-----------------|\n| ![](img/git_22.png) | nouveau fichier |\n| ![](img/git_23.png) | fichier ajouté  |\n| ![](img/git_29.png) | fichier modifié |\n:::\n\nLe workflow git permet de synchroniser le répertoire distant (sur GitLab) avec le répertoire local (notre projet RStudio). Il comprend trois étapes :\n\n### Commit\n\nNous allons sauvegarder les modifications apportées à nos fichiers (que ce soit des modifications dans un fichier, l'ajout ou la suppression de fichiers). Nous cochons pour cela les cases à gauche des icônes de statut, qui deviennent un `A` vert. Les deux fichiers sont maintenant prêts à être mis en ligne dans notre répertoire sur GitLab. C'est la première étape du workflow git, qu'on appelle un *commit*.\n\nCliquez sur *Commit* et ajoutez un commentaire dans la fenêtre qui s'ouvre.\n\n::: {layout-ncol=\"2\"}\n![](img/git_24.png)\n\n![](img/git_25.png)\n:::\n\nCliquez ensuite sur *Commit* : un résumé de votre soumission s'affiche. Fermez cette fenêtre en cliquant sur *Close*.\n\n![](img/git_26.png)\n\nDans la fenêtre *RStudio: Review Changes*, vous pouvez lire *Your branch is ahead of 'origin/main' by 1 commit'*. Cela indique que votre branche locale est en avance d'une étape sur la branche distance sur GitLab.\n\n### Pull\n\nCela peut paraître contre-intuitif, mais il est important de nous assurer que notre répertoire local contient bien les dernières modifications sauvegardées dans notre répertoire distant. Pour cela, nous cliquons sur *Pull*.\n\n### Push\n\nIl nous reste à *pousser* nos modifications locales vers le répertoire distant en cliquant sur *Push*.\n\n![](img/git_27.png) Assurons-nous que nos modifications ont bien été exportées en rafraîchissant notre page GitLab.\n\n![](img/git_28.png)\n\n<br>\n\nNous allons modifier le fichier `README.md` : ouvrons-le en cliquant dessus dans le panneau de navigation. Le fichier s'ouvre dans le panneau *scripts*. Remplaçons le texte par la ligne suivante :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Connecter RStudio à GitLab\n```\n:::\n\n\nSauvegardons le fichier (**Ctrl + S** ou icône disquette) : le fichier apparaît dans l'onglet *git* de notre espace de travail avec une icône `M` bleue, indiquant qu'il a été modifié.\n\nNous allons effectuer les mêmes opérations que ci-dessus pour exporter nos modifications vers la branche distante du répertoire sur GitLab : *Commit* \\> *Pull* \\> *Push*.\n\n<br>\n\n## Historique des modifications\n\nTravailler avec un suivi de version permet de retracer toutes les modifications apportées aux fichiers d'un répertoire.\n\n### Dans RStudio\n\nCliquez sur l'icône horloge dans l'onglet `Git`\n\n![](img/git_30.png)\n\nL'hitorique contient toutes les mofications apportées, ainsi qu'une clé *SHA*, encore appelée *commit hash*. Il s'agit d'un identifiant unique attribué par Git à chacun des commits.\n\n### Dans GitLab\n\nSur la page d'accueil de votre répertoire disant sur GitLab, cliquez sur *3 Commits* pour accéder à l'historique des modifications.\n\n![](img/git_31.png)\n\nVous retrouverez les clés SHA à droite des commits listés dans l'historique, ainsi que deux icônes vous permettant de :\n\n-   copier la clé SHA du commit\n\n-   ouvrir l'arborescence correspond au commit\n\n# De RStudio vers GitLab\n\nNous avons jusqu'ici vu comment utiliser le suivi de version en partant d'un nouveau répertoire sur GitLab.\n\n## Dans RStudio\n\nSi nous souhaitons utiliser le suivi de version pour un répertoire présent sur notre ordinateur, deux cas de figure se présentent :\n\n### Répertoire associé à un projet RStudio\n\nSi votre répertoire est déjà associé à un projet RStudio, ouvrez ce projet. Dans notre exemple, nous utilisons le projet *ateliers_codons* créés dans [ce tutoriel](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/#cr%C3%A9er-un-projet).\n\nCliquez sur *Tools* \\> *Project Options* \\> *Git/SVN*.\n\nDans la fenêtre *Project Options*, choisissez *Git* dans le menu déroulant *Version control system*.\n\nDans la fenêtre qui s'ouvre, cliquez sur *Yes* en réponse à la question *Do you want to initialize a new git repository for this project?*.\n\nDans la fenêtre *Restart RStudio*, cliquez sur *Yes*.\n\n::: {layout-ncol=\"2\"}\n![](img/git_34.png)\n\n![](img/git_35.png)\n:::\n\nRStudio redémarre et vous remarquerez l'onglet `Git` dans l'espace de travail de votre projet.\n\n## Dans GitLab\n\nCréez un nouveau projet dans GitLab, portant le même nom que le projet RStudio pour lequel vous souhaitez utiliser le suivi de version.\n\nFaites attention à décocher la case *Initialize repository with a README*.\n\n## Dans RStudio\n\nNous allons utiliser les lignes de commandes affichées sur la page d'accueil de notre projet GitLab : ![](img/git_40.png)\n\nOuvrez un terminal dans l'onglet `Git` en cliquant sur la roue crantée puis sur *Shell*.\n\nDans l'onglet `git`, sélectionnez l'ensemble des fichiers à ajouter.\n\n::: {.callout-tip icon=\"true\"}\n## Ajouter plusieurs fichiers\n\nPour éviter d'avoir à cocher de nombres cases, vous pouvez cliquer sur le nom du premier fichier de la liste, puis utiliser la combinaison **Ctrl + A**. Cochez ensuite la case en face du premier fichier.\n:::\n\nCliquez sur *Commit*, ajoutez un commentaire dans la fenêtre qui s'ouvre et cliquez sur *Commit*. Pour l'instant, vous n'avez pas accès aux boutons *Pull* et *Push*.\n\nCliquez sur l'icône à droite du panneau `Git` :\n\n![](img/git_36.png)\n\nDans le fenêtre qui s'ouvre, cliquez sur *Add Remote*, puis renseignez les deux champs dans la fenêtre :\n\n-   *Remote Name* -\\> \"origin\"\n\n-   *Remote URL* -\\> collez le lien SSH copié dans GitLab\n\nCliquez ensuite sur *Add*.\n\n![](img/git_37.png)\n\nDans la fenêtre *New Branch*, indiquez \"master\" dans le champ *Branch Name*, et assurez-vous que la case *Sync branch with remote* est bien cochée. Cliquez sur *Create*. Dans la fenêtre *Local Branch Already Exists*, cliquez sur *Overwrite*.\n\n::: {layout-ncol=\"2\"}\n![](img/git_38.png)\n\n![](img/git_39.png)\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}