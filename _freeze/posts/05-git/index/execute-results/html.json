{
  "hash": "cd8c06791106320329faa96976450330",
  "result": {
    "markdown": "---\ntitle: \"Introduction à GitLab\"\nsubtitle: \"Connecter RStudio à GitLab et assurer le suivi de version\"\nauthor:\n  - Jonathan Kitt\ndate: \"2022-11-21\"\ndraft: true\ncategories: [R, RStudio, GitLab]\nformat: \n  html: \n    toc: true\n    toc-depth: 2\n    toc-title: \"Sommaire\"\n---\n\n\n# Introduction\n\n## Git, GitLab et suivi de version\n\n## Pré-requis\n\n### Installer git\n\nSur le site de [git](https://git-scm.com/downloads), téléchargez la dernière version pour votre système d'exploitation.\n\n![](img/git_01.png){width=\"100%\"}\n\n![](img/git_02.png){width=\"100%\"}\n\nDouble-cliquez sur l'exécutable `Git-xxxx.exe` :\n\n![](img/git_03.png){width=\"100%\"}\n\nLaissez les paramètres par défaut proposés par l'assistant d'installation. Dans le menu *Choosing the default editor used by Git*, vous pouvez laisser l'éditeur de texte proposé par défaut (Vim) ou choisir l'éditeur de texte que vous avez l'habitude d'utiliser.\n\n![](img/git_04.png){width=\"50%\"}\n\nDans les menus suivants, laissez les paramètres suivants jusqu'à ce que l'installation de `git` soit complétée.\n\n### Paramétrer RStudio\n\nOuvrez une session dans RStudio, puis cliquez sur *Tools* \\> *Global Options* \\> *Git/SVN*.\n\n![](img/git_06.png){width=\"50%\"}\n\n1. Assurez-vous que la case *Enable version control interface for RStudio projects* est cochée.  \n\n2. Assurez-vous que le chemin vers l'exécutable `git` est bien renseigné. Le cas échéant, cliquez sur *Browse* et indiquez le chemin vers son emplacement.\n\n3. Si aucune clé SSH n'est indiquée, cliquez sur *Create RSA Key...*.  \n\n4. Validez en cliquant sur *Apply*.\n\n<br>\n\nCliquez sur *View public key* et copiez la clé qui s'affiche.\n\n### Paramétrer GitLab\n\nOuvrez [ce lien](https://forgemia.inra.fr) dans votre navigateur internet et cliquez sur *Connexion SSO*.\n\n![](img/git_07.png){width=\"50%\"}\n\nDans le menu déroulant, choisissez *INRAE* et cliquez sur *Sélectionner*. Dans le menu suivant, renseignez les champs à l'aide de votre identifiant LDAP puis cliquez sur *Se connecter*.\n\n::: {layout-ncol=2}\n\n![](img/git_08.png){width=\"50%\"}\n\n![](img/git_09.png){width=\"50%\"}\n\n:::\n\n<br>\n\nCliquez sur l'icône dans le coin supérieur droit puis sur *Preferences*.\n\n![](img/git_10.png){width=\"50%\"}\n\nDans la barre de menu à gauche, cliquez sur la première icône en forme de clé. Collez dans le champ *Key* la clé SSH copiée dans RStudio. Le champ *Title* devrait se remplir automatiquement. Si ce n'est pas le cas, renseignez ce champ. Vous pouvez choisir une date d'expiration de votre clé dans *Expiration date*. Pour terminer, cliquez sur *Add key*. Assurez-vous que votre clé apparaisse bien en base de la page sous *Your SSH keys*.\n\n![](img/git_11.png)\n\n# De GitLab vers RStudio\n\n## Dans GitLab\n\nDans la barre de menu supérieure, cliquez sur l'icône *plus* et sélectionnez *New project/repository*.\nDans le menu suivant, choisissez *Create blank project*.\n\n::: {layout-ncol=2}\n\n![](img/git_12.png){width=\"50%\"}\n\n![](img/git_13.png){width=\"50%\"}\n\n:::\n\n<br>\n\nDans le menu *Create blank project*, remplissez les différents champs : \n\n- *Project name* : nom du projet (avec les mêmes conventions d'écriture que si vous étiez en train de [créer un projet dans RStudio](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/#cr%C3%A9er-un-projet)).  \n\n- *Project URL* : en fonction des groupes dont vous faites partie, vous pourrez choisir l'emplacement du projet. Pour l'instant, choisissez votre espace utilisateur.  \n\n- *Project slug* : identique au nom du projet.  \n\n- *Visibility Level* : qui a accès au projet. Pour notre exemple, choisissez *Public*.  \n\n- *Project Configuration* : cochez la case *Initialize repository with a README*. \n\nCliquez sur *Create project*. Le projet s'ouvre et vous pouvez voir qu'il contient un ficher `README.md`. Ce fichier s'affiche sur la page d'accueil de votre projet et contient par défaut des informations sur l'utilisation de GitLab.\n\n![](img/git_15.png)\n\n<br>\n\nNous allons maintenant \"rapatrier\" ce projet sur notre ordinateur. Pour cela, cliquez sur l'onglet *Clone* et choisissez *Clone with SSH*. Cliquez sur *Copy URL*.\n\n![](img/git_16.png)\n\n## Dans RStudio\n\nDans la barre de menu supérieure, cliquez sur *File* > *New project*.  \nDans la fenêtre *Create Project*, choisissez *Version Control*.\n\n::: {layout-ncol=2}\n\n![](img/git_17.png)\n\n![](img/git_18.png)\n\n:::\n\nDans la fenêtre *Create Project from Version Control*, choisissez *Git*.  \n\nDans la fenêtre *Clone Git Repository*, remplissez les champs : \n- *Repository URL* : collez le lien SSH copié dans GitLab  \n- *Project directory name* : se remplit automatiquement  \n- *Create project as subdirectory of* : emplacement où sera créé le projet\n\nCochez la case *Open in New Session* dans le coin inféreur gauche de la fenêtre et cliquez sur *Create Project*.\n\n::: {layout-ncol=2}\n\n![](img/git_19.png)\n\n![](img/git_20.png)\n\n:::\n\nUne nouvelle fenêtre RStudio s'ouvre. Vous remarquerez la présence d'un onglet *Git* dans votre espace de travail. \n\n## Workflow\n\nDans votre espace de travail, sous l'onglet *git*, deux fichiers sont présents : \n\n- `.gitignore`  \n- `test_gitlab_rstudio.Rproj`\n\nCes fichiers ont été ajoutés dans votre répertoire de travail lors de la création du projet dans RStudio, mais ils ne sont pas présents dans votre répertoire sur GitLab. L'icône `?` indique qu'il s'agit de nouveaux fichiers.\n\n::: {.callout-tip icon=\"true\"}\n## Le statut des fichiers\n\nL'icône à gauche du nom d'un fichier dans l'onglet *git* de votre espace de travail indique le statut de ce fichier : \n\n|                     |                  |\n| ------------------- | ---------------- |\n| ![](img/git_22.png) | nouveau fichier  |\n| ![](img/git_23.png) | fichier ajouté   |\n| ![](img/git_29.png) | fichier modifié  |\n\n:::\n\nLe workflow git permet de synchroniser le répertoire distant (sur GitLab) avec le répertoire local (notre projet RStudio). Il comprend trois étapes : \n\n### Commit\n\nNous allons sauvegarder les modifications apportées à nos fichiers (que ce soit des modifications dans un fichier, l'ajout ou la suppression de fichiers). Nous cochons pour cela les cases à gauche des icônes de statut, qui deviennent un `A` vert. Les deux fichiers sont maintenant prêts à être mis en ligne dans notre répertoire sur GitLab. C'est la première étape du workflow git, qu'on appelle un *commit*.\n\nCliquez sur *Commit* et ajoutez un commentaire dans la fenêtre qui s'ouvre.\n\n::: {layout-ncol=2}\n\n![](img/git_24.png)\n\n![](img/git_25.png)\n\n:::\n\nCliquez ensuite sur *Commit* : un résumé de votre soumission s'affiche. Fermez cette fenêtre en cliquant sur *Close*.\n\n![](img/git_26.png)\n\nDans la fenêtre *RStudio: Review Changes*, vous pouvez lire *Your branch is ahead of 'origin/main' by 1 commit'*. Cela indique que votre branche locale est en avance d'une étape sur la branche distance sur GitLab. \n\n### Pull\n\nCela peut paraître contre-intuitif, mais il est important de nous assurer que notre répertoire local contient bien les dernières modifications sauvegardées dans notre répertoire distant. Pour cela, nous cliquons sur *Pull*.\n\n### Push\n\nIl nous reste à *pousser* nos modifications locales vers le répertoire distant en cliquant sur *Push*. \n\n![](img/git_27.png)\nAssurons-nous que nos modifications ont bien été exportées en rafraîchissant notre page GitLab.\n\n![](img/git_28.png)\n\n<br>\n\nNous allons modifier le fichier `README.md` : ouvrons-le en cliquant dessus dans le panneau de navigation. Le fichier s'ouvre dans le panneau *scripts*. Remplaçons le texte par la ligne suivante : \n\n::: {.cell}\n\n```{.r .cell-code}\n# Connecter RStudio à GitLab\n```\n:::\n\n\nSauvegardons le fichier (**Ctrl + S** ou icône disquette) : le fichier apparaît dans l'onglet *git* de notre espace de travail avec une icône `M` bleue, indiquant qu'il a été modifié.\n\nNous allons effectuer les mêmes opérations que ci-dessus pour exporter nos modifications vers la branche distante du répertoire sur GitLab : *Commit* > *Pull* > *Push*.\n\n<br>\n\n## Historique des modifications\n\nTravailler avec un suivi de version permet de retracer toutes les modifications apportées aux fichiers d'un répertoire. \n\n### Dans RStudio\n\nCliquez sur l'icône horloge dans l'onglet `Git`\n\n![](img/git_30.png)\n\nL'hitorique contient toutes les mofications apportées, ainsi qu'une clé *SHA*, encore appelée *commit hash*. Il s'agit d'un identifiant unique attribué par Git à chacun des commits.\n\n### Dans GitLab\n\nSur la page d'accueil de votre répertoire disant sur GitLab, cliquez sur *3 Commits* pour accéder à l'historique des modifications.\n\n![](img/git_31.png)\n\nVous retrouverez les clés SHA à droite des commits listés dans l'historique, ainsi que deux icônes vous permettant de :\n\n- copier la clé SHA du commit \n\n- ouvrir l'arborescence correspond au commit\n\n# De RStudio vers GitLab\n\nNous avons jusqu'ici vu comment utiliser le suivi de version en partant d'un nouveau répertoire sur GitLab. \n\n## Dans RStudio\n\nSi nous souhaitons utiliser le suivi de version pour un répertoire présent sur notre ordinateur, deux cas de figure se présentent :\n\n### Répertoire associé à un projet RStudio\n\nSi votre répertoire est déjà associé à un projet RStudio, ouvrez ce projet. Dans notre exemple, nous utilisons le projet *ateliers_codons* créés dans [ce tutoriel](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/#cr%C3%A9er-un-projet). \n\nCliquez sur *Tools* > *Project Options* > *Git/SVN*.\n\nDans la fenêtre *Project Options*, choisissez *Git* dans le menu déroulant *Version control system*.\n\nDans la fenêtre qui s'ouvre, cliquez sur *Yes* en réponse à la question *Do you want to initialize a new git repository for this project?*.\n\nDans la fenêtre *Restart RStudio*, cliquez sur *Yes*.\n\n::: {layout-ncol=2}\n\n![](img/git_34.png)\n\n![](img/git_35.png)\n\n:::\n\nRStudio redémarre et vous remarquerez l'onglet `Git` dans l'espace de travail de votre projet. \n\n## Dans GitLab\n\nCréez un nouveau projet dans GitLab, portant le même nom que le projet RStudio pour lequel vous souhaitez utiliser le suivi de version. \n\nFaites attention à décocher la case *Initialize repository with a README*.\n\n## Dans RStudio\n\nNous allons utiliser les lignes de commandes affichées sur la page d'accueil de notre projet GitLab : \n![](img/git_40.png)\n\nOuvrez un terminal dans l'onglet `Git` en cliquant sur la roue crantée puis sur *Shell*.\n\n\n\nDans l'onglet `git`, sélectionnez l'ensemble des fichiers à ajouter.\n\n::: {.callout-tip icon=\"true\"}\n## Ajouter plusieurs fichiers\n\nPour éviter d'avoir à cocher de nombres cases, vous pouvez cliquer sur le nom du premier fichier de la liste, puis utiliser la combinaison **Ctrl + A**. Cochez ensuite la case en face du premier fichier.\n:::\n\nCliquez sur *Commit*, ajoutez un commentaire dans la fenêtre qui s'ouvre et cliquez sur *Commit*. Pour l'instant, vous n'avez pas accès aux boutons *Pull* et *Push*.\n\nCliquez sur l'icône à droite du panneau `Git` : \n\n![](img/git_36.png)\n\nDans le fenêtre qui s'ouvre, cliquez sur *Add Remote*, puis renseignez les deux champs dans la fenêtre : \n\n- *Remote Name* -> \"origin\"\n\n- *Remote URL* -> collez le lien SSH copié dans GitLab\n\nCliquez ensuite sur *Add*.\n\n![](img/git_37.png)\n\nDans la fenêtre *New Branch*, indiquez \"master\" dans le champ *Branch Name*, et assurez-vous que la case *Sync branch with remote* est bien cochée. Cliquez sur *Create*. Dans la fenêtre *Local Branch Already Exists*, cliquez sur *Overwrite*.\n\n::: {layout-ncol=2}\n\n![](img/git_38.png)\n\n![](img/git_39.png)\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}