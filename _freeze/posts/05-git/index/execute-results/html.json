{
  "hash": "62d5285ee55c37ec104eff6db7d6523b",
  "result": {
    "markdown": "---\ntitle: \"Introduction à GitLab\"\nsubtitle: \"Connecter RStudio à GitLab et assurer le suivi de version\"\nauthor:\n  - Jonathan Kitt\ndate: \"2022-12-12\"\ndraft: true\ncategories: [R, RStudio, GitLab]\nformat: \n  html: \n    toc: true\n    toc-depth: 2\n    toc-title: \"Sommaire\"\n---\n\n\n# Introduction\n\n<br>\n\n## Git, GitHub et GitLab\n\n<br>\n\nLorsqu'on travaille sur des données ou qu'on rédige un rapport, on peut rapidement se retrouver avec beaucoup de fichiers aux noms plus ou moins explicites : `fichier.txt`, `fichier2.txt`, `fichier2_modifs.txt`, `fichier2_version1.txt`, ... Difficile de s'y retrouver !\n\n<br>\n\n![Dessing de PHDComics](img/git_notfinal.gif){width=\"50%\"}\n\n<br>\n\n[**Git**](https://git-scm.com/) est un *gestionnaire de versions*, gratuit et open source qui permet de garder une trace de toutes les modifications apportées à un fichier.\n\nGit vous permet de \"figer\" l'état de votre répertoire de travail à un instant donné à l'aide de **commits**. \n\nVous pourrez ainsi naviguer dans l'historique des modifications d'un fichier, savoir quand une modification a été faite et en quoi consiste cette modification. \n\nVous pourrez revenir à un état antérieur de votre fichier en remontant dans l'historique des modifications.\n\nGit vous permet également de travailler sur des **branches**. La branche principale sur laquelle se situe votre travail \"propre\" se nomme la branche **master**. Vous pouvez créer une seconde branche pour effectuer des tests, faire du développement, tout en laissant intacte la branche master. Vous pourrez inclure les modifications apportées sur la seconde branche dans la branche master en les fusionnant : c'est ce qu'on appelle un **merge**.\n\nGit vous permet également de faire une sauvegarde de vos modifications sur un serveur distant : [**Github**](https://github.com/) ou [**Gitlab**](https://gitlab.com). \nCes outils permettent de travailler à plusieurs sur un même projet, de synchroniser vos répertoires locaux et distants, de partager votre code, ...\n\n<br>\n\n## Installer git\n\n<br>\n\n### Windows\n\n<br>\n\nCliquez sur [ce lien](https://gitforwindows.org/) pour télécharger et installer la dernière version de git pour Windows. Lors de l'installation, laissez les paramètres par défaut.\n\n<br>\n\n### Linux\n\n<br>\n\nPour installer git sur Linux, suivez les instructions sur [ce lien](https://git-scm.com/download/linux).\n\n<br>\n\n### MacOS\n\n<br>\n\nPour installer git sur MacOS, suivez les instructions sur [ce lien](https://git-scm.com/download/mac).\n\n<br>\n\n# Premiers pas avec git\n\n<br>\n\nOuvrez RStudio, et cliquez sur *Tools > Global Options > Git/SVN*. \n\nAssurez-vous que la case *Enable version control interface for RStudio projects* est cochée, et que le chemin vers l'exécutable *git* est bien renseigné. Si ce n'est pas le cas, cliquez sur *Browse* et indiquez-le. Validez en cliquant sur *Apply*.\n\n![](img/git_05.png){width=\"50%\"}\n\n<br>\n\nCréez un [nouveau projet RStudio](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/#créer-un-projet).\n\n<br>\n\n## Workflow git en ligne de commande\n\n<br>\n\nDans votre session RStudio, ouvrez un *terminal* :\n\n![](img/git_cmd_01.png){width=\"50%\"}\n\n<br> Tapez la ligne de commande suivante pour afficher la version de *git* installée sur votre ordinateur :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit --version\n```\n:::\n\n\n<br>\n\n### Paramétrer git\n\n<br>\n\nDans un premier temps, nous allons paramétrer *git* en renseignant un nom d'utilisateur et un e-mail qui seront utilisés pour nous identifier dans l'historique (cela nous permettra si nous travaillons à plusieurs sur un même projet de savoir qui a fait quoi). Dans la suite du turoriel nous verrons comment connecter RStudio à GitLab, nous allons donc utiliser nos identifiants LDAP :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit config --global --user.name \"Prenom Nom\"  \ngit config --global --user.email prenom.nom@inrae.fr\n```\n:::\n\n\nAssurez-vous que ces paramètres ont bien été pris en compte :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit config --global --list\n```\n:::\n\n\n<br>\n\n### Initialiser git\n\n<br>\n\nVotre répertoire de travail (le projet RStudio) n'est pour le moment pas versionné.\n\nIl vous faut pour cela associer un répertoire git à votre répertoire de travail, en **initialisant** git :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit init\n```\n:::\n\n\nAssurez-vous que le répertoire *git* a bien été créé. La commande `ls` permet de lister les fichiers du répertoire actuel, et les options `-la` permettent d'afficher le détail (droits, date, ...) et d'inclure les dossiers cachés (dont le nom commence par un point `.`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls -la\n```\n:::\n\n\n<br>\n\n### Ignorer des fichiers\n\n<br>\n\nParmi les fichiers et répertoires listés ci-dessus, le répertoire `.Rproj.user` n'a pas besoin d'être versionné. Nous allons pour cela ajouter à notre répertoire de travail un fichier dans lequel nous pourrons lister les fichiers et répertoires que git devra ignorer.\n\nCréez un fichier texte basique en cliquant sur *File > New File > Text File*. Sauvegardez ce fichier à la racine de votre répertoire de travail en le nommant `.gitignore`. Ajoutez une ligne à ce fichier :\n\n![](img/git_cmd_10.png)\n\n<br>\n\nVérifiez l'état dans lequel se trouve votre répertoire :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n\n![](img/git_cmd_02.png){width=\"50%\"}\n\n<br>\n\nLe terminal affiche plusieurs informations :\n\n-   *On branch master* : vous vous trouvez sur la branche principale (la seule pour le moment)\n\n-   *No commits yet* : vous n'avez pas encore figé l'état de votre répertoire à l'aide d'un commit\n\n-   *Untracked files* : des fichiers non versionnés sont présents dans le répertoire de travail\n\n-   *nothing added to commit but untracked files present* : résumé des lignes précédentes\n\n-   *use \"git add\" to track* : pour figer l'état de ces fichiers et tracer l'historique des modifications, nous utiliserons la commande `git add`.\n\n<br>\n\nPour afficher également les fichiers ignorés, utilisez la commande `git status --ignored`.\n\n<br>\n\n### Ajouter des fichiers (`git add`)\n\n<br>\n\nPour versionner des fichiers, vous pouvez les ajouter à l'aide de la commande `git add` :  \n\n- soit en précisant les noms des fichiers les uns à la suite des autres  \n\n- soit à l'aide du symbole `*` pour ajouter tous les fichiers présents dans le répertoire de travail  \n\n- soit à l'aide d'un point `.` pour ajouter l'ensemble du répertoire actuel\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ajouter les fichiers un a un\ngit add .gitignore tutoriel_git.Rproj\n\n# Ajouter tous les fichiers du repertoire de travail\ngit add *\n  \n# Ajouter le répertoire actuel\ngit add .\n```\n:::\n\n\nAffichez l'état de votre répertoire à l'aide de la commande `git status`. Vous remarquerez que les noms des fichiers ajoutés apparaissent en vert.\n\n<br>\n\nDe nouvelles informations sont affichées dans le terminal :\n\n-   *No commits yet* : les fichiers ont été ajoutés mais leur état n'a pas encore été figé par un commit\n\n-   *Changes to be commited* : liste des fichiers ajoutés mais pas encore figés\n\n<br>\n\nLa commande à utiliser pour annuler l'ajout des fichiers est indiquée :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Annuler l'ajout de fichiers un par un\ngit rm --cached .gitignore tutoriel_git.Rproj\n\n# Annuler l'ajout de tous les fichiers du repertoire de travail\ngit rm --cached *\n```\n:::\n\n\n<br>\n\n::: {.callout-note icon=\"true\"}\n## rm -r\n\nL'argument `-r` permet de supprimer de façon récursive un dossier.\n:::\n\n<br>\n\n### Figer l'état du répertoire (`git commit`)\n\n<br>\n\nNous allons maintenant figer l'état de notre répertoire de travail à l'aide de la commande `git commit -m ...`. Un commit est toujours associé à un message (`-m`) à écrire entre guillemets (`\"message\"`) pour préciser ce que nous faisons. Soyez le plus précis possible dans vos messages de commits, cela vous permettra de vous y retrouver dans l'historique des modifications !\n\n![Dessin de @xkcd](img/git_commit_2x.png){width=\"50%\"}\n\n<br>\n\nEffectuez le premier commit à l'aide de la commande suivante :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit commit -m \"premier commit\"\n```\n:::\n\n\nSi vous tapez `git status` dans le terminal, celui-ci affiche *nothing to commit, working tree clean*. Cela indique que votre commit a bien été effectué.\n\n<br>\n\nLa commande `git log` permet d'afficher l'historique de votre répertoire :\n\n![](img/git_cmd_04.png)\n\n-   *commit \\### (HEAD -\\> master)* vous donne l'identifiant unique du commit (qu'on appelle **hash**) et indique où pointe votre dernier commit (sur la branche master)\n\n-   *auteur* (avec les identifiants renseignés plus haut), *date* et *message* du commit\n\n<br>\n\nAjoutez un fichier README dans votre répertoire : *File > New File > Markdown File*. \nAjoutez une ligne et sauvegardez le fichier à la racine de votre répertoire :\n\n![](img/git_md_01.png){width=\"50%\"}\n\n<br>\n\nAjoutez ce fichier et effectuez un commit :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add README.md\ngit commit -m \"ajout d'un fichier README.md\"\n```\n:::\n\n\nAffichez l'historique de vos commits à l'aide de la commande `git log`.\n\n<br>\n\nAjoutez une ligne de texte dans votre fichier `README.md` et sauvegardez-le :\n\n![](img/git_cmd_06.png){width=\"50%\"}  \n\nTapez les commandes suivantes :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add README.md\ngit commit -m \"ajout d'une ligne de texte dans le fichier README.md\"\n```\n:::\n\n\n<br>\n\n### Naviguer dans les commits (`git chekout` et `git switch`)\n\n<br>\n\nAffichez à nouveau l'historique avec `git log`.\n\nNous allons revenir au commit précédent dans notre historique. \n\nPour cela, copiez l'identifiant unique du commit auquel vous souhaitez revenir :\n\n![](img/git_cmd_07.png){width=\"50%\"}\n\n<br>\n\nDans le terminal, tapez la commande suivante (en collant l'identifiant du commit à la place de *<commit_id>*) :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit checkout <commit_id> .\n```\n:::\n\n\n::: {.callout-caution icon=\"true\"}\n## git checkout <commit_id> .\n\nN'oubliez pas le point à la fin de la ligne de commande !\n:::\n\n<br>\n\nVous remarquerez que dans votre fichier `README.md`, la ligne que vous aviez ajoutée n'est plus visible.\n\nPour revenir au dernier commit effectué, vous pouvez procéder de la même façon en copiant l'identifiant du commit et en utilisant la commande `git checkout <commit_id> .`. \n\nVous pouvez également utiliser la commande `git reset --hard HEAD`.\n\n<br>\n\n### Créer une branche (`git branch`)\n\n<br>\n\nLes branches vous permettent de travailler sur vos fichiers sans impacter la branche principale.\n\nCréez une branche \"dev\" : `git branch dev`.\n\nPour afficher les différentes branches, utilisez la commande `git branch` :\n\n![](img/git_cmd_11.png){width=\"50%\"}\n\nL'astérisque indique la branche sur laquelle vous vous situez.\n\nPour changer de branche, utilisez la commande `git checkout <nom-de-la-branche>` ou `git switch <nom-de-la-branche>`. \n\nExécutez les commandes suivantes :\n\n![](img/git_cmd_12.png){width=\"50%\"}\n\n<br>\n\nPour supprimer une branche, utilisez la commande `git branch -d <nom-de-la-branche>`. \nAvant de pouvoir supprimer la branche *dev*, il faut se placer sur la branche *master*.\n\n<br>\n\nLa commande `git checkout -b <nom-de-la-nouvelle-branche>` permet de créer une branche et de s'y placer.\n\n<br>\n\nPour créer une nouvelle branche à partir d'un commit précis, précisez l'identifiant du commit : `git checkout -b <nom-de-la-branche> <commit_id>`.\nUtilisez cette commande pour créer une branche *dev* au niveau de l'avant-dernier commit de votre historique.\n\n<br>\n\nModifiez le fichier README.md sur la branche dev :\n\n![](img/git_cmd_14.png){width=\"50%\"}\n\nEffectuez un `add + commit` sur cette branche dev :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add README.md\ngit commit -m \"modification du fichier README.md sur la branche dev\"\n```\n:::\n\n\n<br>\n\nEn naviguant entre les branches à l'aide de `git checkout` (ou de `git switch`) pour afficher l'historique avec `git log`, vous remarquerez que l'historique varie en fonction de la branche.\n\n<br>\n\n### Fusionner les branches et résoudre les conflits (`git merge`)\n\n<br>\n\nUne fois que vous avez terminé de travailler sur votre branche *dev*, vous pouvez \"rapatrier\" les modifications apportées sur cette branche sur votre branche *master*.\n\nPlacez-vous sur la branche *master* : `git checkout master`.\n\nPour fusionner la branche dev sur la branche master, utilisez la commande `git merge dev` :\n\n![](img/git_cmd_15.png){width=\"50%\"}\n\nLe terminal nous indique qu'il y a un **conflit** : le fichier README.md diffère entre les deux branches. Il vous faut résoudre ce conflit avant de pouvoir fusionner les deux branches.\n\n<br>\n\nRegardons à quoi ressemble notre fichier README.md :\n\n![](img/git_cmd_16.png){width=\"50%\"}\n\n-   Les marqueurs de conflit indiquent le début (`<<<<`) et la fin (`>>>`) du conflit\n\n-   Les noms des branches sont indiqués à côté de ces marqueurs de conflit\n\n-   L'indicateur `=====` montre la séparation entre les modifications des deux branches\n\nIl vous incombe de choisir quelle version conserver : supprimez les indicateurs `<<<`, `>>>` et `===` et ne gardez que le texte présent dans le fichier de la branche *dev*.\n\n<br>\n\nVérifiez l'état de notre branche *master* à l'aide de la commande `git status` :\n\n![](img/git_cmd_17.png){width=\"50%\"}\n\nLes deux branches ne sont pas fusionnées, mais les modifications ont bien été prises en compte.\n\n<br>\n\nAjoutez le fichier `README.md` et effectez un commit :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add README.md\ngit commit -m \"resolution de conflit entre les branches master et dev\"\n```\n:::\n\n\nEn affichant l'historique avec `git log` vous verrez maintenant l'ensemble des commits effectués sur les deux branches.\n\n![](img/git_cmd_18.png){width=\"50%\"}\n\nVous pouvons maintenant supprimer la branche *dev* : `git branch -d dev`\n\n<br>\n\n## Workflow git en \"clique-bouton\"\n\n<br>\n\nNous allons voir comment effectuer les mêmes étapes à l'aide de l'interface RStudio.\n\nCréez un nouveau projet RStudio.\n\n<br>\n\n### Initialiser git\n\n<br>\n\nPour initialiser git, cliquez sur *Tools > Project Options*, puis dans le menu *Git/SVN* sélectionnez *Git* :\n\n![](img/git_ide_01.png){width=\"50%\"}\n\nDans les fenêtres qui s'ouvrent, cliquez sur *Yes*.\n\nRStudio redémarre, et vous remarquerez la présence d'un onglet *Git* dans votre espace de travail. En cliquant dessus, vous verrez qu'un fichier `.gitignore` a été ajouté automatiquement :\n\n::: {layout-ncol=\"2\"}\n\n![](img/git_ide_02.png){width=\"50%\"}  \n\n![](img/git_ide_03.png){width=\"50%\"}\n\n:::\n\n<br>\n\n::: {.callout-tip icon=\"true\"}\n\n## Initialiser git lors de la création d'un projet\n\nLorsque vous créez un nouveau projet RStudio, vous pouvez cocher la case *Create a git repository*\n\n:::\n\n<br>\n\n### Ajouter des fichiers\n\n<br>\n\nPour ajouter des fichiers, cochez-les dans l'onglet git. Leur statut change et une icône *A* (pour *added*) s'affiche à côté des noms de fichiers.\n\n![](img/git_ordi_vide_01.png){width=\"50%\"}\n\n::: {.callout-tip icon=\"true\"}\n\n## Sélectionner plusieurs fichiers\n\nQuand vous travaillez avec beaucoup de fichiers versionnés, vous pouvez tous les sélectionner : cliquez sur le nom d'un des fichiers dans l'onglet git, puis utilisez la combinaison **Ctrl + A** et enfin cochez la case à côté du premier fichier.\n\n:::\n\n<br>\n\nLes fichiers présents dans l'onglet *Git* de votre espace de travail peuvent avoir différents *statuts* : \n\n|                              |                  |\n| ---------------------------- | ---------------- |\n| ![](img/status_new.png)      | nouveau fichier  |\n| ![](img/status_added.png)    | fichier ajouté   |\n| ![](img/status_modified.png) | fichier modifié  |\n| ![](img/status_deleted.png)  | fichier supprimé |\n\n<br>\n\n### Effectuer un commit\n\n<br>\n\nCliquez sur *Commit*.\n\n![](img/git_ordi_vide_01bis.png){width=\"50%\"}\n\n<br>\n\nDans la fenêtre qui s'ouvre, nous allons écrire le message du commit (ce que nous mettions après `-m`) et cliquons à nouveau sur *Commit*.\n\n![](img/git_ordi_vide_02.png){width=\"50%\"}\n\n<br>\n\nEn cliquant sur l'icône *horloge* vous pouvez voir l'historique de nos commits.\n\n![](img/git_ordi_vide_01ter.png){width=\"50%\"}\n\n<br>\n\n### Créer une branche\n\n<br>\n\nVous pouvons créer une nouvelle branche en cliquant sur l'icône à gauche du nom de la branche actuelle, en précisant le nom et en cliquant sur *Create* :\n\n![](img/git_ordi_vide_04.png){width=\"50%\"}\n\n<br>\n\nVous pouvez maintenant naviguer entre les branches en cliquant sur leurs noms :\n\n![](img/git_ordi_vide_05.png){width=\"50%\"}\n\n::: {.callout-important icon=\"true\"}\n\n## Limites de l'approche clique-bouton\n\nL'onglet *Git* dans l'interface RStudio ne vous permettra pas d'effectuer les opérations suivantes, pour lesquelles vous devrez passer par la ligne de commande : \n- revenir à un commit précédent  \n- créer une branche à partir d'un commit précis  \n- résoudre des conflits entre branches\n\n:::\n\n<br>\n\n# Connecter RStudio à GitLab\n\n<br>\n\nNous avons jusqu'ici utilisé *git* en local pour suivre les modifications apportées à des fichiers sur notre ordinateur. \n\nNous allons maintenant voir comment connecter RStudio à *Gitlab* afin de pouvoir : \n\n- synchroniser nos répertoires entre plusieurs ordinateurs  \n- travailler à plusieurs sur un même projet  \n- rapatrier en local un répertoire distant pour travailler dessus\n\nLa première chose à faire est de créer un paire de clés SSH qui nous permettra de communiquer entre notre ordinateur et le serveur distant *Gitlab*.\n\n<br>\n\n## Créer des clés SSH\n\n<br>\n\nDans RStudio, puis cliquez sur *Tools* \\> *Global Options* \\> *Git/SVN*.\n\nSi aucune clé n'est indiquée dans *SSH key*, cliquez sur *Create SSH Key ...*.\n\n![](img/git_06bis.png){width=\"50%\"}\nDans *SSH key type*, sélectionnez *RSA* puis validez en cliquant sur *Create*.\n\n![](img/git_ordi_vide_07.png){width=\"50%\"}\n\n<br>\n\nCliquez sur *View public key* et copiez la clé qui s'affiche.\n\n![](img/git_06ter.png){width=\"50%\"}\n\n<br>\n\n## Paramétrer GitLab\n\n<br>\n\nOuvrez [ce lien](https://forgemia.inra.fr) dans votre navigateur internet et cliquez sur *Connexion SSO*.\n\n![](img/git_07.png){width=\"50%\"}\n\nDans le menu déroulant, choisissez *INRAE* et cliquez sur *Sélectionner*. Dans le menu suivant, renseignez les champs à l'aide de votre identifiant LDAP puis cliquez sur *Se connecter*.\n\n::: {layout-ncol=\"2\"}\n![](img/git_08.png){width=\"50%\"}\n\n![](img/git_09.png){width=\"50%\"}\n:::\n\n<br>\n\nCliquez sur l'icône dans le coin supérieur droit puis sur *Preferences*.\n\n![](img/git_10.png){width=\"25%\"}\n\nDans la barre de menu à gauche, cliquez sur la première icône en forme de clé. Collez dans le champ *Key* la clé SSH copiée dans RStudio. Le champ *Title* devrait se remplir automatiquement. Si ce n'est pas le cas, renseignez ce champ. Vous pouvez choisir une date d'expiration de votre clé dans *Expiration date*. Pour terminer, cliquez sur *Add key*. Assurez-vous que votre clé apparaisse bien en base de la page sous *Your SSH keys*.\n\n![](img/git_11.png)\n\n<br>\n\n# Exporter un répertoire local vers Gitlab\n\nNous allons exporter vers Gitlab le projet RStudio existant.\n\n<br>\n\n## Dans GitLab\n\nDans la barre de menu supérieure, cliquez sur l'icône *plus* et sélectionnez *New project/repository*. Dans le menu suivant, choisissez *Create blank project*.\n\n::: {layout-ncol=\"2\"}\n![](img/git_12.png){width=\"50%\"}\n\n![](img/git_13.png){width=\"50%\"}\n:::\n\n<br>\n\nDans le menu *Create blank project*, remplissez les différents champs :\n\n-   *Project name* : le même nom que votre projet RStudio.  \n\n-   *Project URL* : en fonction des groupes dont vous faites partie, vous pourrez choisir l'emplacement du projet. Pour l'instant, choisissez votre espace utilisateur.\n\n-   *Project slug* : identique au nom du projet.\n\n-   *Visibility Level* : qui a accès au projet. Pour notre exemple, choisissez *Public*.\n\n-   *Project Configuration* : décochez la case *Initialize repository with a README*.\n\nCliquez sur *Create project*.\n\n![](img/gitlab_01.png){width=\"50%\"}\n\n<br>\n\nDans la fenêtre qui s'ouvre, vous verrez une liste de commandes  : \n\n- *Git global setup* : nous l'avons fait au début du tutoriel  \n\n- *Create a new repository* : télécharger votre répertoire *Gitlab* en local  \n\n- *Push an existing folder* : exporter un dossier local vers *Gitlab*  \n\n- *Push an existing Git repository* : exporter un répertoire *Git* local vers *Gitlab (c'est ce qui nous intéresse)\n\n<br>\n\n\n## Dans RStudio\n\nDans votre projet, ouvrez un terminal, et exécutez les lignes de commande suivantes (vous pouvez les copier directement depuis *Gitlab*) : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit remote add origin git@forgemia.inra.fr:<prenom.nom>/<nom_projet>.git\ngit push -u origin --all\n```\n:::\n\n\nSi c'est la première fois que vous vous connectez à Gitlab depuis RStudio, vous verrez un message dans le terminal si demandant si vous êtes certain de vouloir continuer la connexion. Tapez *yes* et appuyez sur *Entrée*.\n\n![](img/git_ordi_vide_08.png){width=\"50%\"}\n\nLe terminal vous indiquera des détails comme le nombre de fichiers à exporter et la progression de la connexion.\n\n<br>\n\nDans l'onglet *Git* de RStudio, deux flèches sont maintenant accessibles : \n\n- *Flèche bleue* pour récupérer en local les dernières modifications du répertoire distant (**Pull**)  \n\n- *Flèche verte* pour exporter les dernières modifications effectuées en local sur le serveur distant (**Push**)\n\n![](img/gitlab_02.png){width=\"50%\"}\n\nSi vous rafraîchissez votre page *Gitlab*, les fichiers `.gitignore`, `README.md` et `<nom_projet>.Rproj` devraient apparaître.\n\n<br>\n\n# Importer un répertoire distant vers RStudio\n\n<br>\n\nNous allons voir comment importer un répertoire distant présent sur *Gitlab* vers notre ordinateur. Fermez votre sessions RStudio et supprimez le dossier contenant le projet local sur votre ordinateur.\n\n<br>\n\n## Dans Gitlab\n\n<br>\n\nSur la page d'accueil du répertoire, cliquez sur *Clone* puis copiez le lien *SSH* : \n\n![](img/gitlab_03.png){width=\"50%\"}\n\n<br>\n\n## Dans RStudio\n\n<br>\n\nOuvrez une nouvelle session RStudio. Dans la barre de menu supérieure, cliquez sur *File* > *New project*.\n\nDans la fenêtre *Create Project*, choisissez *Version Control*.\n\n::: {layout-ncol=\"2\"}\n![](img/git_17.png)\n\n![](img/git_18.png)\n:::\n\nDans la fenêtre *Create Project from Version Control*, choisissez *Git*.\n\nDans la fenêtre *Clone Git Repository*, remplissez les champs : \n\n- *Repository URL* : collez le lien SSH copié dans GitLab  \n\n- *Project directory name* : se remplit automatiquement  \n\n- *Create project as subdirectory of* : emplacement où sera créé le projet\n\nCochez la case *Open in New Session* dans le coin inféreur gauche de la fenêtre et cliquez sur *Create Project*.\n\n::: {layout-ncol=\"2\"}\n![](img/git_19.png)\n\n![](img/git_20.png)\n:::\n\n<br>\n\nLe projet s'ouvre dans une nouvelle fenêtre.\n\n## Le statut des fichiers\n\nL'icône à gauche du nom d'un fichier dans l'onglet *git* de votre espace de travail indique le statut de ce fichier :\n\n|                     |                 |\n|---------------------|-----------------|\n| ![](img/git_22.png) | nouveau fichier |\n| ![](img/git_23.png) | fichier ajouté  |\n| ![](img/git_29.png) | fichier modifié |\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}