{
  "hash": "41a4688714efc998ef4e927758fda4b8",
  "result": {
    "markdown": "---\ntitle: \"Introduction à ggplot2\"\nsubtitle: \"Créer des graphiques à l'aide du package {ggplot2}\"\nauthor:\n  - Jonathan Kitt\ndate: \"2022-12-12\"\ndraft: true\ncategories: [R, RStudio, Graphiques, ggplot2]\nformat: \n  html: \n    toc: true\n    toc-depth: 2\n    toc-title: \"Sommaire\"\n---\n\n\n# Introduction\n\n<br>\n\n## La grammaire des graphiques\n\n<br>\n\nLe package [`{ggplot2}`](https://ggplot2.tidyverse.org/) (qui fait partie du [Tidyverse](https://www.tidyverse.org/)) repose sur le principe de la **grammaire des graphiques** : un graphique se construit couche par couche.\n\n![](img/ggplot-grammar-of-graphics.png){width=\"50%\"}\n\n<br>\n\n## Pré-requis\n\n<br>\n\nSi vous n'avez pas suivi les autres tutoriels, vous pouvez [créer un projet RStudio](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/#créer-un-projet) et [une arborescence](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/#créer-une-arborescence).\n\nCommencez par installer le package `{ggplot2}`. Vous pouvez également installer et charger le `{tidyverse}` (préférez cette solution si vous comptez manipuler les données avant de créer les graphiques).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Installer et charger le package {ggplot2}\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\n\n# Installer et charger la suite {tidyverse}\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n<br>\n\n## Le jeu de données\n\n<br>\n\nNous allons utiliser le jeu de données tiré du package [`{Palmer penguins}`](https://allisonhorst.github.io/palmerpenguins/).  \n\nPour importer ce jeu de données, utilisez la commande suivante : \n\n\n::: {.cell}\n\n```{.r .cell-code}\npingouins <- readr::read_csv(\"https://raw.githubusercontent.com/codons-blog/ateliers_codons/main/data/pingouins_propre.csv\")\n```\n:::\n\n\nExplorons rapidement ces données : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::glimpse(pingouins)\n```\n:::\n\n\n<br>\n\n# Graphiques simples\n\n<br>\n\n## Nuage de points \n\n<br>\n\nUn `{ggplot2}` nécessite au minimum les trois éléments suivants :   \n\n- les données utilisées (**data**)  \n\n- l'apparence esthétique des éléments du graphique, comme la position, la couleur, la taille, la forme, et la transparence (**aesthetics**)  \n\n- les formes utilisées pour représenter les données (**geometries**)\n\nCes trois éléments suffisent pour créer un graphique simple. Il existe beaucoup d'autres éléments permettant la personnalisation du graphique.\n\n<br>\n\nCréons un nuage de points représentant la longueur du bec en fonction de la longueur des ailes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 01-1.png){width=672}\n:::\n:::\n\n\nCette commande permet d'initialiser notre graphique. Seul l'arrière-plan gris est visible pour le moment.\n\nAjoutons les deux variables que nous souhaitons représenter : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       mapping = aes(x = longueur_aile_mm, y = longueur_bec_mm))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 02-1.png){width=672}\n:::\n:::\n\n\nLes deux variables ont été ajoutées, et les échelles des deux axes ont été automatiquement calculées.\n\n::: {.callout-note icon=\"true\"}\n\n## mapping = aes() ou aes()\n\nL'argument `mapping =` n'est pas indispensable, le code suivant fonctionnera de la même façon : \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = longueur_aile_mm, y = longueur_bec_mm))\n```\n:::\n\n\n:::\n\nPour finir, nous allons préciser que nous souhaitons représenter la relation entre ces deux variables à l'aide d'un nuage de points : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = longueur_aile_mm, y = longueur_bec_mm)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 03-1.png){width=672}\n:::\n:::\n\n\nUn graphique `{ggplot2}` peut être stocké dans un objet. Cela permet de définir le graphique basique puis d'y apporter des modifications.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggplot(data = pingouins,\n       aes(x = longueur_aile_mm, y = longueur_bec_mm))\n```\n:::\n\n\n\n::: {.callout-caution icon=\"true\"}\n\n## Le `+`\n\nLorsque vous créez un graphique avec `{ggplot2}`, l'ajout d'une nouvelle couche s'effectue à l'aide d'un `+` à la fin de la ligne.\n\n:::\n\n<br>\n\n### Ajouter des couleurs\n\n<br>\n\nLe nuage de points ci-dessus représente la relation entre deux variables, mais ne nous donne aucune indication sur l'identité de chaque point. Nous aimerions colorer chaque point en fonction de l'espèce de l'individu.\n\nIl existe deux façons d'ajouter de la couleur à un graphique `{ggplot2}` : \n\n- colorer l'ensemble des éléments (points, lignes, ...) avec une même couleur  \n\n- colorer chaque élément en fonction d'une autre variable (ici l'espèce)  \n\n<br>\n\nPour colorer l'ensemble des points, nous ajoutons un argument `color` (`colour` et `col` fonctionnent également) en dehors des parenthèses définissant l'esthétique du graphique : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(col = \"darkblue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 04-1.png){width=672}\n:::\n:::\n\n\nL'argument `alpha` permet de définir la transparence des points. Il prend une valeur numérique entre 0 (transparent) et 1 (opaque) : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(col = \"darkblue\", alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 05-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip icon=\"true\"}\n\n## Les couleurs\n\nVous pouvez utiliser des couleurs prédéfinies (voir la liste [ici](https://www.datanovia.com/en/blog/awesome-list-of-657-r-color-names/)).  \n\nVous pouvez également utiliser des codes hexadécimaux ou encore des couleurs RGB à l'aide de la fonction `rgb()` :\n \n\n::: {.cell}\n\n```{.r .cell-code}\ng + geom_point(col = \"darkblue\")\ng + geom_point(col = \"#00008b\")\ng + geom_point(col = rgb(red = 0, green = 0, blue = 139, maxColorValue = 255))\n```\n:::\n\n\n:::\n\n<br>\n\nPour colorer les points selon l'espèce, nous plaçons l'argument `color` dans une parenthèse `aes()` en précisant la variable à utiliser pour définir les groupes d'individus : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(aes(col = espece))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 06-1.png){width=672}\n:::\n:::\n\n\nUne légende permettant de différencier les gorupes a été ajoutée à droite du graphique.\n\n<br>\n\n::: {.callout-note icon=\"true\"}\n\n## L'ordre des arguments\n\nLorsque vous créez un graphique avec `{ggplot2}`, l'ordre des arguments peut varier. Si vous n'utilisez qu'un seul jeu de données, vous pouvez définir plusieurs arguments dans la parenthèse `ggplot()`. Si votre graphique utilisera plusieurs jeux de données, vous préciserez dans chaque couche quelles données utiliser.\nLes paramètres esthétiques définis dans la parenthèse `ggplot()` seront appliqués à l'ensemble des couches, alors que ceux définis dans une parenthèse `geom()` ne concerneront que cette couche.\n\nVoici plusieurs manières d'écrire le code pour créer un même graphique : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins) +\n  geom_point(aes(x = longueur_aile_mm, y = longueur_bec_mm, col = espece))\n\nggplot(data = pingouins, aes(x = longueur_aile_mm, y = longueur_bec_mm)) +\n  geom_point(aes(col = espece))\n\nggplot(data = pingouins, aes(x = longueur_aile_mm, y = longueur_bec_mm,\n                             col = espece)) +\n  geom_point()\n\nggplot() +\n  geom_point(data = pingouins, aes(x = longueur_aile_mm, y = longueur_bec_mm,\n                                   col = espece))\n```\n:::\n\n\n:::\n\n<br>\n\n### Modifier l'apparence des points\n\n<br>\n\nL'argument `shape` permet de changer la forme des points. Comme pour la couleur, vous pouvez utiliser une seule forme pour l'ensemble des points, ou utiliser différentes formes pour représenter des groupes.\n\nLa forme des points peut être précisées à l'aide :  \n\n- d'un code numérique :  \n![](img/points-symbols.png){width=\"50%\"}  \n\n- d'un nom (`square`, `circle`, `diamond`, ...)\n\nModifions la forme de l'ensemble des points : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(shape = 5,\n             aes(col = espece))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 07-1.png){width=672}\n:::\n:::\n\n\nUtilisons différentes formes en fonction de l'île : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(aes(col = espece, shape = ile))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 08-1.png){width=672}\n:::\n:::\n\n\n<br>\n\nL'argument `size` permet de modificer la taille des points. Là encore, nous pouvons définir une même taille pour l'ensemble des points, ou représenter une variable continue de nos données à l'aide de la taille.\n\nAugmentons la taille de l'ensemble des points : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(shape = 5, size = 3,\n             aes(col = espece))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 09-1.png){width=672}\n:::\n:::\n\n\nUtilisons la taille pour représenter la masse des pingouins : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(aes(col = espece, shape = ile, size = masse_corporelle_g))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 10-1.png){width=672}\n:::\n:::\n\n\n<br>\n\n::: {.callout-tip icon=\"true\"}\n\n## L'argument `stroke`\n\nLes formes 21 à 25 peuvent prendre plusieurs arguments :  \n\n- `color` : couleur du contour  \n- `fill` : couleur de remplissage  \n- `stroke` : largeur du contour\n\n:::\n\n<br>\n\n### Ajouter et modifier des titres\n\n<br>\n\nLa fonction `labs()` permet d'ajouter ou de modifier des titres à notre graphique : \n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(aes(col = espece)) +\n  labs(title = \"Pingouins de l'archipel Palmer\",\n       subtitle = \"Données pour 3 espèces sur 3 îles\",\n       caption = \"Données issues du package {Palmer penguins}\",\n       x = \"Longueur des ailes (mm)\",\n       y = \"Longueur du bec (mm)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 11-1.png){width=672}\n:::\n:::\n\n\nNous pouvons également utiliser les fonctions `ggtitle()`, `xlab()` et `ylab()` :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(aes(col = espece)) +\n  ggtitle(label = \"Pingouins de l'archipel Palmer\",\n          subtitle = \"Donnnées pour 3 espèces sur 3 îles\") +\n  labs(caption = \"Données issues du package {Palmer penguins}\") +\n  xlab(\"Longueur des ailes (mm)\") +\n  ylab(\"Longueur du bec (mm)\")\n```\n:::\n\n\n<br>\n\n## Histogramme\n\n<br>\n\nNous souhaitons visualiser la distribution de la masse des pingouins. Nous allons pour cela utiliser la fonction `geom_histogram()` : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = masse_corporelle_g)) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 13-1.png){width=672}\n:::\n:::\n\n\nPour bien différencier les barres, nous utilisons l'argument `col` pour colorer leur contour (l'argument `fill` permet de colorer l'intérieur) : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = masse_corporelle_g)) +\n  geom_histogram(col = \"white\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 14-1.png){width=672}\n:::\n:::\n\n\nLorsque vous exécutez le code ci-dessus, la console affiche le message suivant : `stat_bin() using bins = 30. Pick better value with binwidth`.\n\nPar défaut, un histogramme contient 30 classes. L'argument `bins` permet de changer le nombre de classes. N'hésitez pas à en essayer plusieurs !\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = masse_corporelle_g)) +\n  geom_histogram(col = \"white\", bins = 20)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 15-1.png){width=672}\n:::\n:::\n\n\nL'argument `bin_width` permet de modifier la largeur de chaque classe le long de l'axe x : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = masse_corporelle_g)) +\n  geom_histogram(col = \"white\", binwidth = 200)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 16-1.png){width=672}\n:::\n:::\n\n\n<br>\n\nCet histogramme ne nous renseigne sur la distribution de notre variable d'intérêt en fonction de l'espèce. Nous allons pour cela ajouter de la couleur à nos barres : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = masse_corporelle_g)) +\n  geom_histogram(aes(fill = espece),\n                 alpha = 0.5,\n                 binwidth = 200)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 17-1.png){width=672}\n:::\n:::\n\n\n<br>\n\nLes barres des histogrammes peuvent être arrangées de trois façons différentes à l'aide de l'argument `position` : \n\n- `position = \"stack\"` :  \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 18a-1.png){width=672}\n:::\n:::\n\n\n- `position = \"identity\"` :  \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 18b-1.png){width=672}\n:::\n:::\n\n\n- `position = \"dodge\"` :  \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 18c-1.png){width=672}\n:::\n:::\n\n\n<br>\n\nAjoutons des titres à notre graphique et modifions les titres des axes :  \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 18d-1.png){width=672}\n:::\n:::\n\n\n## Boîtes à moustaches\n\n<br>\n\nLes trois espèces ont-elles des hauteurs de becs similaires ? Pour répondre à cette question, nous allons utiliser un graphique en boites à moustaches à l'aide de `geom_boxplot()` : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = espece, y = hauteur_bec_mm, col = espece)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 19a-1.png){width=672}\n:::\n:::\n\n\n\nDans le cas présent, la légende n'est pas nécessaire, car les noms des espèces sont indiqués le long de l'axe x. Pour supprimer la légende, nous utilisons l'argument `show.legend = FALSE` : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = espece, y = hauteur_bec_mm, col = espece)) +\n  geom_boxplot(show.legend = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 19b-1.png){width=672}\n:::\n:::\n\n\n\nNous aimerions inverser les axes de notre graphique. Nous pouvons le faire de deux façons : \n\n- inverser les axes x et y dans les paramètres esthétiques\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = hauteur_bec_mm, y = espece, col = espece)) +\n  geom_boxplot(show.legend = FALSE)\n```\n:::\n\n\n- utiliser la fonction `coord_flip()`\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = espece, y = hauteur_bec_mm, col = espece)) +\n  geom_boxplot(show.legend = FALSE) +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 19d-1.png){width=672}\n:::\n:::\n\n\n<br>\n\nL'argument `width` permet de modifier la taille des boîtes : \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = espece, y = hauteur_bec_mm, col = espece)) +\n  geom_boxplot(width = 0.25, show.legend = FALSE) +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 19e-1.png){width=672}\n:::\n:::\n\n\nAjoutons des titres à notre graphique et modifions les titres des axes : \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = espece, y = hauteur_bec_mm, col = espece)) +\n  geom_boxplot(width = 0.25, show.legend = FALSE) +\n  labs(title = \"Hauteur des becs\",\n       subtitle = \"Données pour 3 espèces de pingouins sur 3 îles de l'archipel Palmer\",\n       caption = \"Données issues du package {Palmer penguins}\",\n       x = \"\",\n       y = \"Hauteur du bec (mm)\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 19f-1.png){width=672}\n:::\n:::\n\n\n<br>\n\n## Diagramme en barres\n\n<br>\n\nNous allons visualiser le nombre d'individus par espèce à l'aide de `geom_bar()` : \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = espece)) +\n  geom_bar(aes(fill = espece),\n           width = 0.75,\n           show.legend = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 20a-1.png){width=672}\n:::\n:::\n\n\nNous aimerions classer les espèces apr ordre décroissant de nombre d'individus. Pour cela, nous allons utliser la fonction `fct_infreq()` du package `{forcats}` qui permet de trier les niveaux d'un facteur. Cette approche est intéressante car elle est dynamique : R effectue directement le tri dans passer par un objet intermédiaire.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = fct_infreq(espece))) +\n  geom_bar(aes(fill = espece),\n           width = 0.75,\n           show.legend = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 20b-1.png){width=672}\n:::\n:::\n\n\nComme vu précédemment, nous pouvons modifier l'orientation des barres à l'aide de `coord_flip()`. \n\n::: {.callout-tip icon=\"true\"}\n\n## Ordre des niveaux et orientation\n\nGardez bien à l'esprit que sur votre graphique, le premier niveau d'un facteur se situe au plus près de l'origine. \n\nDans notre cas, si nous représentons des barres horizontales, l'espèce ayant le plus grand nombre d'individus se situera donc en bas du graphique. Pour corriger cela, nous utilisons la fonction `fct_rev()`\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = fct_rev(fct_infreq(espece)))) +\n  geom_bar(aes(fill = espece),\n           width = 0.75,\n           show.legend = FALSE) +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 20c-1.png){width=672}\n:::\n:::\n\n\nAjoutons des titres à notre graphique et modifions les titres des axes : \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = fct_rev(fct_infreq(espece)))) +\n  geom_bar(aes(fill = espece),\n           width = 0.75,\n           show.legend = FALSE) +\n  labs(title = \"Nombre d'individus\",\n       subtitle = \"Données pour 3 espèces de pingouins sur 3 îles de l'archipel Palmer\",\n       caption = \"Données issues du package {Palmer penguins}\",\n       x = \"\",\n       y = \"\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 20d-1.png){width=672}\n:::\n:::\n\n\n<br>\n\n# Graphiques multiples\n\n<br>\n\nReprenons notre graphique représentant le rapport entre la longueur et la hauteur du bec : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = longueur_aile_mm, y = longueur_bec_mm)) +\n  geom_point(aes(col = espece)) +\n  labs(title = \"Pingouins de l'archipel Palmer\",\n       subtitle = \"Données pour 3 espèces sur 3 îles\",\n       caption = \"Données issues du package {Palmer penguins}\",\n       x = \"Longueur des ailes (mm)\",\n       y = \"Longueur du bec (mm)\")\n```\n:::\n\n\nNous souhaitons séparer ce graphique afin de représenter les données par espèce ou encore par espèce et par île. Nous allons utiliser pour cela les fonctions `facet_wrap()` et `facet_grid()`.\n\n<br>\n\n## `facet_wrap()`  \n\n<br>\n\nNous ajoutons simplement une couche à notre code, en précisant à l'aide d'un tilde `~` quelle variable utiliser pour séparer les données : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = longueur_aile_mm, y = longueur_bec_mm)) +\n  geom_point(aes(col = espece)) +\n  labs(title = \"Pingouins de l'archipel Palmer\",\n       subtitle = \"Données pour 3 espèces sur 3 îles\",\n       caption = \"Données issues du package {Palmer penguins}\",\n       x = \"Longueur des ailes (mm)\",\n       y = \"Longueur du bec (mm)\") +\n  facet_wrap(~espece)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 21b-1.png){width=672}\n:::\n:::\n\n\nDes étiquettes sont automatiquement ajoutées pour indiquer les différentes espèces représentées. Nous pouvons donc supprimer la légende : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = longueur_aile_mm, y = longueur_bec_mm)) +\n  geom_point(aes(col = espece),\n             show.legend = FALSE) +\n  labs(title = \"Pingouins de l'archipel Palmer\",\n       subtitle = \"Données pour 3 espèces sur 3 îles\",\n       caption = \"Données issues du package {Palmer penguins}\",\n       x = \"Longueur des ailes (mm)\",\n       y = \"Longueur du bec (mm)\") +\n  facet_wrap(~espece)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 21c-1.png){width=672}\n:::\n:::\n\n\nL'option `dir` permet de modifier l'orientation des graphiques :  \n- `dir = \"h\"` : oritentation horizontale (par défaut)  \n- `dir = \"v\"` : orientation verticale\n\nL'option `strip.position` permet de modifier l'emplacement des étiquettes : \n- `strip.position = \"top\"` : au-dessus des graphiques (par défaut)  \n- `strip.position = \"right\"` : à droite des graphiques    \n- `strip.position = \"bottom\"` : en-dessous des graphiques  \n- `strip.position = \"left\"` : à gauche des graphiques  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = longueur_aile_mm, y = longueur_bec_mm)) +\n  geom_point(aes(col = espece),\n             show.legend = FALSE) +\n  labs(title = \"Pingouins de l'archipel Palmer\",\n       subtitle = \"Données pour 3 espèces sur 3 îles\",\n       caption = \"Données issues du package {Palmer penguins}\",\n       x = \"Longueur des ailes (mm)\",\n       y = \"Longueur du bec (mm)\") +\n  facet_wrap(~espece,\n             dir = \"v\",\n             strip.position = \"right\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 21d-1.png){width=672}\n:::\n:::\n\n\nL'option `scales` permet d'ajuster l'échelle des graphiques : \n\n- `scales = \"fixed\"` : même échelle pour tous les graphiques (par défaut)  \n- `scales = \"free\"` : ajuster l'échelle des deux axes pour chaque graphique  \n- `scales = \"free_x\"` : même échelle sur l'axe y et échelle ajustée sur l'axe x  \n- `scales = \"free_y\"` : même échelle sur l'axe x et échelle ajustée sur l'axe y  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = longueur_aile_mm, y = longueur_bec_mm)) +\n  geom_point(aes(col = espece),\n             show.legend = FALSE) +\n  labs(title = \"Pingouins de l'archipel Palmer\",\n       subtitle = \"Données pour 3 espèces sur 3 îles\",\n       caption = \"Données issues du package {Palmer penguins}\",\n       x = \"Longueur des ailes (mm)\",\n       y = \"Longueur du bec (mm)\") +\n  facet_wrap(~espece,\n             dir = \"v\",\n             strip.position = \"right\",\n             scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 21e-1.png){width=672}\n:::\n:::\n\n\n<br>\n\n## `facet_grid()`  \n\n<br>\n\nLa fonction `facet_grid()` permet de séparer un graphique selon deux variables discrètes (ou variables catégorielles). La syntaxe est la même que pour la fonction `facet_wrap()` : nous précisons à l'aide d'un tilde `~` les variables à utiliser pour séparer les données selon des lignes et des colonnes : `facet_grid(lignes ~ colonnes)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = longueur_aile_mm, y = longueur_bec_mm)) +\n  geom_point(aes(col = espece),\n             show.legend = FALSE) +\n  labs(title = \"Pingouins de l'archipel Palmer\",\n       subtitle = \"Données pour 3 espèces sur 3 îles\",\n       caption = \"Données issues du package {Palmer penguins}\",\n       x = \"Longueur des ailes (mm)\",\n       y = \"Longueur du bec (mm)\") +\n  facet_grid(espece ~ ile)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 21f-1.png){width=672}\n:::\n:::\n\n\nToutes les combinaisons possibles sont affichées, c'est la raison pour laquelle certaines cases sont vides (aucune observation pour la combinaison).\n\nL'option `switch` permet de modifier la position des étiquettes :  \n- `switch = \"x\"` : étiquettes de l'axe x en bas du graphique  \n- `switch = \"y\"` : étiquettes de l'axe y à gauche du graphique  \n- `switch = \"both\"` pour effectuer les deux modifications simultanément\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = longueur_aile_mm, y = longueur_bec_mm)) +\n  geom_point(aes(col = espece),\n             show.legend = FALSE) +\n  labs(title = \"Pingouins de l'archipel Palmer\",\n       subtitle = \"Données pour 3 espèces sur 3 îles\",\n       caption = \"Données issues du package {Palmer penguins}\",\n       x = \"Longueur des ailes (mm)\",\n       y = \"Longueur du bec (mm)\") +\n  facet_grid(espece ~ ile, switch = \"x\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 21g-1.png){width=672}\n:::\n:::\n\n\n<br>\n\n# Utilisation du pipe `%>%`\n\n<br>\n\nNous avions vu [dans un autre tutoriel](https://ateliers-codons.netlify.app/posts/03-introduction-tidyverse/#ceci-nest-pas-un-pipe) comment enchaîner les opérations à l'aide du pipe `%>%`.  \n\nNous pouvons utiliser le pipe pour générer un graphique. Cette façon de procéder permet de manipuler les données utilisées pour créer le graphique sans avoir besoin de multiplier les objets intermédiaires. En utilisant le pipe `%>%` pour créer un graphique, nous pouvons également profiter de l'auto-complétion à l'aide de la touche `Tab` pour préciser les variables : \n\n\n::: {.cell}\n\n```{.r .cell-code}\npingouins %>% \n  ggplot(aes(x = longueur_aile_mm, y = longueur_bec_mm,\n             col = espece)) +\n  geom_point()\n```\n:::\n\n\n<br>\n\n# Améliorer ses graphiques \n\n<br>\n\n`{ggplot2}` propose une multitude de paramètres permettant la personnalisation des graphiques. Les possibilités sont quasimment infinies ! Nous allons voir comment améliorer nos graphiques avec certaines de ces options.\n\n<br>\n\n## Les couleurs\n\n<br>\n\n### Utiliser des palettes\n\n<br>\n\nIl existe plusieurs palettes de couleurs : \n\n![](img/rcolorbrewer.png)\n\nDeux fonctions permettent d'utiliser ces palettes : \n\n- `scale_color_brewer()` : appliquer la palette au paramètre `col`  \n- `scale_fill_brewer()` : appliquer la palette au paramètre `fill`\n\nNous utiliserons l'une ou l'autre de ces fonctions ou les deux selon les paramètres esthétiques de notre graphique. Nous pouvons par exemple choisir d'appliquer une palette pour remplir des points en gardant un contour noir : \n\n\n::: {.cell}\n\n```{.r .cell-code}\npingouins %>% \n  ggplot(aes(x = longueur_aile_mm, y = longueur_bec_mm)) +\n  geom_point(shape = 21, size = 5, col = \"black\",\n             aes(fill = espece)) +\n  scale_fill_brewer(palette = \"Accent\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 23a-1.png){width=672}\n:::\n:::\n\n\nIl existe beaucoup d'autres palettes, accessibles via des packages, dont la liste est [accessible ici](https://github.com/EmilHvitfeldt/r-color-palettes).\n\n<br>\n\n### Définir des couleurs \n\n<br>\n\nDeux fonctions permettent de définir nous-mêmes les couleurs à utiliser : \n\n- `scale_color_manual()` : appliquer les couleurs au paramètre `col`  \n- `scale_fill_manual()` : appliquer les couleurs au paramètre `fill`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npingouins %>% \n  ggplot(aes(x = longueur_aile_mm, y = longueur_bec_mm)) +\n  geom_point(aes(col = espece)) +\n  scale_color_manual(values = c(\"Adelie\" = \"darkorange\",\n                                 \"Chinstrap\" = \"purple\",\n                                 \"Gentoo\" = \"cyan4\")) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 23b-1.png){width=672}\n:::\n:::\n\n\nSi notre graphique contient plusieurs couches utilisant les mêmes couleurs, nous pouvons créer un vecteur de couleurs pour éviter de devoir taper plusieurs fois le même code : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom.cols <- c(\"darkorange\", \"purple\", \"cyan4\")\nnames(custom.cols) <- c(\"Adelie\", \"Chinstrap\", \"Gentoo\")\n\npingouins %>% \n  ggplot(aes(x = longueur_aile_mm, y = longueur_bec_mm)) +\n  geom_point(aes(col = espece)) +\n  scale_color_manual(values = custom.cols) \n```\n:::\n\n\nIl est important d'associer un niveau (un nom d'espèce) à chaque couleur. Cela permettra de toujours associer une certaine couleur à une même espèce, et évitera des changements de couleurs si nous manipulons les données avant de générer le graphique.\n\n<br>\n\n## Combiner plusieurs types de graphiques\n\n<br>\n\nReprenons notre graphique en boîtes à moustaches : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = espece, y = hauteur_bec_mm, col = espece)) +\n  geom_boxplot(width = 0.25, show.legend = FALSE) +\n  labs(title = \"Hauteur des becs\",\n       subtitle = \"Données pour 3 espèces de pingouins sur 3 îles de l'archipel Palmer\",\n       caption = \"Données issues du package {Palmer penguins}\",\n       x = \"\",\n       y = \"Hauteur du bec (mm)\") +\n  coord_flip()\n```\n:::\n\n\nApportons quelques modifications et utilisons les mêmes couleurs :  \n- `lwd` permet de définir l'épaisseur des traits des boîtes  \n- `alpha` permet d'ajuster la transparence de la couleur de remplissage de la boîte (`fill`)\n\nUne option permet de supprimer les données aberrantes du graphique : `outlier.shape = NA`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom.cols <- c(\"darkorange\", \"purple\", \"cyan4\")\nnames(custom.cols) <- c(\"Adelie\", \"Chinstrap\", \"Gentoo\")\n\npingouins %>% \n  ggplot(aes(x = espece, y = hauteur_bec_mm)) +\n  geom_boxplot(aes(col = espece, fill = espece),\n               width = 0.25, lwd = 0.5, alpha = 0.25,\n               show.legend = FALSE) +\n  scale_color_manual(values = custom.cols) +\n  scale_fill_manual(values = custom.cols) +\n  labs(title = \"Hauteur des becs\",\n       subtitle = \"Données pour 3 espèces de pingouins sur 3 îles de l'archipel Palmer\",\n       caption = \"Données issues du package {Palmer penguins}\",\n       x = \"\",\n       y = \"Hauteur du bec (mm)\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 23e-1.png){width=672}\n:::\n:::\n\n\nNous pouvons superposer à ces boîtes à moustaches l'affichage des données pour visualiser la distribution des observations. Nous ajoutons pour cela une couche `geom_point()`.\n\n::: {.cell}\n\n```{.r .cell-code}\npingouins %>% \n  ggplot(aes(x = espece, y = hauteur_bec_mm)) +\n  geom_boxplot(aes(col = espece, fill = espece),\n               width = 0.25, lwd = 0.5, alpha = 0.25,\n               show.legend = FALSE) +\n  geom_point(aes(col = espece, fill = espece),\n             show.legend = FALSE) +\n  scale_color_manual(values = custom.cols) +\n  scale_fill_manual(values = custom.cols) +\n  labs(title = \"Hauteur des becs\",\n       subtitle = \"Données pour 3 espèces de pingouins sur 3 îles de l'archipel Palmer\",\n       caption = \"Données issues du package {Palmer penguins}\",\n       x = \"\",\n       y = \"Hauteur du bec (mm)\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 23f-1.png){width=672}\n:::\n:::\n\n\nNous aimerions espacer les points pour rendre le graphique plus lisible. Nous utilisons pour cela une variation du nuage de points, à l'aide de la fonction `geom_jitter()`. Les paramètres `width` et `height` permettent d'ajuster respectivement l'étalement en largeur et en hauteur du nuage.\n\n::: {.cell}\n\n```{.r .cell-code}\npingouins %>% \n  ggplot(aes(x = espece, y = hauteur_bec_mm)) +\n  geom_boxplot(aes(col = espece, fill = espece),\n               width = 0.25, lwd = 0.5, alpha = 0.25,\n               show.legend = FALSE) +\n  geom_jitter(aes(col = espece),\n             width = 0.1, alpha = 0.25, show.legend = FALSE) +\n  scale_color_manual(values = custom.cols) +\n  scale_fill_manual(values = custom.cols) +\n  labs(title = \"Hauteur des becs\",\n       subtitle = \"Données pour 3 espèces de pingouins sur 3 îles de l'archipel Palmer\",\n       caption = \"Données issues du package {Palmer penguins}\",\n       x = \"\",\n       y = \"Hauteur du bec (mm)\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 23g-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-caution icon=\"true\"}\n\n## Attention à l'orientation !\n\nL'utilisation de `width` ou `height` dépendra de la répartition des variables le long des axes x et y, ainsi que de l'utilisation de `coord_flip()`.\n\n:::\n\n<br>\n\n## Ajouter du texte\n\n<br>\n\nReprenons notre graphique en barres et modifions les couleurs comme nous l'avons fait pour les autres graphiques : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom.cols <- c(\"darkorange\", \"purple\", \"cyan4\")\nnames(custom.cols) <- c(\"Adelie\", \"Chinstrap\", \"Gentoo\")\n\npingouins %>% \n  ggplot(aes(x = fct_rev(fct_infreq(espece)),\n             fill = espece)) +\n  geom_bar(width = 0.75,\n           show.legend = FALSE) +\n  scale_fill_manual(values = custom.cols) +\n  labs(title = \"Nombre d'individus\",\n       subtitle = \"Données pour 3 espèces de pingouins sur 3 îles de l'archipel Palmer\",\n       caption = \"Données issues du package {Palmer penguins}\",\n       x = \"\",\n       y = \"\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 24a-1.png){width=672}\n:::\n:::\n\n\nNous aimerions ajouter des étiquettes indiquant le nombre d'individus par espèce. Nous utilisons pour cela la fonction `geom_text()` avec les options suivantes : \n\n- `aes(label = ..count..)` : indique que les étiquettes contiendront le nombre d'observations par niveau de variable utilisé pour générer les barres (ici les espèces)  \n- `stat = \"count\"` : indique le calcul à effectuer, ici un simple comptage  \n- `hjust = 1.5` : alignement horizontal des étiquettes, que nous souhaitons placer à l'intérieur des barres  \n- `col = \"white\"` : couleur du texte des étiquettes  \n- `size = 5` : taille de la police du texte\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom.cols <- c(\"darkorange\", \"purple\", \"cyan4\")\nnames(custom.cols) <- c(\"Adelie\", \"Chinstrap\", \"Gentoo\")\n\npingouins %>% \n  ggplot(aes(x = fct_rev(fct_infreq(espece)),\n             fill = espece)) +\n  geom_bar(width = 0.75,\n           show.legend = FALSE) +\n  geom_text(aes(label = ..count..),\n            stat = \"count\",\n            hjust = 1.5,\n            col = \"white\", size = 5) +\n  scale_fill_manual(values = custom.cols) +\n  labs(title = \"Nombre d'individus\",\n       subtitle = \"Données pour 3 espèces de pingouins sur 3 îles de l'archipel Palmer\",\n       caption = \"Données issues du package {Palmer penguins}\",\n       x = \"\",\n       y = \"\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 24b-1.png){width=672}\n:::\n:::\n\n\n\n\n<br>\n\n## Les thèmes de `{ggplot2}`\n\n<br>\n\nLe fond grisé du graphique est proposé par défaut par `{ggplot2}` : il s'agit d'un thème définissant l'apparence générale d'un graphique : couleur de l'arrière-plan, de la grille, présence d'un cadre, ...\n\nIl existe plusieurs thèmes prédéfinis qui peuvent être appliqués à un graphique à l'aide de la fonction `theme_...()` : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom.cols <- c(\"darkorange\", \"purple\", \"cyan4\")\nnames(custom.cols) <- c(\"Adelie\", \"Chinstrap\", \"Gentoo\")\n\npingouins %>% \n  ggplot(aes(x = longueur_aile_mm, y = longueur_bec_mm)) +\n  geom_point(aes(col = espece)) +\n  scale_color_manual(values = custom.cols) +\n  theme_...()\n```\n:::\n\n\n![](img/ggplot2_themes.png)\n\n<br>\n\n## Les quatre composants d'un `ggplot`  \n\n<br>\n\nUn graphique est composé de quatre éléments, dont chacun peut être paramatré à l'aide de multiples options : \n\n- Le **\"panel\"** : zone contenant les éléments géométriques de notre graphique (nuage de points, barres, ...)  \n\n- Le **\"plot\"** : zone qui entoure le panel et qui contient le titre, le sous-titre, ...  \n\n- Les **axes** du graphiques avec leurs titres, les graduations, ...  \n\n- La **légende** qui permet d'expliquer à quoi correspondent les couleurs, les formes , ...\n\nCes paramètres sont précisés dans une parenthèse `theme()` à ajouter à la suite du code servant à générer notre graphique.\n\n<br>\n\nCommençons par créer un graphique simple :  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n(p <- pingouins %>% \n  ggplot(aes(x = longueur_bec_mm, y = hauteur_bec_mm)) +\n  geom_point(aes(col = espece),\n             size = 3, alpha = 0.5) +\n  scale_color_manual(values = custom.cols) +\n  labs(title = \"Rapport entre la hauteur et la longueur du bec\",\n       subtitle = \"pour trois espèces de pingouins de l'archipel Palmer\",\n       x = \"Longueur du bec (mm)\",\n       y = \"Hauteur du bec (mm)\")\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 26a-1.png){width=672}\n:::\n:::\n\n\nLes parenthèses qui entourent le code ci-dessus permettent de l'exécuter et d'afficher le résultat.\n\n::: {.callout-tip icon=\"true\"}\n\n## Modifier le titre de la légende\n\nPar défaut, le titre de la légende reprend le nom de la variable utilisée pour définir les groupes. Nous pouvons modifier ce titre à l'intérieur de la parenthèse `labs()`. Dans le graphique ci-dessus, nous avions défini les paramètres esthétiques suivants : `geom_point(aes(col = espece))`. Nous allons donc renommer l'élément `col` de notre légende (si nous avions utilisé `geom_point(aes(fill = espece))` nous renommerions l'élément `fill`) :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(p <- pingouins %>% \n  ggplot(aes(x = longueur_bec_mm, y = hauteur_bec_mm)) +\n  geom_point(aes(col = espece),\n             size = 3, alpha = 0.5) +\n  scale_color_manual(values = custom.cols) +\n  labs(title = \"Rapport entre la hauteur et la longueur du bec\",\n       subtitle = \"pour trois espèces de pingouins de l'archipel Palmer\",\n       x = \"Longueur du bec (mm)\",\n       y = \"Hauteur du bec (mm)\",\n       col = \"ESPECES\")\n)\n```\n:::\n\n\n:::\n\n<br>\n\n### Le \"panel\"\n\n<br>\n\n![](img/ggplot_themes_panel.png)\n\nLes modifications s'effectuent à l'aide de la syntaxe suivante : \n\n::: {.cell}\n\n```{.r .cell-code}\ntheme(\n  nom-du-parametre-1 = element_...(),\n  nom-du-parametre-2 = element_...()\n)\n```\n:::\n\n\nLa fonction `element_...()` dépendra de ce que nous souhaitons modifier : \n\n- `element_rect()` pour modifier une zone rectangulaire (*panel.background*)  \n\n- `element_line()` pour modifier des lignes (*panel.border*)  \n\n- `element_text()` pour modifier du texte\n\nLa fonction `element_blank()` permet de supprimer un élément du graphique.\n\n<br>\n\nNous allons effectuer les modifications suivantes : \n\n|     |     |\n| --- | --- |\n| modifier la couleur de l'arrière-plan | `panel.background = element_rect()` |\n| modifier la couleur de la bordure     | `panel.border = element_rect()` |  \n| supprimer les graduations mineures     | `panel.grid.minor = element_blank()` |  \n| modifier les graduations majeures     | `panel.grid.major = element_line()` | \n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- p +\n  theme(\n    panel.background = element_rect(fill = \"lightcyan\"),\n    panel.border = element_rect(fill = NA, color = \"black\", linewidth = 1.5),\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_line(color = \"black\", linetype = \"dotted\")\n  )\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}