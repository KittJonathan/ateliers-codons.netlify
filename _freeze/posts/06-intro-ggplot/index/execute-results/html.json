{
  "hash": "0f3cc0a6c18c5840f1ddf45b6b6ed4e5",
  "result": {
    "markdown": "---\ntitle: \"Introduction à ggplot2\"\nsubtitle: \"Créer des graphiques à l'aide du package {ggplot2}\"\nauthor:\n  - Jonathan Kitt\ndate: \"2022-12-12\"\ndraft: true\ncategories: [R, RStudio, Graphiques, ggplot2]\nformat: \n  html: \n    toc: true\n    toc-depth: 2\n    toc-title: \"Sommaire\"\n---\n\n\n# Introduction\n\n<br>\n\n## La grammaire des graphiques\n\n<br>\n\nLe package [`{ggplot2}`](https://ggplot2.tidyverse.org/) (qui fait partie du [Tidyverse](https://www.tidyverse.org/)) repose sur le principe de la **grammaire des graphiques** : un graphique se construit couche par couche.\n\n![](img/ggplot-grammar-of-graphics.png){width=\"50%\"}\n\n<br>\n\n## Pré-requis\n\n<br>\n\nSi vous n'avez pas suivi les autres tutoriels, vous pouvez [créer un projet RStudio](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/#créer-un-projet) et [une arborescence](https://ateliers-codons.netlify.app/posts/02-premiers-pas-avec-r/#créer-une-arborescence).\n\nCommencez par installer le package `{ggplot2}`. Vous pouvez également installer et charger le `{tidyverse}` (préférez cette solution si vous comptez manipuler les données avant de créer les graphiques).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Installer et charger le package {ggplot2}\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\n\n# Installer et charger la suite {tidyverse}\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n<br>\n\n## Le jeu de données\n\n<br>\n\nNous allons utiliser le jeu de données tiré du package [`{Palmer penguins}`](https://allisonhorst.github.io/palmerpenguins/).  \n\nPour importer ce jeu de données, utilisez la commande suivante : \n\n\n::: {.cell}\n\n```{.r .cell-code}\npingouins <- readr::read_csv(\"https://raw.githubusercontent.com/codons-blog/ateliers_codons/main/data/pingouins_propre.csv\")\n```\n:::\n\n\nExplorons rapidement ces données : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::glimpse(pingouins)\n```\n:::\n\n\n<br>\n\n# Graphiques simples\n\n<br>\n\n## Nuage de points \n\n<br>\n\nUn `{ggplot2}` nécessite au minimum les trois éléments suivants :   \n\n- les données utilisées (**data**)  \n\n- l'apparence esthétique des éléments du graphique, comme la position, la couleur, la taille, la forme, et la transparence (**aesthetics**)  \n\n- les formes utilisées pour représenter les données (**geometries**)\n\nCes trois éléments suffisent pour créer un graphique simple. Il existe beaucoup d'autres éléments permettant la personnalisation du graphique.\n\n<br>\n\nCréons un nuage de points représentant la longueur du bec en fonction de la longueur des ailes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 01-1.png){width=672}\n:::\n:::\n\n\nCette commande permet d'initialiser notre graphique. Seul l'arrière-plan gris est visible pour le moment.\n\nAjoutons les deux variables que nous souhaitons représenter : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       mapping = aes(x = longueur_aile_mm, y = longueur_bec_mm))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 02-1.png){width=672}\n:::\n:::\n\n\nLes deux variables ont été ajoutées, et les échelles des deux axes ont été automatiquement calculées.\n\n::: {.callout-note icon=\"true\"}\n\n## mapping = aes() ou aes()\n\nL'argument `mapping =` n'est pas indispensable, le code suivant fonctionnera de la même façon : \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = longueur_aile_mm, y = longueur_bec_mm))\n```\n:::\n\n\n:::\n\nPour finir, nous allons préciser que nous souhaitons représenter la relation entre ces deux variables à l'aide d'un nuage de points : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = longueur_aile_mm, y = longueur_bec_mm)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 03-1.png){width=672}\n:::\n:::\n\n\nUn graphique `{ggplot2}` peut être stocké dans un objet. Cela permet de définir le graphique basique puis d'y apporter des modifications.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggplot(data = pingouins,\n       aes(x = longueur_aile_mm, y = longueur_bec_mm))\n```\n:::\n\n\n\n::: {.callout-caution icon=\"true\"}\n\n## Le `+`\n\nLorsque vous créez un graphique avec `{ggplot2}`, l'ajout d'une nouvelle couche s'effectue à l'aide d'un `+` à la fin de la ligne.\n\n:::\n\n<br>\n\n### Ajouter des couleurs\n\n<br>\n\nLe nuage de points ci-dessus représente la relation entre deux variables, mais ne nous donne aucune indication sur l'identité de chaque point. Nous aimerions colorer chaque point en fonction de l'espèce de l'individu.\n\nIl existe deux façons d'ajouter de la couleur à un graphique `{ggplot2}` : \n\n- colorer l'ensemble des éléments (points, lignes, ...) avec une même couleur  \n\n- colorer chaque élément en fonction d'une autre variable (ici l'espèce)  \n\n<br>\n\nPour colorer l'ensemble des points, nous ajoutons un argument `color` (`colour` et `col` fonctionnent également) en dehors des parenthèses définissant l'esthétique du graphique : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(col = \"darkblue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 04-1.png){width=672}\n:::\n:::\n\n\nL'argument `alpha` permet de définir la transparence des points. Il prend une valeur numérique entre 0 (transparent) et 1 (opaque) : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(col = \"darkblue\", alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 05-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip icon=\"true\"}\n\n## Les couleurs\n\nVous pouvez utiliser des couleurs prédéfinies (voir la liste [ici](www.stat.columbia.edu/~tzheng/files/Rcolor.pdf)).  \n\nVous pouvez également utiliser des codes hexadécimaux ou encore des couleurs RGB à l'aide de la fonction `rgb()` :\n \n\n::: {.cell}\n\n```{.r .cell-code}\ng + geom_point(col = \"darkblue\")\ng + geom_point(col = \"#00008b\")\ng + geom_point(col = rgb(red = 0, green = 0, blue = 139, maxColorValue = 255))\n```\n:::\n\n\n:::\n\n<br>\n\nPour colorer les points selon l'espèce, nous plaçons l'argument `color` dans une parenthèse `aes()` en précisant la variable à utiliser pour définir les groupes d'individus : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(aes(col = espece))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 06-1.png){width=672}\n:::\n:::\n\n\nUne légende permettant de différencier les gorupes a été ajoutée à droite du graphique.\n\n<br>\n\n::: {.callout-note icon=\"true\"}\n\n## L'ordre des arguments\n\nLorsque vous créez un graphique avec `{ggplot2}`, l'ordre des arguments peut varier. Si vous n'utilisez qu'un seul jeu de données, vous pouvez définir plusieurs arguments dans la parenthèse `ggplot()`. Si votre graphique utilisera plusieurs jeux de données, vous préciserez dans chaque couche quelles données utiliser.\nLes paramètres esthétiques définis dans la parenthèse `ggplot()` seront appliqués à l'ensemble des couches, alors que ceux définis dans une parenthèse `geom()` ne concerneront que cette couche.\n\nVoici plusieurs manières d'écrire le code pour créer un même graphique : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins) +\n  geom_point(aes(x = longueur_aile_mm, y = longueur_bec_mm, col = espece))\n\nggplot(data = pingouins, aes(x = longueur_aile_mm, y = longueur_bec_mm)) +\n  geom_point(aes(col = espece))\n\nggplot(data = pingouins, aes(x = longueur_aile_mm, y = longueur_bec_mm,\n                             col = espece)) +\n  geom_point()\n\nggplot() +\n  geom_point(data = pingouins, aes(x = longueur_aile_mm, y = longueur_bec_mm,\n                                   col = espece))\n```\n:::\n\n\n:::\n\n<br>\n\n### Modifier l'apparence des points\n\n<br>\n\nL'argument `shape` permet de changer la forme des points. Comme pour la couleur, vous pouvez utiliser une seule forme pour l'ensemble des points, ou utiliser différentes formes pour représenter des groupes.\n\nLa forme des points peut être précisées à l'aide :  \n\n- d'un code numérique :  \n![](img/points-symbols.png){width=\"50%\"}  \n\n- d'un nom (`square`, `circle`, `diamond`, ...)\n\nModifions la forme de l'ensemble des points : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(shape = 5,\n             aes(col = espece))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 07-1.png){width=672}\n:::\n:::\n\n\nUtilisons différentes formes en fonction de l'île : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(aes(col = espece, shape = ile))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 08-1.png){width=672}\n:::\n:::\n\n\n<br>\n\nL'argument `size` permet de modificer la taille des points. Là encore, nous pouvons définir une même taille pour l'ensemble des points, ou représenter une variable continue de nos données à l'aide de la taille.\n\nAugmentons la taille de l'ensemble des points : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(shape = 5, size = 3,\n             aes(col = espece))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 09-1.png){width=672}\n:::\n:::\n\n\nUtilisons la taille pour représenter la masse des pingouins : \n\n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(aes(col = espece, shape = ile, size = masse_corporelle_g))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 10-1.png){width=672}\n:::\n:::\n\n\n<br>\n\n::: {.callout-tip icon=\"true\"}\n\n## L'argument `stroke`\n\nLes formes 21 à 25 peuvent prendre plusieurs arguments :  \n\n- `color` : couleur du contour  \n- `fill` : couleur de remplissage  \n- `stroke` : largeur du contour\n\n:::\n\n<br>\n\n### Ajouter et modifier des titres\n\n<br>\n\nLa fonction `labs()` permet d'ajouter ou de modifier des titres à notre graphique : \n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(aes(col = espece)) +\n  labs(title = \"Pingouins de l'archipel Palmer\",\n       subtitle = \"Données pour 3 espèces sur 3 îles\",\n       caption = \"Données issues du package {Palmer penguins}\",\n       x = \"Longueur des ailes (mm)\",\n       y = \"Longueur du bec (mm)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 11-1.png){width=672}\n:::\n:::\n\n\nNous pouvons également utiliser les fonctions `ggtitle()`, `xlab()` et `ylab()` :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng +\n  geom_point(aes(col = espece)) +\n  ggtitle(label = \"Pingouins de l'archipel Palmer\",\n          subtitle = \"Donnnées pour 3 espèces sur 3 îles\") +\n  labs(caption = \"Données issues du package {Palmer penguins}\") +\n  xlab(\"Longueur des ailes (mm)\") +\n  ylab(\"Longueur du bec (mm)\")\n```\n:::\n\n\n<br>\n\n## Histogramme\n\n<br>\n\nNous souhaitons visualiser la distribution de la masse des pingouins. Nous allons pour cela utiliser la fonction `geom_histogram()` : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = masse_corporelle_g)) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 13-1.png){width=672}\n:::\n:::\n\n\nPour bien différencier les barres, nous utilisons l'argument `col` pour colorer leur contour (l'argument `fill` permet de colorer l'intérieur) : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = masse_corporelle_g)) +\n  geom_histogram(col = \"white\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 14-1.png){width=672}\n:::\n:::\n\n\nLorsque vous exécutez le code ci-dessus, la console affiche le message suivant : `stat_bin() using bins = 30. Pick better value with binwidth`.\n\nPar défaut, un histogramme contient 30 classes. L'argument `bins` permet de changer le nombre de classes. N'hésitez pas à en essayer plusieurs !\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = masse_corporelle_g)) +\n  geom_histogram(col = \"white\", bins = 20)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 15-1.png){width=672}\n:::\n:::\n\n\nL'argument `bin_width` permet de modifier la largeur de chaque classe le long de l'axe x : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pingouins,\n       aes(x = masse_corporelle_g)) +\n  geom_histogram(col = \"white\", binwidth = 200)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/basic plot 16-1.png){width=672}\n:::\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}